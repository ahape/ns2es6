diff --git a/ts/Reports/Classes/report.ts b/ts/Reports/Classes/report.ts
index 0a51ba5..f180926 100644
--- a/ts/Reports/Classes/report.ts
+++ b/ts/Reports/Classes/report.ts
@@ -1,15 +1,15 @@
 /// <reference path="../../enums/datatype.ts" />
 namespace Brightmetrics.Reports.Classes {
-    export class Report implements BRIDs.IReportSaved {
-        public accessLevel: BREs.AccessLevel;
+    export class Report implements Brightmetrics.Reports.Interfaces.DTOs.IReportSaved {
+        public accessLevel: Brightmetrics.Reports.Enums.AccessLevel;
         public dataConnectionGroup: number;
         public id: string;
-        public template: BRIDs.IReportTemplate;
-        public schedules: BIs.IReportSchedule[];
-        public type: BREs.ReportObjectType;
-        public getDSI: (dcgId: number) => BIs.IDataSourceInstance | null;
+        public template: Brightmetrics.Reports.Interfaces.DTOs.IReportTemplate;
+        public schedules: Brightmetrics.Interfaces.IReportSchedule[];
+        public type: Brightmetrics.Reports.Enums.ReportObjectType;
+        public getDSI: (dcgId: number) => Brightmetrics.Interfaces.IDataSourceInstance | null;
 
-        public constructor(dsi?: BIs.IDataSourceInstance, reportType?: BREs.ReportType) {
+        public constructor(dsi?: Brightmetrics.Interfaces.IDataSourceInstance, reportType?: Brightmetrics.Reports.Enums.ReportType) {
             if (dsi !== void (0) && reportType !== void (0)) {
                 this._create(dsi, reportType);
             }
@@ -36,30 +36,30 @@ namespace Brightmetrics.Reports.Classes {
                 }
 
                 return null;
-            }) as (dcgId: number) => BIs.IDataSourceInstance | null;
+            }) as (dcgId: number) => Brightmetrics.Interfaces.IDataSourceInstance | null;
         }
 
-        private _create(dsi: BIs.IDataSourceInstance, reportType: BREs.ReportType) {
-            this.accessLevel = BREs.AccessLevel.Admin;
+        private _create(dsi: Brightmetrics.Interfaces.IDataSourceInstance, reportType: Brightmetrics.Reports.Enums.ReportType) {
+            this.accessLevel = Brightmetrics.Reports.Enums.AccessLevel.Admin;
             this.id = _.uniqueId("unsaved_");
             this.schedules = [];
 
             const dtDim = dsi.Dimensions[0];
-            const canPresetDateRange = Boolean(dtDim && dtDim.DataType === BEs.DataType.DateTime && !dtDim.NoDetail);
-            const options = [] as BRIDs.IParameter[];
+            const canPresetDateRange = Boolean(dtDim && dtDim.DataType === Brightmetrics.Enums.DataType.DateTime && !dtDim.NoDetail);
+            const options = [] as Brightmetrics.Reports.Interfaces.DTOs.IParameter[];
 
             if (canPresetDateRange) {
                 const defaultFilter = {
                     defaultFilters: {},
-                    defaultType: BREs.FilterOption.Relative,
+                    defaultType: Brightmetrics.Reports.Enums.FilterOption.Relative,
                     dimensionIndex: 0,
                     fixed: false,
                     label: dtDim.Name,
-                } as BRIDs.IParameterDimension;
+                } as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension;
 
                 Utils.ReportHelpers.normalizeParameter(defaultFilter, dsi);
 
-                if (reportType === BREs.ReportType.Detail) {
+                if (reportType === Brightmetrics.Reports.Enums.ReportType.Detail) {
                     defaultFilter.defaultFilters[defaultFilter.defaultType].values = [
                         null,
                         Constants.defaultDateRangeDetail
@@ -92,7 +92,7 @@ namespace Brightmetrics.Reports.Classes {
                 topX: 0,
                 values: [],
             };
-            this.type = BREs.ReportObjectType.Saved;
+            this.type = Brightmetrics.Reports.Enums.ReportObjectType.Saved;
         }
 
         public getGrouping(): string {
@@ -105,7 +105,7 @@ namespace Brightmetrics.Reports.Classes {
             return this.getDSI(dcgId) !== null;
         }
 
-        public toJSON(convertDateTime = true): BRIs.IReportTemplateExport {
+        public toJSON(convertDateTime = true): Brightmetrics.Reports.Interfaces.IReportTemplateExport {
             const { filters, detailFilters } = Utils.ReportHelpers.exportDrillthroughParameters(
                 null,
                 this.template.options,
@@ -127,35 +127,35 @@ namespace Brightmetrics.Reports.Classes {
             };
         }
 
-        public static fromSaved(savedUserReport: BRIDs.IReportSaved): Report {
+        public static fromSaved(savedUserReport: Brightmetrics.Reports.Interfaces.DTOs.IReportSaved): Report {
             const report = new Report();
-            report.accessLevel = savedUserReport.accessLevel || BREs.AccessLevel.None;
+            report.accessLevel = savedUserReport.accessLevel || Brightmetrics.Reports.Enums.AccessLevel.None;
             report.dataConnectionGroup = savedUserReport.dataConnectionGroup;
             report.id = savedUserReport.id;
             report.schedules = savedUserReport.schedules;
             report.template = savedUserReport.template;
-            report.type = BREs.ReportObjectType.Saved;
+            report.type = Brightmetrics.Reports.Enums.ReportObjectType.Saved;
             return report;
         }
 
-        public static fromSystem(template: BRIDs.IReportTemplate): Report {
+        public static fromSystem(template: Brightmetrics.Reports.Interfaces.DTOs.IReportTemplate): Report {
             const report = new Report();
-            report.accessLevel = BREs.AccessLevel.Admin;
+            report.accessLevel = Brightmetrics.Reports.Enums.AccessLevel.Admin;
             report.dataConnectionGroup = 0;
             report.id = template.id;
             report.schedules = [];
-            report.type = BREs.ReportObjectType.System;
+            report.type = Brightmetrics.Reports.Enums.ReportObjectType.System;
             report.template = template;
             return report;
         }
 
-        public static fromPartnerTemplate(template: BRIDs.IReportTemplate): Report {
+        public static fromPartnerTemplate(template: Brightmetrics.Reports.Interfaces.DTOs.IReportTemplate): Report {
             const report = new Report();
-            report.accessLevel = BREs.AccessLevel.Admin;
+            report.accessLevel = Brightmetrics.Reports.Enums.AccessLevel.Admin;
             report.dataConnectionGroup = 0;
             report.id = template.id;
             report.schedules = [];
-            report.type = BREs.ReportObjectType.Partner;
+            report.type = Brightmetrics.Reports.Enums.ReportObjectType.Partner;
             report.template = template;
             return report;
         }
diff --git a/ts/Reports/ViewModels/allreports.ts b/ts/Reports/ViewModels/allreports.ts
index c8a251c..adb6392 100644
--- a/ts/Reports/ViewModels/allreports.ts
+++ b/ts/Reports/ViewModels/allreports.ts
@@ -4,39 +4,31 @@
 /// <reference path="../../viewmodel.ts" />
 
 namespace Brightmetrics.Reports.ViewModels {
-    import BVs = Brightmetrics.ViewModels;
-    import BIs = Brightmetrics.Interfaces;
-    import BEs = Brightmetrics.Enums;
-    import BRIs = Brightmetrics.Reports.Interfaces;
-    import BRIDs = Brightmetrics.Reports.Interfaces.DTOs;
-    import BREs = Brightmetrics.Reports.Enums;
-    import BRCs = Brightmetrics.Reports.Classes;
-    import BRVs = Brightmetrics.Reports.ViewModels;
     import BDDVs = Brightmetrics.DashboardDetail.ViewModels;
 
-    declare const userInfo: BIs.IBrightUser;
-    declare const roleInfo: { role: { Permissions: BIs.IBrightPermission[] } };
+    declare const userInfo: Brightmetrics.Interfaces.IBrightUser;
+    declare const roleInfo: { role: { Permissions: Brightmetrics.Interfaces.IBrightPermission[] } };
     declare const reportGroupOrder: string[];
 
     /// #region HELPERS
 
     function getExpansionStateLocalStorageKey(
         dcgId: number,
-        objectType: BREs.ReportObjectType) {
+        objectType: Brightmetrics.Reports.Enums.ReportObjectType) {
 
         return `r-g-exp-state/${dcgId}/${objectType}`;
     }
 
-    function filterReportsByObjectType(objectType: BREs.ReportObjectType) {
-        return (report: BRCs.Report) => report.type === objectType;
+    function filterReportsByObjectType(objectType: Brightmetrics.Reports.Enums.ReportObjectType) {
+        return (report: Brightmetrics.Reports.Classes.Report) => report.type === objectType;
     }
 
     function filterReportsByDCG(dsgId: number) {
-        return (report: BRCs.Report) => report.isInDCG(dsgId);
+        return (report: Brightmetrics.Reports.Classes.Report) => report.isInDCG(dsgId);
     }
 
     function filterReportsBySearchText(searchText: string) {
-        return (report: BRCs.Report) =>
+        return (report: Brightmetrics.Reports.Classes.Report) =>
             Utils.stringContainsIgnoreCase(report.template.name, searchText);
     }
 
@@ -82,15 +74,15 @@ namespace Brightmetrics.Reports.ViewModels {
         allReportGroups: KnockoutComputed<string[]>;
         dsgId: number;
         groupName: string;
-        objectType: BREs.ReportObjectType;
-        reports: BRCs.Report[];
+        objectType: Brightmetrics.Reports.Enums.ReportObjectType;
+        reports: Brightmetrics.Reports.Classes.Report[];
         searchTextHasValue: KnockoutComputed<boolean>;
-        selectedReport: KnockoutObservable<BRCs.Report>;
+        selectedReport: KnockoutObservable<Brightmetrics.Reports.Classes.Report>;
         isVARTemplatesPage: boolean;
-        removeReport(report: BRCs.Report): JQuery.Thenable<unknown>;
-        handleReportClick(report: BRCs.Report): void;
-        updateReport(report: BRCs.Report): void;
-        updateReportSchedules(reportId: string, schedules: BIs.IReportSchedule[]): void;
+        removeReport(report: Brightmetrics.Reports.Classes.Report): JQuery.Thenable<unknown>;
+        handleReportClick(report: Brightmetrics.Reports.Classes.Report): void;
+        updateReport(report: Brightmetrics.Reports.Classes.Report): void;
+        updateReportSchedules(reportId: string, schedules: Brightmetrics.Interfaces.IReportSchedule[]): void;
     }
 
     // tslint:disable:max-classes-per-file
@@ -134,7 +126,7 @@ namespace Brightmetrics.Reports.ViewModels {
         }
 
         private _getReportGroupSortIndex(props: IReportItemGroupProps): number {
-            if (props.objectType === BREs.ReportObjectType.System) {
+            if (props.objectType === Brightmetrics.Reports.Enums.ReportObjectType.System) {
                 const sampleFromGroup = props.reports[0];
                 const key = reportGroupOrder.indexOf(sampleFromGroup.getGrouping());
                 if (key > -1) {
@@ -193,13 +185,13 @@ namespace Brightmetrics.Reports.ViewModels {
     interface IReportItemProps {
         allReportGroups: KnockoutComputed<string[]>;
         dsgId: number;
-        report: BRCs.Report;
-        selectedReport: KnockoutObservable<BRCs.Report>;
+        report: Brightmetrics.Reports.Classes.Report;
+        selectedReport: KnockoutObservable<Brightmetrics.Reports.Classes.Report>;
         isVARTemplatesPage: boolean;
-        removeReport(report: BRCs.Report): JQuery.Thenable<unknown>;
-        handleReportClick(report: BRCs.Report): void;
-        updateReport(report: BRCs.Report): void;
-        updateReportSchedules(reportId: string, schedules: BIs.IReportSchedule[]): void;
+        removeReport(report: Brightmetrics.Reports.Classes.Report): JQuery.Thenable<unknown>;
+        handleReportClick(report: Brightmetrics.Reports.Classes.Report): void;
+        updateReport(report: Brightmetrics.Reports.Classes.Report): void;
+        updateReportSchedules(reportId: string, schedules: Brightmetrics.Interfaces.IReportSchedule[]): void;
     }
 
     // tslint:disable:max-classes-per-file
@@ -218,7 +210,7 @@ namespace Brightmetrics.Reports.ViewModels {
             super(props);
         }
 
-        private _getMoreVertMenuItems_All(props: IReportItemProps): BIs.IMoreVertItems[] {
+        private _getMoreVertMenuItems_All(props: IReportItemProps): Brightmetrics.Interfaces.IMoreVertItems[] {
             return [
                 {
                     click: () => {
@@ -230,14 +222,14 @@ namespace Brightmetrics.Reports.ViewModels {
             ];
         }
 
-        private _getMoreVertMenuItems_System(props: IReportItemProps): BIs.IMoreVertItems[] {
+        private _getMoreVertMenuItems_System(props: IReportItemProps): Brightmetrics.Interfaces.IMoreVertItems[] {
             return this._getMoreVertMenuItems_All(props).concat([
                 {
                     click: () => {
                         props.selectedReport(props.report);
 
                         const eod = new Brightmetrics.ViewModels.EmailOptionsDialog({
-                            dataPerspective: BEs.DataPerspective.Report,
+                            dataPerspective: Brightmetrics.Enums.DataPerspective.Report,
                             dsi: props.report.getDSI(props.dsgId)!,
                             entity: props.report,
                             parameters: Utils.deepClone(props.report.template.options),
@@ -252,17 +244,17 @@ namespace Brightmetrics.Reports.ViewModels {
             ]);
         }
 
-        private _getMoreVertMenuItems_Saved(props: IReportItemProps): BIs.IMoreVertItems[] {
+        private _getMoreVertMenuItems_Saved(props: IReportItemProps): Brightmetrics.Interfaces.IMoreVertItems[] {
             // TODO: Some of these are based on the user's permissions on a
             // particular report.
             return this._getMoreVertMenuItems_All(props).concat([
                 {
                     click: () => {
                         return new Brightmetrics.ViewModels.EmailOptionsDialog({
-                            dataPerspective: BEs.DataPerspective.Report,
+                            dataPerspective: Brightmetrics.Enums.DataPerspective.Report,
                             dsi: props.report.getDSI(props.dsgId)!,
                             entity: props.report,
-                            onDestroy: (schedules: BIs.IReportSchedule[]) => {
+                            onDestroy: (schedules: Brightmetrics.Interfaces.IReportSchedule[]) => {
                                 props.updateReportSchedules(props.report.id, schedules);
                             },
                             parameters: Utils.deepClone(props.report.template.options),
@@ -314,8 +306,8 @@ namespace Brightmetrics.Reports.ViewModels {
             ]);
         }
 
-        private _getMoreVertMenuItems_Template(props: IReportItemProps): BIs.IMoreVertItems[] {
-            if (props.report.type === BREs.ReportObjectType.System) {
+        private _getMoreVertMenuItems_Template(props: IReportItemProps): Brightmetrics.Interfaces.IMoreVertItems[] {
+            if (props.report.type === Brightmetrics.Reports.Enums.ReportObjectType.System) {
                 return this._getMoreVertMenuItems_All(props);
             }
 
@@ -429,10 +421,10 @@ namespace Brightmetrics.Reports.ViewModels {
                 templateContent: Utils.ReportHelpers.serializeReport(templateToSend),
             }).then(
                 (response: IRequestResponse, unknown, xhrResponse: JQuery.jqXHR) => {
-                    const savedReport = response.template as BRIDs.IReportSaved;
+                    const savedReport = response.template as Brightmetrics.Reports.Interfaces.DTOs.IReportSaved;
                     savedReport.template = Utils.ReportHelpers.importReport(savedReport.template)!;
 
-                    props.updateReport(BRCs.Report.fromSaved(savedReport));
+                    props.updateReport(Brightmetrics.Reports.Classes.Report.fromSaved(savedReport));
 
                     Utils.notifyUser(
                         `Your report '${reportName}' has been successfully saved`,
@@ -465,13 +457,13 @@ Please try again`),
             this.reportDescription = props.report.template.description || "";
             this.dataSourceName = props.report.getDSI(props.dsgId)!.Name + " - " +
                 props.report.template.reportType;
-            this.accessLevel = props.report.type === BREs.ReportObjectType.System ? "N/A" :
-                BREs.AccessLevel.Admin === props.report.accessLevel ? "Admin" :
-                    BREs.AccessLevel.Modify === props.report.accessLevel ? "Modify" :
-                        BREs.AccessLevel.Read === props.report.accessLevel ? "View" : "None";
+            this.accessLevel = props.report.type === Brightmetrics.Reports.Enums.ReportObjectType.System ? "N/A" :
+                Brightmetrics.Reports.Enums.AccessLevel.Admin === props.report.accessLevel ? "Admin" :
+                    Brightmetrics.Reports.Enums.AccessLevel.Modify === props.report.accessLevel ? "Modify" :
+                        Brightmetrics.Reports.Enums.AccessLevel.Read === props.report.accessLevel ? "View" : "None";
             this.hasSchedules = schedulesCount > 0;
             this.schedulesCount = schedulesCount;
-            this.isSavedReport = props.report.type === BREs.ReportObjectType.Saved;
+            this.isSavedReport = props.report.type === Brightmetrics.Reports.Enums.ReportObjectType.Saved;
 
             const additionalDsis = props.report.template.additionalDataSourceInstances ?? [];
             const additionalDsTypes = props.report.template.additionalDataSourceTypes ?? [];
@@ -495,7 +487,7 @@ Please try again`),
             this.events.onMoreVertClick = (ignore: unknown, event: JQueryMouseEventObject) => {
                 const menuItems =
                     props.isVARTemplatesPage ? this._getMoreVertMenuItems_Template(props) :
-                    props.report.type === BREs.ReportObjectType.Saved ? this._getMoreVertMenuItems_Saved(props) :
+                    props.report.type === Brightmetrics.Reports.Enums.ReportObjectType.Saved ? this._getMoreVertMenuItems_Saved(props) :
                     this._getMoreVertMenuItems_System(props);
 
                 Utils.moreVert(menuItems, {
@@ -522,25 +514,25 @@ Please try again`),
         activeTabDSGID: KnockoutComputed<number>;
         allReportGroups: KnockoutComputed<string[]>;
         dcgTabs: ITab[];
-        objectType: KnockoutComputed<BREs.ReportObjectType>;
-        layoutType: KnockoutComputed<BREs.ReportLayoutType>;
-        reports: KnockoutComputed<BRCs.Report[]>;
-        selectedReport: KnockoutObservable<BRCs.Report>;
+        objectType: KnockoutComputed<Brightmetrics.Reports.Enums.ReportObjectType>;
+        layoutType: KnockoutComputed<Brightmetrics.Reports.Enums.ReportLayoutType>;
+        reports: KnockoutComputed<Brightmetrics.Reports.Classes.Report[]>;
+        selectedReport: KnockoutObservable<Brightmetrics.Reports.Classes.Report>;
         isVARTemplatesPage: boolean;
-        createReport(dsi: BIs.IDataSourceInstance, reportType: BREs.ReportType): void;
-        removeReport(report: BRCs.Report): JQuery.Thenable<unknown>;
-        handleReportClick(report: BRCs.Report): void;
+        createReport(dsi: Brightmetrics.Interfaces.IDataSourceInstance, reportType: Brightmetrics.Reports.Enums.ReportType): void;
+        removeReport(report: Brightmetrics.Reports.Classes.Report): JQuery.Thenable<unknown>;
+        handleReportClick(report: Brightmetrics.Reports.Classes.Report): void;
         updateActiveTabIndex(index: number): void;
-        updateLayoutType(updated: BREs.ReportLayoutType): void;
-        updateObjectType(layoutType: BREs.ReportObjectType): void;
-        updateReport(report: BRCs.Report): void;
-        updateReportSchedules(reportId: string, schedules: BIs.IReportSchedule[]): void;
+        updateLayoutType(updated: Brightmetrics.Reports.Enums.ReportLayoutType): void;
+        updateObjectType(layoutType: Brightmetrics.Reports.Enums.ReportObjectType): void;
+        updateReport(report: Brightmetrics.Reports.Classes.Report): void;
+        updateReportSchedules(reportId: string, schedules: Brightmetrics.Interfaces.IReportSchedule[]): void;
     }
 
     export class AllReports extends ViewModel {
         private _dcgSelected: KnockoutObservable<number>;
 
-        public topbar: BVs.Tabs<ITab>;
+        public topbar: Brightmetrics.ViewModels.Tabs<ITab>;
         public canSeeSystemTemplates: boolean;
 
         // User-modifiable states:
@@ -549,13 +541,13 @@ Please try again`),
 
         // Computed information:
         public activeTabIndex: KnockoutComputed<number>;
-        public layoutType: KnockoutComputed<BREs.ReportLayoutType>;
-        public objectType: KnockoutComputed<BREs.ReportObjectType>;
+        public layoutType: KnockoutComputed<Brightmetrics.Reports.Enums.ReportLayoutType>;
+        public objectType: KnockoutComputed<Brightmetrics.Reports.Enums.ReportObjectType>;
         public searchTextSafe: KnockoutComputed<string>;
         public searchTextHasValue: KnockoutComputed<boolean>;
         public savedReportsCount: KnockoutComputed<number>;
         public reportGroups: KnockoutComputed<ReportItemGroup[]>;
-        public reports: KnockoutComputed<BRCs.Report[]>;
+        public reports: KnockoutComputed<Brightmetrics.Reports.Classes.Report[]>;
         public isShowingSavedReports: KnockoutComputed<boolean>;
         public listViewColspan: KnockoutComputed<number>;
         public partnerTemplateCount: KnockoutComputed<number>;
@@ -582,10 +574,10 @@ Please try again`),
                     if (this.canSeeSystemTemplates) {
                         return props.objectType();
                     } else {
-                        return BREs.ReportObjectType.Saved;
+                        return Brightmetrics.Reports.Enums.ReportObjectType.Saved;
                     }
                 },
-                write(this: AllReports, objectType: BREs.ReportObjectType) {
+                write(this: AllReports, objectType: Brightmetrics.Reports.Enums.ReportObjectType) {
                     props.updateObjectType(objectType);
                 },
                 owner: this,
@@ -594,7 +586,7 @@ Please try again`),
                 read(this: AllReports) {
                     return props.layoutType();
                 },
-                write(this: AllReports, layoutType: BREs.ReportLayoutType) {
+                write(this: AllReports, layoutType: Brightmetrics.Reports.Enums.ReportLayoutType) {
                     props.updateLayoutType(layoutType);
                 },
                 owner: this,
@@ -623,7 +615,7 @@ Please try again`),
 
                 return _.chain(props.reports())
                     .filter(filterReportsByDCG(dsgId))
-                    .filter(filterReportsByObjectType(BREs.ReportObjectType.Saved))
+                    .filter(filterReportsByObjectType(Brightmetrics.Reports.Enums.ReportObjectType.Saved))
                     .size()
                     .value();
             });
@@ -633,7 +625,7 @@ Please try again`),
 
                 return _.chain(props.reports())
                     .filter(filterReportsByDCG(dsgId))
-                    .filter(filterReportsByObjectType(BREs.ReportObjectType.Partner))
+                    .filter(filterReportsByObjectType(Brightmetrics.Reports.Enums.ReportObjectType.Partner))
                     .size()
                     .value();
             });
@@ -660,18 +652,18 @@ Please try again`),
                         updateReportSchedules: props.updateReportSchedules,
                     }))
                     .value()
-                    .sort(objectType === BREs.ReportObjectType.Saved ?
+                    .sort(objectType === Brightmetrics.Reports.Enums.ReportObjectType.Saved ?
                         (a, b) => Utils.stringComparer(a.groupName, b.groupName) :
-                        objectType === BREs.ReportObjectType.System ?
+                        objectType === Brightmetrics.Reports.Enums.ReportObjectType.System ?
                         (a, b) => a.reportGroupSortIndex - b.reportGroupSortIndex :
                         _ => 0);
             });
 
             this.isShowingSavedReports = ko.pureComputed(() =>
-                this.objectType() === BREs.ReportObjectType.Saved);
+                this.objectType() === Brightmetrics.Reports.Enums.ReportObjectType.Saved);
 
             this.listViewColspan = ko.pureComputed(() =>
-                this.objectType() === BREs.ReportObjectType.Saved ? 5 : 3);
+                this.objectType() === Brightmetrics.Reports.Enums.ReportObjectType.Saved ? 5 : 3);
 
             this.dcgOptions = ko.pureComputed(() => {
                 return _.map(props.dcgTabs, (dcg) => ({
@@ -699,7 +691,7 @@ Please try again`),
         }
 
         public initChildViewModels(props: IAllReportsProps) {
-            this.topbar = new BVs.Tabs<ITab>({
+            this.topbar = new Brightmetrics.ViewModels.Tabs<ITab>({
                 activeTabIndex: this.activeTabIndex,
                 listName: "Reports",
                 onTabClick: (tab: ITab) => props.updateActiveTabIndex(tab.index),
@@ -715,9 +707,9 @@ Please try again`),
             };
 
             this.events.onCreateReportClick = () => {
-                const dlg = new BRVs.CreateReport.DataSelectionDialog({
+                const dlg = new Brightmetrics.Reports.ViewModels.CreateReport.DataSelectionDialog({
                     dsgId: props.activeTabDSGID(),
-                    navigateToReport: (dsi: BIs.IDataSourceInstance, reportType: BREs.ReportType) => {
+                    navigateToReport: (dsi: Brightmetrics.Interfaces.IDataSourceInstance, reportType: Brightmetrics.Reports.Enums.ReportType) => {
                         props.createReport(dsi, reportType);
                     },
                 });
diff --git a/ts/Reports/ViewModels/createreport.ts b/ts/Reports/ViewModels/createreport.ts
index c0207fb..7646616 100644
--- a/ts/Reports/ViewModels/createreport.ts
+++ b/ts/Reports/ViewModels/createreport.ts
@@ -3,18 +3,15 @@
 /// <reference path="../Enums/reporttype.ts" />
 
 namespace Brightmetrics.Reports.ViewModels.CreateReport {
-    import BREs = Brightmetrics.Reports.Enums;
-    import BIs = Brightmetrics.Interfaces;
-
     // TODO: Somewhere we need to handle the scenario where the user tries
     // to create a report but has NO data to pull from.
-    function getExclusiveReportType(dsi: BIs.IDataSourceInstance): BREs.ReportType | undefined {
+    function getExclusiveReportType(dsi: Brightmetrics.Interfaces.IDataSourceInstance): Brightmetrics.Reports.Enums.ReportType | undefined {
         if (dsi.Facts.length === 0) {
-            return BREs.ReportType.Detail;
+            return Brightmetrics.Reports.Enums.ReportType.Detail;
         }
 
         if (!dsi.HasDetail) {
-            return BREs.ReportType.Summary;
+            return Brightmetrics.Reports.Enums.ReportType.Summary;
         }
 
         return void (0);
@@ -23,12 +20,12 @@ namespace Brightmetrics.Reports.ViewModels.CreateReport {
     interface IDSIGrouping {
         groupName: string;
         dsiTooltips: string[];
-        dsis: BIs.IDataSourceInstance[];
+        dsis: Brightmetrics.Interfaces.IDataSourceInstance[];
     }
 
     interface IDataSelectionDialogProps {
         dsgId: number;
-        navigateToReport(dsi: BIs.IDataSourceInstance, reportType: BREs.ReportType): void;
+        navigateToReport(dsi: Brightmetrics.Interfaces.IDataSourceInstance, reportType: Brightmetrics.Reports.Enums.ReportType): void;
     }
 
     // tslint:disable:max-classes-per-file
@@ -36,7 +33,7 @@ namespace Brightmetrics.Reports.ViewModels.CreateReport {
         public dialogTitle: string;
         public dsisByDataSource: IDSIGrouping[];
         public selectedDSIID: KnockoutObservable<number>;
-        public selectedDSI: KnockoutComputed<BIs.IDataSourceInstance | undefined>;
+        public selectedDSI: KnockoutComputed<Brightmetrics.Interfaces.IDataSourceInstance | undefined>;
         public canGoNext: KnockoutComputed<boolean>;
 
         public constructor(props: IDataSelectionDialogProps) {
@@ -65,7 +62,7 @@ namespace Brightmetrics.Reports.ViewModels.CreateReport {
                 dialogClasses: ["c-dialog-wrapper"],
                 dialogContent: "#create-report-data-selection-dialog-template",
                 modal: true,
-            } as BIs.IDialogViewModelOptions);
+            } as Brightmetrics.Interfaces.IDialogViewModelOptions);
         }
 
         public initSubscriptions(props: IDataSelectionDialogProps) {
@@ -99,7 +96,7 @@ namespace Brightmetrics.Reports.ViewModels.CreateReport {
                                 dlg.transitionSlide(this, true)
                                     .then(() => dlg.destroy());
                             },
-                            onNext: (reportType: BREs.ReportType) => {
+                            onNext: (reportType: Brightmetrics.Reports.Enums.ReportType) => {
                                 props.navigateToReport(dsi, reportType);
 
                                 this.destroy();
@@ -119,9 +116,9 @@ namespace Brightmetrics.Reports.ViewModels.CreateReport {
     }
 
     interface IReportTypeDialogProps {
-        dsi: BIs.IDataSourceInstance;
+        dsi: Brightmetrics.Interfaces.IDataSourceInstance;
         onBack(): void;
-        onNext(reportType: BREs.ReportType): void;
+        onNext(reportType: Brightmetrics.Reports.Enums.ReportType): void;
     }
 
     export class ReportTypeDialog extends Brightmetrics.ViewModels.DialogViewModel {
@@ -139,18 +136,18 @@ namespace Brightmetrics.Reports.ViewModels.CreateReport {
                 dialogClasses: ["c-dialog-wrapper"],
                 dialogContent: "#create-report-type-dialog-template",
                 modal: true,
-            } as BIs.IDialogViewModelOptions);
+            } as Brightmetrics.Interfaces.IDialogViewModelOptions);
         }
 
         public createEventHandlers(props: IReportTypeDialogProps) {
             this.events.onDetailClick = () => {
-                props.onNext(BREs.ReportType.Detail);
+                props.onNext(Brightmetrics.Reports.Enums.ReportType.Detail);
 
                 this.destroy();
             };
 
             this.events.onSummaryClick = () => {
-                props.onNext(BREs.ReportType.Summary);
+                props.onNext(Brightmetrics.Reports.Enums.ReportType.Summary);
 
                 this.destroy();
             };
diff --git a/ts/Reports/ViewModels/detailquerydialog.ts b/ts/Reports/ViewModels/detailquerydialog.ts
index 9e7b4dd..125fc90 100644
--- a/ts/Reports/ViewModels/detailquerydialog.ts
+++ b/ts/Reports/ViewModels/detailquerydialog.ts
@@ -1,13 +1,10 @@
 // jshint ignore: start
 
 namespace Brightmetrics.Reports.ViewModels {
-    import BVs = Brightmetrics.ViewModels;
-    import BIs = Brightmetrics.Interfaces;
-
     const dialogContent = "#detail-query-dialog-template";
     const appendTo = "#page-content-dialog-area";
 
-    export class DetailQueryDialog extends BVs.DialogViewModel {
+    export class DetailQueryDialog extends Brightmetrics.ViewModels.DialogViewModel {
         public detailQuery: DetailQuery;
         public isCancelled: KnockoutComputed<boolean>;
 
@@ -18,7 +15,7 @@ namespace Brightmetrics.Reports.ViewModels {
                 appendTo,
                 dialogContent,
                 modal: true
-            } as BIs.IDialogViewModelOptions);
+            } as Brightmetrics.Interfaces.IDialogViewModelOptions);
         }
 
         public initSubscriptions() {
diff --git a/ts/Reports/ViewModels/editdimensionthresholddialog.ts b/ts/Reports/ViewModels/editdimensionthresholddialog.ts
index ea8359b..4c81c4b 100644
--- a/ts/Reports/ViewModels/editdimensionthresholddialog.ts
+++ b/ts/Reports/ViewModels/editdimensionthresholddialog.ts
@@ -4,11 +4,6 @@
 /// <reference path="../../ViewModels/dialog.ts" />
 
 namespace Brightmetrics.Reports.ViewModels {
-    import BEs = Brightmetrics.Enums;
-    import BIs = Brightmetrics.Interfaces;
-    import BRIs = Interfaces;
-    import BRIDs = Interfaces.DTOs;
-
     declare const defCompanyId: number;
 
     const defaultThresholdColor = "#ffe5ca";
@@ -19,10 +14,10 @@ namespace Brightmetrics.Reports.ViewModels {
         alertColor: "",
         directionOver: false,
         isDimension: true,
-        scale: BEs.ValueScale.Text,
+        scale: Brightmetrics.Enums.ValueScale.Text,
         warning: null,
         warningColor: "",
-    } as BRIDs.IReportThreshold;
+    } as Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold;
 
     // tslint:disable:max-classes-per-file
     class ValuesByColor {
@@ -57,16 +52,16 @@ namespace Brightmetrics.Reports.ViewModels {
     }
 
     interface IEditDimensionThresholdDialogProps {
-        threshold?: BRIDs.IReportThreshold;
-        fieldHelper: BRIs.IReportFieldHelper;
+        threshold?: Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold;
+        fieldHelper: Brightmetrics.Reports.Interfaces.IReportFieldHelper;
         dsiId: number;
-        onApply(t: BRIDs.IReportThreshold): void;
+        onApply(t: Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold): void;
         onDelete?(): void;
     }
 
     export class EditDimensionThresholdDialog extends Brightmetrics.ViewModels.DialogViewModel {
         private _id: string;
-        private _fieldHelper: BRIs.IReportFieldHelper;
+        private _fieldHelper: Brightmetrics.Reports.Interfaces.IReportFieldHelper;
         public canDelete: boolean;
         public dialogTitle: string;
         public fieldName: string;
@@ -100,7 +95,7 @@ namespace Brightmetrics.Reports.ViewModels {
             });
         }
 
-        private _fromJSON(threshold: BRIDs.IReportThreshold) {
+        private _fromJSON(threshold: Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold) {
             this._id = threshold.id || Utils.createUniqueId();
             this.canDelete = true;
             this.valuesByColors = ko.observableArray(_.chain(threshold.values)
@@ -118,7 +113,7 @@ namespace Brightmetrics.Reports.ViewModels {
         }
 
         public initialize(props: IEditDimensionThresholdDialogProps) {
-            const field = props.fieldHelper.field! as BIs.IDimension;
+            const field = props.fieldHelper.field! as Brightmetrics.Interfaces.IDimension;
 
             this._fieldHelper = props.fieldHelper;
             this.fieldName = field.Name;
@@ -134,7 +129,7 @@ namespace Brightmetrics.Reports.ViewModels {
                 appendTo: "#page-content-dialog-area",
                 dialogContent: "#edit-dimension-threshold-dialog",
                 modal: true,
-            } as BIs.IDialogViewModelOptions);
+            } as Brightmetrics.Interfaces.IDialogViewModelOptions);
         }
 
         public initSubscriptions(props: IEditDimensionThresholdDialogProps) {
@@ -220,7 +215,7 @@ namespace Brightmetrics.Reports.ViewModels {
             };
         }
 
-        public toJSON(): BRIDs.IReportThreshold {
+        public toJSON(): Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold {
             return {
                 ...defaultsForDimensionThreshold,
                 baseIndex: Utils.toBaseIndex(this._fieldHelper.index),
diff --git a/ts/Reports/ViewModels/editor.ts b/ts/Reports/ViewModels/editor.ts
index f64aac8..3c21400 100644
--- a/ts/Reports/ViewModels/editor.ts
+++ b/ts/Reports/ViewModels/editor.ts
@@ -3,15 +3,15 @@
 /// <reference path="report.ts" />
 
 namespace Brightmetrics.Reports.ViewModels {
-    type FieldsByDsi = Record<number, BRIs.IReportFieldHelper[]>;
+    type FieldsByDsi = Record<number, Brightmetrics.Reports.Interfaces.IReportFieldHelper[]>;
 
     interface IEditorProps {
-        dsi: KnockoutComputed<DSI | null>;
-        additionalDsis: KnockoutComputed<DSI[]>;
-        report: KnockoutComputed<BRCs.Report>;
+        dsi: KnockoutComputed<Brightmetrics.Interfaces.IDataSourceInstance | null>;
+        additionalDsis: KnockoutComputed<Brightmetrics.Interfaces.IDataSourceInstance[]>;
+        report: KnockoutComputed<Brightmetrics.Reports.Classes.Report>;
         allReportGroups: KnockoutComputed<string[]>;
         /** Allows a pre-filtered list of dimensions to choose from. */
-        dimensions?: KnockoutComputed<BRIs.IReportFieldHelper[]>;
+        dimensions?: KnockoutComputed<Brightmetrics.Reports.Interfaces.IReportFieldHelper[]>;
         isPartnerTemplates?: boolean;
         hideReportInfoBar?: boolean;
         tableHeaderFixedContainer?: string;
@@ -25,18 +25,18 @@ namespace Brightmetrics.Reports.ViewModels {
         showCollapseChartButton?: boolean;
         chartIsExpanded?: KnockoutComputed<boolean>;
         onChartButtonClick?: () => void;
-        addReport(report: BRCs.Report): void;
-        updateReport(report: BRCs.Report): void;
-        deleteReport(report: BRCs.Report): void;
-        removeReport(report: BRCs.Report): JQuery.Thenable<unknown>;
-        goToReport(report: BRCs.Report): void;
-        openReportInNewPage(exportableReport: BRIs.IReportTemplateExport): void;
+        addReport(report: Brightmetrics.Reports.Classes.Report): void;
+        updateReport(report: Brightmetrics.Reports.Classes.Report): void;
+        deleteReport(report: Brightmetrics.Reports.Classes.Report): void;
+        removeReport(report: Brightmetrics.Reports.Classes.Report): JQuery.Thenable<unknown>;
+        goToReport(report: Brightmetrics.Reports.Classes.Report): void;
+        openReportInNewPage(exportableReport: Brightmetrics.Reports.Interfaces.IReportTemplateExport): void;
         revertReportToOriginalState(): void;
-        updateReportSchedules?(schedules: BIs.IReportSchedule[]): void;
+        updateReportSchedules?(schedules: Brightmetrics.Interfaces.IReportSchedule[]): void;
     }
 
-    function isDetail(report: BRCs.Report): boolean {
-        return report.template.reportType === BREs.ReportType.Detail;
+    function isDetail(report: Brightmetrics.Reports.Classes.Report): boolean {
+        return report.template.reportType === Brightmetrics.Reports.Enums.ReportType.Detail;
     }
 
     function fieldsByDsiEqualityComparer(oldValue: FieldsByDsi | undefined, newValue: FieldsByDsi)
@@ -49,18 +49,18 @@ namespace Brightmetrics.Reports.ViewModels {
     }
 
     export class Editor extends Brightmetrics.ViewModel {
-        private _report: KnockoutComputed<BRCs.Report | null>;
-        private _dsi: KnockoutComputed<DSI | null>;
-        private _additionalDsis: KnockoutObservableArray<DSI>;
+        private _report: KnockoutComputed<Brightmetrics.Reports.Classes.Report | null>;
+        private _dsi: KnockoutComputed<Brightmetrics.Interfaces.IDataSourceInstance | null>;
+        private _additionalDsis: KnockoutObservableArray<Brightmetrics.Interfaces.IDataSourceInstance>;
         private _dimensionsByDsi: KnockoutComputed<FieldsByDsi>;
         private _factsByDsi: KnockoutComputed<FieldsByDsi>;
         private _isPartnerTemplates: boolean;
-        public facts: KnockoutComputed<BRIs.IReportFieldHelper[]>;
+        public facts: KnockoutComputed<Brightmetrics.Reports.Interfaces.IReportFieldHelper[]>;
         /** dims + vals */
-        public fields: KnockoutComputed<BRIs.IReportFieldHelper[]>;
-        public columns: KnockoutObservableArray<BRIs.IReportFieldHelper>;
-        public rows: KnockoutObservableArray<BRIs.IReportFieldHelper>;
-        public values: KnockoutObservableArray<BRIs.IReportFieldHelper>;
+        public fields: KnockoutComputed<Brightmetrics.Reports.Interfaces.IReportFieldHelper[]>;
+        public columns: KnockoutObservableArray<Brightmetrics.Reports.Interfaces.IReportFieldHelper>;
+        public rows: KnockoutObservableArray<Brightmetrics.Reports.Interfaces.IReportFieldHelper>;
+        public values: KnockoutObservableArray<Brightmetrics.Reports.Interfaces.IReportFieldHelper>;
         // TODO: Pass these in from the template (topX, recordsOnly, ...).
         public topX: KnockoutObservable<number>;
         public isTopXEnabled: KnockoutObservable<boolean>;
@@ -73,10 +73,10 @@ namespace Brightmetrics.Reports.ViewModels {
         public reportName: KnockoutObservable<string>;
         public reportGroup: KnockoutObservable<string>;
         public reportDescription: KnockoutObservable<string>;
-        public thresholds: KnockoutObservableArray<BRIDs.IReportThreshold>;
+        public thresholds: KnockoutObservableArray<Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold>;
         public hasPendingChanges: KnockoutObservable<boolean>;
-        public fieldEditor: BRVs.ReportFieldEditor;
-        public parametersList: KnockoutObservableArray<BRIDs.IParameter>;
+        public fieldEditor: Brightmetrics.Reports.ViewModels.ReportFieldEditor;
+        public parametersList: KnockoutObservableArray<Brightmetrics.Reports.Interfaces.DTOs.IParameter>;
         public parameters: FilterWidgets;
         public report: Report;
         public topbar: ReportEditorTopbar;
@@ -86,9 +86,9 @@ namespace Brightmetrics.Reports.ViewModels {
         }
 
         private _handleReportChange(
-            report: BRCs.Report | null,
-            dsi: DSI | null,
-            ...otherDsis: DSI[]) {
+            report: Brightmetrics.Reports.Classes.Report | null,
+            dsi: Brightmetrics.Interfaces.IDataSourceInstance | null,
+            ...otherDsis: Brightmetrics.Interfaces.IDataSourceInstance[]) {
 
             if (report && dsi) {
                 const params = Utils.ReportHelpers.normalizeParameters(
@@ -113,8 +113,8 @@ namespace Brightmetrics.Reports.ViewModels {
                 this.isTopXEnabled(report.template.enableReportTopX);
                 this.defaultSortAscending(report.template.defaultSortAscending);
 
-                if (report.type === BREs.ReportObjectType.Saved &&
-                    report.template.reportType === BREs.ReportType.Detail) {
+                if (report.type === Brightmetrics.Reports.Enums.ReportObjectType.Saved &&
+                    report.template.reportType === Brightmetrics.Reports.Enums.ReportType.Detail) {
                     // If it's a Saved Detail Report, subtract the row count for the sort index.
                     this.defaultSortIndex(report.template.defaultSortIndex - report.template.rows.length);
                 } else {
@@ -142,7 +142,7 @@ namespace Brightmetrics.Reports.ViewModels {
 
         // TODO: Break this out into smaller SRP functions
         private _generateNextDetailTemplate(rowPath: string[])
-            : BRIs.IReportTemplateExport {
+            : Brightmetrics.Reports.Interfaces.IReportTemplateExport {
 
             const rows = this.rows();
             const cols = this.columns();
@@ -162,14 +162,14 @@ namespace Brightmetrics.Reports.ViewModels {
 
                 const row = rows[i];
                 const dimensionIndex = row.index;
-                const field = Utils.DSI.getDimensionForIndex(dsi, dimensionIndex) as BIs.IDimension;
+                const field = Utils.DSI.getDimensionForIndex(dsi, dimensionIndex) as Brightmetrics.Interfaces.IDimension;
 
                 if (field.NoDetail) {
                     continue;
                 }
 
                 const filterForRow = _.find(filters, (f) =>
-                    (f as BRIDs.IFilter).dimensionIndex === dimensionIndex);
+                    (f as Brightmetrics.Reports.Interfaces.DTOs.IFilter).dimensionIndex === dimensionIndex);
 
                 if (filterForRow !== void (0)) {
                     filters = _.without(filters, filterForRow);
@@ -182,19 +182,19 @@ namespace Brightmetrics.Reports.ViewModels {
                         _isNonActionable: parameter ? parameter._isNonActionable : false,
                         description: row.field!.Name,
                         dimensionIndex,
-                        filterType: filterForRow.filterType === BREs.DimensionFilterType.NIN ?
-                            BREs.DimensionFilterType.IN :
-                            BREs.DimensionFilterType.NIN,
+                        filterType: filterForRow.filterType === Brightmetrics.Reports.Enums.DimensionFilterType.NIN ?
+                            Brightmetrics.Reports.Enums.DimensionFilterType.IN :
+                            Brightmetrics.Reports.Enums.DimensionFilterType.NIN,
                         fixed: parameter ? parameter.fixed : false,
                         meta: {
                             convertTime: false,
-                            defaultType: BREs.FilterOption.Selected,
+                            defaultType: Brightmetrics.Reports.Enums.FilterOption.Selected,
                             isAutoGenerated: true,
                         },
                         values: filterForRow.values,
                     });
                 } else {
-                    if ((field as BIs.IDimension).DataType === BEs.DataType.DateTime) {
+                    if ((field as Brightmetrics.Interfaces.IDimension).DataType === Brightmetrics.Enums.DataType.DateTime) {
                         const timestamp = Utils.Dates.parseDateTimeStringToUTCTimestamp(value);
                         const parameter = _.find(this.parametersList(),
                             (pl) => (pl as any).dimensionIndex === dimensionIndex);
@@ -203,11 +203,11 @@ namespace Brightmetrics.Reports.ViewModels {
                             _isNonActionable: parameter ? parameter._isNonActionable : false,
                             description: row.field!.Name,
                             dimensionIndex,
-                            filterType: BREs.DimensionFilterType.BTWN,
+                            filterType: Brightmetrics.Reports.Enums.DimensionFilterType.BTWN,
                             fixed: parameter ? parameter.fixed : false,
                             meta: {
                                 convertTime: true,
-                                defaultType: BREs.FilterOption.Range,
+                                defaultType: Brightmetrics.Reports.Enums.FilterOption.Range,
                                 isAutoGenerated: true,
                             },
                             values: [
@@ -223,21 +223,21 @@ namespace Brightmetrics.Reports.ViewModels {
                             _isNonActionable: parameter ? parameter._isNonActionable : false,
                             description: row.field!.Name,
                             dimensionIndex,
-                            filterType: BREs.DimensionFilterType.IN,
+                            filterType: Brightmetrics.Reports.Enums.DimensionFilterType.IN,
                             fixed: parameter ? parameter.fixed : false,
                             meta: {
                                 convertTime: false,
-                                defaultType: BREs.FilterOption.Selected,
+                                defaultType: Brightmetrics.Reports.Enums.FilterOption.Selected,
                                 isAutoGenerated: true,
                             },
-                        } as BRIs.IFilterExport;
+                        } as Brightmetrics.Reports.Interfaces.IFilterExport;
 
                         // Maybe there are no other values that have a comma,
                         // but we'll make sure we only split values that belong to a multiple-value dimension
                         if (field.MultiValue) {
                             // When drilling through multi-value dimensions,
                             // the applied filter at a detail level should be applied as "exactly these items".
-                            filter.mvCondition = BREs.MultiValueDimensionConditionType.Exact;
+                            filter.mvCondition = Brightmetrics.Reports.Enums.MultiValueDimensionConditionType.Exact;
                             filter.values = value.split(Utils.wordSplitterByCommaRegex);
                         } else {
                             filter.values = [value];
@@ -295,7 +295,7 @@ namespace Brightmetrics.Reports.ViewModels {
                 id: Utils.createUniqueId(),
                 name: this.topbar.reportName() + " (detail)",
                 reportGroup: this.topbar.reportGroup(),
-                reportType: BREs.ReportType.Detail,
+                reportType: Brightmetrics.Reports.Enums.ReportType.Detail,
                 rows: _.map(targetRows, (r) => {
                     return { dimensionIndex: r.index };
                 }),
@@ -337,7 +337,7 @@ namespace Brightmetrics.Reports.ViewModels {
             return ppfrm;
         }
 
-        private _getTemplateSnapshot(): BRIDs.IReportTemplate {
+        private _getTemplateSnapshot(): Brightmetrics.Reports.Interfaces.DTOs.IReportTemplate {
             const report = this._report();
             const dsi = this._dsi();
 
@@ -351,11 +351,11 @@ namespace Brightmetrics.Reports.ViewModels {
 
             let defaultSortIndex: number = this.defaultSortIndex();
 
-            if (report.template.reportType === BREs.ReportType.Detail) {
+            if (report.template.reportType === Brightmetrics.Reports.Enums.ReportType.Detail) {
                 defaultSortIndex = this.rows().length + this.defaultSortIndex();
             }
 
-            const template: BRIDs.IReportTemplate = {
+            const template: Brightmetrics.Reports.Interfaces.DTOs.IReportTemplate = {
                 cols: _.map(this.columns(), (e) => ({
                     dimensionIndex: e.index,
                     label: e.label,
@@ -513,8 +513,8 @@ namespace Brightmetrics.Reports.ViewModels {
 
         public initChildViewModels(props: IEditorProps) {
             const _props = {
-                addParameter: (p: BRIDs.IParameter) => { this.parametersList.push(p); },
-                addThreshold: (toAdd: BRIDs.IReportThreshold) => this.thresholds.push(toAdd),
+                addParameter: (p: Brightmetrics.Reports.Interfaces.DTOs.IParameter) => { this.parametersList.push(p); },
+                addThreshold: (toAdd: Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold) => this.thresholds.push(toAdd),
                 cancelPendingChanges: (clearFlagOnly: boolean = false) => {
                     this.hasPendingChanges(false);
 
@@ -533,13 +533,13 @@ namespace Brightmetrics.Reports.ViewModels {
                 getTemplateSnapshot: () => this._getTemplateSnapshot(),
                 hasPendingChanges: ko.computed(() => this.hasPendingChanges()),
                 isDetail: ko.computed(() => !!this.reportAndDSIAreSet() &&
-                    this._report()!.template.reportType === BREs.ReportType.Detail),
+                    this._report()!.template.reportType === Brightmetrics.Reports.Enums.ReportType.Detail),
                 isTopXEnabled: ko.computed(() => this.isTopXEnabled()),
                 parameters: ko.computed(() => this.parametersList()),
                 recordSort: ko.computed(() => this.recordSort()),
                 recordsOnly: ko.computed(() => this.recordsOnly()),
-                removeParameter: (p: BRIDs.IParameter) => { this.parametersList.remove(p); },
-                removeThreshold: (toRemove: BRIDs.IReportThreshold) =>
+                removeParameter: (p: Brightmetrics.Reports.Interfaces.DTOs.IParameter) => { this.parametersList.remove(p); },
+                removeThreshold: (toRemove: Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold) =>
                     this.thresholds.remove(toRemove),
                 report: this._report,
                 reportDescription: ko.computed(() => this.reportDescription()),
@@ -558,7 +558,7 @@ namespace Brightmetrics.Reports.ViewModels {
                     this.defaultSortIndex(idx);
                 },
                 updateIsTopXEnabled: (yes: boolean) => this.isTopXEnabled(yes),
-                updateParameters: (reordered?: BRIDs.IParameter[]) => {
+                updateParameters: (reordered?: Brightmetrics.Reports.Interfaces.DTOs.IParameter[]) => {
                     if (reordered) {
                         const params = this.parametersList();
                         params.length = 0;
@@ -573,7 +573,7 @@ namespace Brightmetrics.Reports.ViewModels {
                     this.reportDescription(updatedDescription),
                 updateReportGroup: (updatedGroup: string) => this.reportGroup(updatedGroup),
                 updateReportName: (updatedName: string) => this.reportName(updatedName),
-                updateThreshold: (old: BRIDs.IReportThreshold, updated: BRIDs.IReportThreshold) =>
+                updateThreshold: (old: Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold, updated: Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold) =>
                     this.thresholds.replace(old, updated),
                 updateTopX: (topX: number) => { this.topX(topX); },
                 values: ko.computed(() => this.values()),
@@ -589,9 +589,9 @@ namespace Brightmetrics.Reports.ViewModels {
                 onChartButtonClick: props.onChartButtonClick,
                 showAdvancedOptions: props.showFiltersAdvancedOptions,
                 showCollapseChartButton: props.showCollapseChartButton,
-            } as BRVs.IFilterWidgetsProps);
+            } as Brightmetrics.Reports.ViewModels.IFilterWidgetsProps);
 
-            this.fieldEditor = new BRVs.ReportFieldEditor({
+            this.fieldEditor = new Brightmetrics.Reports.ViewModels.ReportFieldEditor({
                 ..._props as any, // Unsafe
                 canSeeFieldEditor: props.canEditFieldEditor,
                 columns: this.columns,
diff --git a/ts/Reports/ViewModels/editreportdataselectiondialog.ts b/ts/Reports/ViewModels/editreportdataselectiondialog.ts
index d8ecd17..bb772e1 100644
--- a/ts/Reports/ViewModels/editreportdataselectiondialog.ts
+++ b/ts/Reports/ViewModels/editreportdataselectiondialog.ts
@@ -16,7 +16,7 @@ namespace Brightmetrics.Reports.ViewModels {
     }
 
     class DSIItemCheckbox {
-        private dsi: BIs.IDataSourceInstance;
+        private dsi: Brightmetrics.Interfaces.IDataSourceInstance;
         public groupName: string;
         public id: number;
         public name: string;
@@ -24,7 +24,7 @@ namespace Brightmetrics.Reports.ViewModels {
         public isDisabled: boolean;
         public tooltip: string;
 
-        constructor(dsi: BIs.IDataSourceInstance, groupName: string, isChecked = false, isDisabled = false) {
+        constructor(dsi: Brightmetrics.Interfaces.IDataSourceInstance, groupName: string, isChecked = false, isDisabled = false) {
             this.dsi = dsi;
             this.id = dsi.Id;
             this.groupName = groupName;
@@ -74,7 +74,7 @@ namespace Brightmetrics.Reports.ViewModels {
                 dialogClasses: ["c-dialog-wrapper"],
                 dialogContent: "#edit-report-data-selection-dialog-template",
                 modal: true,
-            } as BIs.IDialogViewModelOptions);
+            } as Brightmetrics.Interfaces.IDialogViewModelOptions);
         }
 
         public createEventHandlers(props: IDataSelectionDialogProps) {
diff --git a/ts/Reports/ViewModels/editthresholddialog.ts b/ts/Reports/ViewModels/editthresholddialog.ts
index 166fb76..2732a2b 100644
--- a/ts/Reports/ViewModels/editthresholddialog.ts
+++ b/ts/Reports/ViewModels/editthresholddialog.ts
@@ -4,29 +4,24 @@
 /// <reference path="../../ViewModels/dialog.ts" />
 
 namespace Brightmetrics.Reports.ViewModels {
-    import BEs = Brightmetrics.Enums;
-    import BIs = Brightmetrics.Interfaces;
-    import BRIs = Interfaces;
-    import BRIDs = Interfaces.DTOs;
-
     const defaultAlertColor = "#ffcaca";
     const defaultWarningColor = "#ffffca";
 
     interface IEditThresholdDialogProps {
-        threshold?: BRIDs.IReportThreshold;
-        fieldHelper: BRIs.IReportFieldHelper;
+        threshold?: Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold;
+        fieldHelper: Brightmetrics.Reports.Interfaces.IReportFieldHelper;
         dsiId: number;
-        onApply(t: BRIDs.IReportThreshold): void;
+        onApply(t: Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold): void;
         onDelete?(): void;
     }
 
     export class EditThresholdDialog extends Brightmetrics.ViewModels.DialogViewModel {
         private _id: string;
-        private _fieldHelper: BRIs.IReportFieldHelper;
+        private _fieldHelper: Brightmetrics.Reports.Interfaces.IReportFieldHelper;
         public canDelete: boolean;
         public dialogTitle: string;
         public fieldName: string;
-        public scale: BEs.ValueScale;
+        public scale: Brightmetrics.Enums.ValueScale;
         public dsiId: number;
         public directionOver: KnockoutObservable<number>;
         public directionOverOptions: Array<IKoOption<number>>;
@@ -58,7 +53,7 @@ namespace Brightmetrics.Reports.ViewModels {
             super(props);
         }
 
-        private _fromJSON(threshold: BRIDs.IReportThreshold) {
+        private _fromJSON(threshold: Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold) {
             this._id = threshold.id || Utils.createUniqueId();
             this.canDelete = true;
             this.directionOver = ko.observable(+threshold.directionOver);
@@ -87,7 +82,7 @@ namespace Brightmetrics.Reports.ViewModels {
         }
 
         public initialize(props: IEditThresholdDialogProps) {
-            const field = props.fieldHelper.field! as BIs.IFact;
+            const field = props.fieldHelper.field! as Brightmetrics.Interfaces.IFact;
 
             this._fieldHelper = props.fieldHelper;
             this.directionOverOptions = [
@@ -116,7 +111,7 @@ namespace Brightmetrics.Reports.ViewModels {
                 appendTo: "#page-content-dialog-area",
                 dialogContent: "#edit-threshold-dialog",
                 modal: true,
-            } as BIs.IDialogViewModelOptions);
+            } as Brightmetrics.Interfaces.IDialogViewModelOptions);
         }
 
         public initSubscriptions(props: IEditThresholdDialogProps) {
@@ -209,7 +204,7 @@ namespace Brightmetrics.Reports.ViewModels {
             };
         }
 
-        public toJSON(): BRIDs.IReportThreshold {
+        public toJSON(): Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold {
             return {
                 alert: this.alertTrimmed() ? this.alertAsNumber() : null,
                 alertColor: this.alertColor(),
diff --git a/ts/Reports/ViewModels/filter.ts b/ts/Reports/ViewModels/filter.ts
index 5d1d1a9..71e0257 100644
--- a/ts/Reports/ViewModels/filter.ts
+++ b/ts/Reports/ViewModels/filter.ts
@@ -17,7 +17,7 @@ namespace Brightmetrics.Reports.ViewModels {
         dsiId: number,
         dimensionIndex: number,
         proxyIndex ?: number,
-        detailQueryFilters?: Array<BRIDs.IFilter | BRIDs.IFilterDetail>)
+        detailQueryFilters?: Array<Brightmetrics.Reports.Interfaces.DTOs.IFilter | Brightmetrics.Reports.Interfaces.DTOs.IFilterDetail>)
         : string {
 
         const keyParts = [dsiId, dimensionIndex, proxyIndex ?? 0] as Array<string | number>;
@@ -35,10 +35,10 @@ namespace Brightmetrics.Reports.ViewModels {
         return keyParts.join("|");
     }
 
-    type PFS = BRIDs.IParameterFilterSelected;
-    type PFR = BRIDs.IParameterFilterRelative;
-    type PF = BRIDs.IParameterFilter;
-    type PV = BRIDs.IParameterValue;
+    type PFS = Brightmetrics.Reports.Interfaces.DTOs.IParameterFilterSelected;
+    type PFR = Brightmetrics.Reports.Interfaces.DTOs.IParameterFilterRelative;
+    type PF = Brightmetrics.Reports.Interfaces.DTOs.IParameterFilter;
+    type PV = Brightmetrics.Reports.Interfaces.DTOs.IParameterValue;
 
     interface IGenericRecentTimeWindow<T> {
         fromDaysAgo: T;
@@ -48,18 +48,18 @@ namespace Brightmetrics.Reports.ViewModels {
     }
 
     interface IFilterProps {
-        currentFilterOption: KnockoutComputed<BREs.FilterOption>;
-        filterOption: BREs.FilterOption;
+        currentFilterOption: KnockoutComputed<Brightmetrics.Reports.Enums.FilterOption>;
+        filterOption: Brightmetrics.Reports.Enums.FilterOption;
         filter: PF | PV;
         dataType: string;
         dsiId?: number;
-        detailQueryFilters: Array<BRIDs.IFilter | BRIDs.IFilterDetail>;
-        dsi?: KnockoutComputed<BIs.IDataSourceInstance | null>;
-        additionalDsis: KnockoutReadonlyObservable<BIs.IDataSourceInstance[]>;
+        detailQueryFilters: Array<Brightmetrics.Reports.Interfaces.DTOs.IFilter | Brightmetrics.Reports.Interfaces.DTOs.IFilterDetail>;
+        dsi?: KnockoutComputed<Brightmetrics.Interfaces.IDataSourceInstance | null>;
+        additionalDsis: KnockoutReadonlyObservable<Brightmetrics.Interfaces.IDataSourceInstance[]>;
         isDetail?: KnockoutComputed<boolean>;
-        displayNote?: (pf: BRIDs.IParameterFilter) => string;
+        displayNote?: (pf: Brightmetrics.Reports.Interfaces.DTOs.IParameterFilter) => string;
         multipleSelectOptions?: Partial<MultipleSelect.Interfaces.IMultipleSelectDialogProps<string>>;
-        setFilterOption?(filterOption: BREs.FilterOption): void;
+        setFilterOption?(filterOption: Brightmetrics.Reports.Enums.FilterOption): void;
         customListFetcher?(dimensionIndex: number): JQuery.Thenable<Array<IKoOption<string>>>;
     }
 
@@ -69,14 +69,14 @@ namespace Brightmetrics.Reports.ViewModels {
         private get _pf() { return this._filterBase as PF; }
         private get _pfs() { return this._filterBase as PFS; }
         private get _pfr() { return this._filterBase as PFR; }
-        private _filterOption: BREs.FilterOption;
+        private _filterOption: Brightmetrics.Reports.Enums.FilterOption;
         private _dataType: string;
         private _editedSelectedUsingPopover: boolean;
-        private _setFilterOption?: (filterOption: BREs.FilterOption) => void;
+        private _setFilterOption?: (filterOption: Brightmetrics.Reports.Enums.FilterOption) => void;
         private _isMultiValueDimension: KnockoutObservable<boolean>;
 
         public description: string;
-        public filterType: KnockoutObservable<BREs.DimensionFilterType | BREs.ValueFilterType>;
+        public filterType: KnockoutObservable<Brightmetrics.Reports.Enums.DimensionFilterType | Brightmetrics.Reports.Enums.ValueFilterType>;
         public displayNote: string;
 
         // Date Range:
@@ -92,7 +92,7 @@ namespace Brightmetrics.Reports.ViewModels {
         public isDatepickerOpen: KnockoutComputed<boolean>;
         public minuteStartOptions: KnockoutObservableArray<IKoOption<number>>;
         public minuteEndOptions: KnockoutObservableArray<IKoOption<number>>;
-        public dateRangeOptions: KnockoutObservable<BIs.IDatePickerOptions>;
+        public dateRangeOptions: KnockoutObservable<Brightmetrics.Interfaces.IDatePickerOptions>;
 
         // Range:
         public rangeStart: KnockoutObservable<string>;
@@ -100,7 +100,7 @@ namespace Brightmetrics.Reports.ViewModels {
         public rangeOptions: KnockoutObservableArray<IKoOption<string>>;
 
         // Relative:
-        public relativeValue: KnockoutObservable<null | string | number | BRIDs.IRecentTimeWindow>;
+        public relativeValue: KnockoutObservable<null | string | number | Brightmetrics.Reports.Interfaces.DTOs.IRecentTimeWindow>;
         public relativeSelection: KnockoutObservable<string>; // Time range dropdown value.
         public relativeOptions: Array<IKoOption<string>>;
         public includeToday: KnockoutObservable<boolean>;
@@ -148,7 +148,7 @@ namespace Brightmetrics.Reports.ViewModels {
 
         private _getMultipleSelectProps(props: IFilterProps): BMIs.IMultipleSelectProps<string> {
             const presets: {
-                presetFilterType?: BREs.DimensionFilterType;
+                presetFilterType?: Brightmetrics.Reports.Enums.DimensionFilterType;
                 presetGroupOthers?: boolean;
                 presetListIndex?: number;
                 presetValues?: string[];
@@ -156,7 +156,7 @@ namespace Brightmetrics.Reports.ViewModels {
             } = {};
 
             if (this.values().length > 0) {
-                presets.presetFilterType = this.filterType() as BREs.DimensionFilterType;
+                presets.presetFilterType = this.filterType() as Brightmetrics.Reports.Enums.DimensionFilterType;
                 presets.presetGroupOthers = this.groupOthers();
                 presets.presetListIndex = this.proxyIndex() || 0;
                 presets.presetValues = this.values().slice();
@@ -195,7 +195,7 @@ namespace Brightmetrics.Reports.ViewModels {
                     // Select dialog, we automatically switch to the parameter
                     // type "All".
                     if (update.values.length === 0 && this._setFilterOption) {
-                        this._setFilterOption(BREs.FilterOption.All);
+                        this._setFilterOption(Brightmetrics.Reports.Enums.FilterOption.All);
                     }
                 },
 
@@ -215,17 +215,17 @@ namespace Brightmetrics.Reports.ViewModels {
 
         private _initialize(props: IFilterProps) {
             let preloadValuesSubscription: KnockoutSubscription | undefined;
-            let onPreloadValuesReady: ((option: BREs.FilterOption) => boolean) | undefined;
+            let onPreloadValuesReady: ((option: Brightmetrics.Reports.Enums.FilterOption) => boolean) | undefined;
 
             switch (this._filterOption) {
-                case BREs.FilterOption.Selected:
+                case Brightmetrics.Reports.Enums.FilterOption.Selected:
                 // Because of migration to 'Selected' this will never be true.
-                case BREs.FilterOption.Multiple:
+                case Brightmetrics.Reports.Enums.FilterOption.Multiple:
                 // Because of migration to 'Selected' this will never be true.
-                case BREs.FilterOption.One:
+                case Brightmetrics.Reports.Enums.FilterOption.One:
                     this._editedSelectedUsingPopover = false;
                     this.values(this._pfs.values.slice());
-                    this.groupOthers(this._filterOption !== BREs.FilterOption.One &&
+                    this.groupOthers(this._filterOption !== Brightmetrics.Reports.Enums.FilterOption.One &&
                         !!this._pfs.groupOthers);
                     this.filterType(this._pfs.filterType);
 
@@ -233,13 +233,13 @@ namespace Brightmetrics.Reports.ViewModels {
                         this.proxyIndex(this._pfs.proxyIndex);
                     }
 
-                    const meetsPreloadCriteria = (option: BREs.FilterOption) => {
-                        return option === BREs.FilterOption.Selected ||
-                            option === BREs.FilterOption.Multiple ||
-                            option === BREs.FilterOption.One;
+                    const meetsPreloadCriteria = (option: Brightmetrics.Reports.Enums.FilterOption) => {
+                        return option === Brightmetrics.Reports.Enums.FilterOption.Selected ||
+                            option === Brightmetrics.Reports.Enums.FilterOption.Multiple ||
+                            option === Brightmetrics.Reports.Enums.FilterOption.One;
                     };
 
-                    onPreloadValuesReady = (option: BREs.FilterOption) => {
+                    onPreloadValuesReady = (option: Brightmetrics.Reports.Enums.FilterOption) => {
                         const isReady = meetsPreloadCriteria(option);
 
                         if (isReady) {
@@ -259,8 +259,8 @@ namespace Brightmetrics.Reports.ViewModels {
                     }
 
                     break;
-                case BREs.FilterOption.Range:
-                    if (props.dataType === BEs.DataType.DateTime) {
+                case Brightmetrics.Reports.Enums.FilterOption.Range:
+                    if (props.dataType === Brightmetrics.Enums.DataType.DateTime) {
                         const startDateString = this._pf.values[0] as string;
                         const endDateString = this._pf.values[1] as string;
                         const startDate = Utils.Dates.parseDateTimeString(startDateString);
@@ -335,8 +335,8 @@ namespace Brightmetrics.Reports.ViewModels {
                         this.rangeStart(this._pf.values[0] as string);
                         this.rangeEnd(this._pf.values[1] as string);
 
-                        onPreloadValuesReady = (option: BREs.FilterOption) => {
-                            const isReady = option === BREs.FilterOption.Range;
+                        onPreloadValuesReady = (option: Brightmetrics.Reports.Enums.FilterOption) => {
+                            const isReady = option === Brightmetrics.Reports.Enums.FilterOption.Range;
 
                             if (isReady) {
                                 const dsiids = [props.dsiId!].concat(props.additionalDsis().map((d) => d.Id));
@@ -372,7 +372,7 @@ namespace Brightmetrics.Reports.ViewModels {
                         }
                     }
                     break;
-                case BREs.FilterOption.Relative:
+                case Brightmetrics.Reports.Enums.FilterOption.Relative:
                     this.relativeValue(this._pfr.values[0]);
                     this.relativeSelection(this._pfr.values[1] as string);
                     this.includeToday(!!this._pfr.includeToday);
@@ -381,7 +381,7 @@ namespace Brightmetrics.Reports.ViewModels {
                     const retentionDays = Utils.getCompanyDataRetentionDays();
 
                     this.relativeOptions = _.map(Brightmetrics.Constants.dateRangeTypeMap, (label, value: string) => {
-                        let tooltip: string | BIs.ITooltipBindingOptions = "";
+                        let tooltip: string | Brightmetrics.Interfaces.ITooltipBindingOptions = "";
                         let disabled = false;
 
                         if (isLiteMode) {
@@ -392,7 +392,7 @@ namespace Brightmetrics.Reports.ViewModels {
                                 disabled = true;
                                 tooltip = {
                                     delay: 750,
-                                    direction: BVs.Tooltip.Direction.W,
+                                    direction: Brightmetrics.ViewModels.Tooltip.Direction.W,
                                     text: Utils.getLiteModeDataRestrictionText(),
                                 };
                             }
@@ -405,8 +405,8 @@ namespace Brightmetrics.Reports.ViewModels {
                             value,
                         };
                     });
-                    const rtw = this.relativeSelection() === BEs.TimeRange.RecentTimeWindow ?
-                        this._pfr.values[0] as BRIDs.IRecentTimeWindow :
+                    const rtw = this.relativeSelection() === Brightmetrics.Enums.TimeRange.RecentTimeWindow ?
+                        this._pfr.values[0] as Brightmetrics.Reports.Interfaces.DTOs.IRecentTimeWindow :
                         Utils.ReportHelpers.parseRecentTimeWindow("");
 
                     this.recentTimeWindow.fromDaysAgo(rtw.fromDaysAgo);
@@ -427,17 +427,17 @@ namespace Brightmetrics.Reports.ViewModels {
                         Brightmetrics.Constants.times.hoursMinsClock, (h, i) =>
                         ({ label: h, value: i }));
                     break;
-                case BREs.FilterOption.Matches:
+                case Brightmetrics.Reports.Enums.FilterOption.Matches:
                     this.matchString(String(this._pf.values[0] || ""));
                     break;
-                case BREs.FilterOption.Value:
+                case Brightmetrics.Reports.Enums.FilterOption.Value:
                     this.filterType(props.filter.filterType);
                     this.filterValue(String(this._pv.filterValue));
                     this.filterHiValue(String(this._pv.filterHiValue));
-                    this.filterTypeOptions = _.map(Constants.valueFilterTypeToName, (v, k: BREs.ValueFilterType) => {
+                    this.filterTypeOptions = _.map(Constants.valueFilterTypeToName, (v, k: Brightmetrics.Reports.Enums.ValueFilterType) => {
                         return { label: v, value: k };
                     });
-                case BREs.FilterOption.All:
+                case Brightmetrics.Reports.Enums.FilterOption.All:
                 default:
                     break;
             }
@@ -448,7 +448,7 @@ namespace Brightmetrics.Reports.ViewModels {
             dimensionIndex: number,
             timeDetail: string,
             proxyIndex?: number,
-            detailQueryFilters?: Array<BRIDs.IFilter | BRIDs.IFilterDetail>) {
+            detailQueryFilters?: Array<Brightmetrics.Reports.Interfaces.DTOs.IFilter | Brightmetrics.Reports.Interfaces.DTOs.IFilterDetail>) {
 
             const key = deriveDimensionValuesCacheKey(dsiId, dimensionIndex, proxyIndex, detailQueryFilters);
             const cached = dimensionValuesCache[key];
@@ -549,20 +549,20 @@ namespace Brightmetrics.Reports.ViewModels {
                     o.value > this.recentTimeWindow.fromTime())),
             };
             this.isDatepickerOpen = ko.computed(() => {
-                if (props.dataType === BEs.DataType.DateTime) {
+                if (props.dataType === Brightmetrics.Enums.DataType.DateTime) {
                     return this.hasBlockingElement();
                 }
                 return false;
             });
             this.filterHiEnabled = ko.computed(() => {
                 return _.contains([
-                    BREs.ValueFilterType.BTWN,
-                    BREs.ValueFilterType.NBTWN,
+                    Brightmetrics.Reports.Enums.ValueFilterType.BTWN,
+                    Brightmetrics.Reports.Enums.ValueFilterType.NBTWN,
                 ], this.filterType());
             });
             this.valueLabels = ko.computed(() => {
                 const labels = _.map(this.values().slice(0, 10), (label) => label || "(blank)");
-                if (this.filterType() === BREs.DimensionFilterType.NIN && labels.length > 0) {
+                if (this.filterType() === Brightmetrics.Reports.Enums.DimensionFilterType.NIN && labels.length > 0) {
                     return "Excluded: " + labels.join(", ");
                 }
 
@@ -577,8 +577,8 @@ namespace Brightmetrics.Reports.ViewModels {
             const noErrorMessage = "";
 
             this.lastXDaysErrorMessage = ko.pureComputed(() => {
-                if (this._filterOption !== BREs.FilterOption.Relative ||
-                    this.relativeSelection() !== BEs.TimeRange.LastXDays)
+                if (this._filterOption !== Brightmetrics.Reports.Enums.FilterOption.Relative ||
+                    this.relativeSelection() !== Brightmetrics.Enums.TimeRange.LastXDays)
                 {
                     return noErrorMessage;
                 }
@@ -602,7 +602,7 @@ namespace Brightmetrics.Reports.ViewModels {
 
         public createEventHandlers(props: IFilterProps) {
             this.events.onMultipleValuesClick = () => {
-                let emailDialog: BVs.EmailDialog | undefined = void (0);
+                let emailDialog: Brightmetrics.ViewModels.EmailDialog | undefined = void (0);
                 let beforeDestroy: (() => JQuery.Thenable<void>) | undefined = void (0);
                 let listFetcherReady: KnockoutObservable<boolean> | undefined = void (0);
                 let multipleSelectDialog: MultipleSelect.ViewModels.MultipleSelectDialog;
@@ -646,44 +646,44 @@ namespace Brightmetrics.Reports.ViewModels {
         }
 
         public toJSON() {
-            let json: BRIDs.IParameterFilter | BRIDs.IParameterValue;
+            let json: Brightmetrics.Reports.Interfaces.DTOs.IParameterFilter | Brightmetrics.Reports.Interfaces.DTOs.IParameterValue;
 
             switch (this._filterOption) {
-                case BREs.FilterOption.Selected:
-                case BREs.FilterOption.Multiple:
-                case BREs.FilterOption.One:
+                case Brightmetrics.Reports.Enums.FilterOption.Selected:
+                case Brightmetrics.Reports.Enums.FilterOption.Multiple:
+                case Brightmetrics.Reports.Enums.FilterOption.One:
                     json = this.toJSONForContains();
                     break;
-                case BREs.FilterOption.Range:
-                    if (this._dataType === BEs.DataType.DateTime) {
+                case Brightmetrics.Reports.Enums.FilterOption.Range:
+                    if (this._dataType === Brightmetrics.Enums.DataType.DateTime) {
                         json = this.toJSONForDateRange();
                     } else {
                         json = this.toJSONForRange();
                     }
                     break;
-                case BREs.FilterOption.Relative:
+                case Brightmetrics.Reports.Enums.FilterOption.Relative:
                     json = this.toJSONForRelative();
                     break;
-                case BREs.FilterOption.Matches:
+                case Brightmetrics.Reports.Enums.FilterOption.Matches:
                     json = {
                         values: [
                             _.compact(this.matchString().split(Utils.wordSplitterByCommaRegex)).join(",")
                         ]
-                    } as BRIDs.IParameterFilter;
+                    } as Brightmetrics.Reports.Interfaces.DTOs.IParameterFilter;
                     break;
-                case BREs.FilterOption.Value:
+                case Brightmetrics.Reports.Enums.FilterOption.Value:
                     json = {
                         filterHiValue: this.filterHiEnabled() && parseFloat(this.filterHiValue()) || 0,
-                        filterType: this.filterType() as BREs.ValueFilterType,
+                        filterType: this.filterType() as Brightmetrics.Reports.Enums.ValueFilterType,
                         filterValue: parseFloat(this.filterValue()),
-                    } as BRIDs.IParameterValue;
+                    } as Brightmetrics.Reports.Interfaces.DTOs.IParameterValue;
                     break;
-                case BREs.FilterOption.All:
+                case Brightmetrics.Reports.Enums.FilterOption.All:
                 default:
                     json = {
                         filterType: null,
                         values: [] as Array<string | null | number>,
-                    } as BRIDs.IParameterFilter;
+                    } as Brightmetrics.Reports.Interfaces.DTOs.IParameterFilter;
                     break;
             }
 
@@ -699,7 +699,7 @@ namespace Brightmetrics.Reports.ViewModels {
                 filterType: this.filterType(),
                 groupOthers: this.groupOthers(),
                 values: this.values().slice(),
-            } as BRIDs.IParameterFilterSelected;
+            } as Brightmetrics.Reports.Interfaces.DTOs.IParameterFilterSelected;
 
             if (Utils.ReportHelpers.hasProxies(this._pfs)) {
                 json.proxyIndex = this.proxyIndex();
@@ -725,23 +725,23 @@ namespace Brightmetrics.Reports.ViewModels {
                     Utils.Dates.format2(startDate),
                     Utils.Dates.format2(endDate),
                 ],
-            } as BRIDs.IParameterFilterRelative;
+            } as Brightmetrics.Reports.Interfaces.DTOs.IParameterFilterRelative;
         }
 
         public toJSONForRange() {
             return {
                 values: [this.rangeStart(), this.rangeEnd()],
-            } as BRIDs.IParameterFilter;
+            } as Brightmetrics.Reports.Interfaces.DTOs.IParameterFilter;
         }
 
         public toJSONForRelative() {
-            let values: Array<string | null | number | BRIDs.IRecentTimeWindow>;
+            let values: Array<string | null | number | Brightmetrics.Reports.Interfaces.DTOs.IRecentTimeWindow>;
 
-            if (this.relativeSelection() === BEs.TimeRange.LastXDays) {
+            if (this.relativeSelection() === Brightmetrics.Enums.TimeRange.LastXDays) {
                 values = [Math.abs(+this.relativeValue()! || 0), this.relativeSelection()];
-            } else if (this.relativeSelection() === BEs.TimeRange.RecentTimeWindow) {
+            } else if (this.relativeSelection() === Brightmetrics.Enums.TimeRange.RecentTimeWindow) {
                 values = [
-                    ko.toJS(this.recentTimeWindow) as BRIDs.IRecentTimeWindow,
+                    ko.toJS(this.recentTimeWindow) as Brightmetrics.Reports.Interfaces.DTOs.IRecentTimeWindow,
                     this.relativeSelection()
                 ];
             } else {
@@ -751,7 +751,7 @@ namespace Brightmetrics.Reports.ViewModels {
             return {
                 includeToday: this.includeToday(),
                 values,
-            } as BRIDs.IParameterFilterRelative;
+            } as Brightmetrics.Reports.Interfaces.DTOs.IParameterFilterRelative;
         }
     }
 }
diff --git a/ts/Reports/ViewModels/filterpill.ts b/ts/Reports/ViewModels/filterpill.ts
index ccd9c8c..ec5e556 100644
--- a/ts/Reports/ViewModels/filterpill.ts
+++ b/ts/Reports/ViewModels/filterpill.ts
@@ -6,13 +6,6 @@
 /// <reference path="../../utils.ts" />
 
 namespace Brightmetrics.Reports.ViewModels {
-    import BVs = Brightmetrics.ViewModels;
-    import BIs = Brightmetrics.Interfaces;
-    import BEs = Brightmetrics.Enums;
-    import BRIs = Brightmetrics.Reports.Interfaces;
-    import BRIDs = Brightmetrics.Reports.Interfaces.DTOs;
-    import BREs = Brightmetrics.Reports.Enums;
-
     function trimTrailingColon(text: string) {
         text = $.trim(text);
 
@@ -23,7 +16,7 @@ namespace Brightmetrics.Reports.ViewModels {
         return text;
     }
 
-    export class FilterPill extends BVs.Pill<string> {
+    export class FilterPill extends Brightmetrics.ViewModels.Pill<string> {
         public fixed: KnockoutObservable<boolean>;
         public fixedIconSrc: KnockoutComputed<string>;
         public fixedIconTooltip: KnockoutComputed<string>;
@@ -32,18 +25,18 @@ namespace Brightmetrics.Reports.ViewModels {
         public excludeReadOnlyFeature: boolean;
         public isReadOnly: KnockoutComputed<boolean>;
         public isSelected: KnockoutObservable<boolean>;
-        public parameter: KnockoutObservable<BRIDs.IParameter>;
+        public parameter: KnockoutObservable<Brightmetrics.Reports.Interfaces.DTOs.IParameter>;
         public valuesText: KnockoutComputed<string>;
         public valuesTextShort: KnockoutComputed<string>;
         public valuesTextTruncated: KnockoutComputed<number>;
         public valuesTextIsTruncated: KnockoutComputed<boolean>;
         public cssBinding: KnockoutComputed<JQuery.PlainObject>;
 
-        public constructor(props: BRIs.IFilterPillProps) {
+        public constructor(props: Brightmetrics.Reports.Interfaces.IFilterPillProps) {
             super(props);
         }
 
-        public initialize(props: BRIs.IFilterPillProps) {
+        public initialize(props: Brightmetrics.Reports.Interfaces.IFilterPillProps) {
             super.initialize(props);
 
             this.label = trimTrailingColon(props.label as string);
@@ -60,7 +53,7 @@ on the report.`);
             this.removeIconTooltip = "Click to remove filter";
         }
 
-        public initSubscriptions(props: BRIs.IFilterPillProps) {
+        public initSubscriptions(props: Brightmetrics.Reports.Interfaces.IFilterPillProps) {
             this.isReadOnly = ko.computed(() =>
                 !!props.isNonActionable && this.fixed());
 
@@ -75,14 +68,14 @@ on the report.`);
                 const param = this.parameter();
 
                 if (Utils.ReportHelpers.isDimensionParameter(param)) {
-                    const filter = (param as BRIDs.IParameterDimension).defaultFilters[
-                        (param as BRIDs.IParameterDimension).defaultType
+                    const filter = (param as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension).defaultFilters[
+                        (param as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension).defaultType
                     ]!;
 
                     return Utils.ReportHelpers.getFilterValuesText(filter);
                 }
 
-                return Utils.ReportHelpers.getFilterValuesText(param as BRIDs.IParameterValue);
+                return Utils.ReportHelpers.getFilterValuesText(param as Brightmetrics.Reports.Interfaces.DTOs.IParameterValue);
             });
 
             this.cssBinding = ko.computed(() => {
@@ -104,8 +97,8 @@ on the report.`);
                 const param = this.parameter.peek();
 
                 if (Utils.ReportHelpers.isDimensionParameter(param)) {
-                    const filter = (param as BRIDs.IParameterDimension).defaultFilters[
-                        (param as BRIDs.IParameterDimension).defaultType
+                    const filter = (param as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension).defaultFilters[
+                        (param as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension).defaultType
                     ]!;
 
                     if (filter.values.length > 5) {
@@ -123,8 +116,8 @@ on the report.`);
                 const param = this.parameter();
 
                 if (Utils.ReportHelpers.isDimensionParameter(param)) {
-                    const filter = (param as BRIDs.IParameterDimension).defaultFilters[
-                        (param as BRIDs.IParameterDimension).defaultType
+                    const filter = (param as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension).defaultFilters[
+                        (param as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension).defaultType
                     ]!;
 
                     if (filter.values.length > 5) {
@@ -140,7 +133,7 @@ on the report.`);
             });
         }
 
-        public createEventHandlers(props: BRIs.IFilterPillProps) {
+        public createEventHandlers(props: Brightmetrics.Reports.Interfaces.IFilterPillProps) {
             super.createEventHandlers(props);
 
             this.events.onLabelClick = () => {
diff --git a/ts/Reports/ViewModels/filterwidgets.ts b/ts/Reports/ViewModels/filterwidgets.ts
index ae05de5..92c09e2 100644
--- a/ts/Reports/ViewModels/filterwidgets.ts
+++ b/ts/Reports/ViewModels/filterwidgets.ts
@@ -12,8 +12,8 @@ namespace Brightmetrics.Reports.ViewModels {
             const instance = valueAccessor();
             const $element = $(element);
 
-            function resolveHelper(ui: { draggable: JQuery<HTMLElement> }): FieldHelper | undefined {
-                const helperMaybe: FieldHelper | { helper: FieldHelper } | undefined = ko.dataFor(ui.draggable.get(0));
+            function resolveHelper(ui: { draggable: JQuery<HTMLElement> }): Brightmetrics.Reports.Interfaces.IReportFieldHelper | undefined {
+                const helperMaybe: Brightmetrics.Reports.Interfaces.IReportFieldHelper | { helper: Brightmetrics.Reports.Interfaces.IReportFieldHelper } | undefined = ko.dataFor(ui.draggable.get(0));
                 if (!helperMaybe) {
                     Utils.logError("Unable to resolve filter widget");
                     return;
@@ -22,7 +22,7 @@ namespace Brightmetrics.Reports.ViewModels {
                 if ("helper" in helperMaybe) {
                     return helperMaybe.helper;
                 }
-                // In the FilterWidgets, the $data context is a FieldHelper
+                // In the FilterWidgets, the $data context is a Brightmetrics.Reports.Interfaces.IReportFieldHelper
                 return helperMaybe;
             }
 
@@ -117,17 +117,17 @@ namespace Brightmetrics.Reports.ViewModels {
     };
 
     export interface IFilterWidgetsProps {
-        dsi: KnockoutComputed<DSI | null>;
-        additionalDsis: KnockoutReadonlyObservable<DSI[]>;
-        parameters: KnockoutComputed<BRIDs.IParameter[]>;
-        removeParameter: (p: BRIDs.IParameter) => void;
-        updateParameters: (reordered?: BRIDs.IParameter[]) => void;
+        dsi: KnockoutComputed<Brightmetrics.Interfaces.IDataSourceInstance | null>;
+        additionalDsis: KnockoutReadonlyObservable<Brightmetrics.Interfaces.IDataSourceInstance[]>;
+        parameters: KnockoutComputed<Brightmetrics.Reports.Interfaces.DTOs.IParameter[]>;
+        removeParameter: (p: Brightmetrics.Reports.Interfaces.DTOs.IParameter) => void;
+        updateParameters: (reordered?: Brightmetrics.Reports.Interfaces.DTOs.IParameter[]) => void;
         // TODO: Need to rethink the reusability of this component -- there are
         // a lot of optional options being passed in.
         isDetail?: KnockoutComputed<boolean>;
-        rows?: KnockoutComputed<FieldHelper[]>;
-        columns?: KnockoutComputed<FieldHelper[]>;
-        values?: KnockoutComputed<FieldHelper[]>;
+        rows?: KnockoutComputed<Brightmetrics.Reports.Interfaces.IReportFieldHelper[]>;
+        columns?: KnockoutComputed<Brightmetrics.Reports.Interfaces.IReportFieldHelper[]>;
+        values?: KnockoutComputed<Brightmetrics.Reports.Interfaces.IReportFieldHelper[]>;
         defaultSortAscending?: KnockoutComputed<boolean>;
         updateDefaultSortAscending?: (yes: boolean) => void;
         defaultSortIndex?: KnockoutComputed<number>;
@@ -145,8 +145,8 @@ namespace Brightmetrics.Reports.ViewModels {
         updateRecordsOnly?: (yes: boolean) => void;
         recordSort?: KnockoutComputed<boolean>;
         updateRecordSort?: (yes: boolean) => void;
-        addParameter?: (p: BRIDs.IParameter) => void;
-        fields?: KnockoutComputed<FieldHelper[]>;
+        addParameter?: (p: Brightmetrics.Reports.Interfaces.DTOs.IParameter) => void;
+        fields?: KnockoutComputed<Brightmetrics.Reports.Interfaces.IReportFieldHelper[]>;
         displayOnTopOfPill?: boolean;
         nonActionablePills?: boolean;
         showAdvancedOptions?: boolean;
@@ -155,7 +155,7 @@ namespace Brightmetrics.Reports.ViewModels {
         showCollapseChartButton?: boolean;
         hideCollapseFiltersButton?: boolean;
         chartIsExpanded?: KnockoutComputed<boolean>;
-        displayNote?: (pf: BRIDs.IParameterFilter) => string;
+        displayNote?: (pf: Brightmetrics.Reports.Interfaces.DTOs.IParameterFilter) => string;
         onChartButtonClick?: () => void;
         msOptsForParam?: {
             [dimensionIndex: number]: Partial<MultipleSelect.Interfaces.IMultipleSelectDialogProps<string>>;
@@ -165,10 +165,10 @@ namespace Brightmetrics.Reports.ViewModels {
 
     export class FilterWidgets extends Brightmetrics.ViewModel {
         private _props: IFilterWidgetsProps;
-        private _fieldHelperToParamMap: BIs.ITypedWeakMap<FieldHelper, BRIDs.IParameter>;
+        private _fieldHelperToParamMap: Brightmetrics.Interfaces.ITypedWeakMap<Brightmetrics.Reports.Interfaces.IReportFieldHelper, Brightmetrics.Reports.Interfaces.DTOs.IParameter>;
         private _fieldLists: KnockoutComputed<Array<Array<IKoOption<string>>>>;
         private _topXTooltipTemplate: string;
-        private _parameters: KnockoutComputed<BRIDs.IParameter[]>;
+        private _parameters: KnockoutComputed<Brightmetrics.Reports.Interfaces.DTOs.IParameter[]>;
         private _userCanEditReports: boolean;
         public isExpanded: KnockoutObservable<boolean>;
         public parameterPopover: ParameterPopover;
@@ -185,15 +185,15 @@ namespace Brightmetrics.Reports.ViewModels {
         public recordSort: KnockoutComputed<boolean>;
         public isUsingRowSort: KnockoutComputed<boolean>;
         public sortIndex: KnockoutComputed<number>;
-        public sortField: KnockoutComputed<FieldHelper>;
-        public sortableFields: KnockoutComputed<FieldHelper[]>;
+        public sortField: KnockoutComputed<Brightmetrics.Reports.Interfaces.IReportFieldHelper>;
+        public sortableFields: KnockoutComputed<Brightmetrics.Reports.Interfaces.IReportFieldHelper[]>;
         public sortableFieldsAsOptions: KnockoutComputed<Array<IKoOption<number>>>;
         public sortDirectionOptions: KnockoutComputed<Array<IKoOption<number>>>;
         public sortDirection: KnockoutComputed<number>;
         public sortFieldTooltip: KnockoutComputed<string>;
         public isDetail: KnockoutComputed<boolean>;
         public canChangeSortDirectionForField: KnockoutComputed<boolean>;
-        public pillModifiers: KnockoutObservable<JQuery.PlainObject<BRIs.IPillModifier>>;
+        public pillModifiers: KnockoutObservable<JQuery.PlainObject<Brightmetrics.Reports.Interfaces.IPillModifier>>;
         public domContentChanged: KnockoutComputed<string>;
         public showAdvancedOptions: boolean;
         public showCollapseChartButton: boolean;
@@ -206,7 +206,7 @@ namespace Brightmetrics.Reports.ViewModels {
             super(props);
         }
 
-        private _fieldHelperToKoOption(fieldHelper: FieldHelper): IKoOption<string> {
+        private _fieldHelperToKoOption(fieldHelper: Brightmetrics.Reports.Interfaces.IReportFieldHelper): IKoOption<string> {
             return {
                 label: fieldHelper.label,
                 value: fieldHelper.id,
@@ -217,7 +217,7 @@ namespace Brightmetrics.Reports.ViewModels {
          * Gets field list for dimensions or values.
          * @param isDimension - Only collecting dimensions, not values.
          */
-        private _getFieldList(fields: FieldHelper[], isDimension: boolean) {
+        private _getFieldList(fields: Brightmetrics.Reports.Interfaces.IReportFieldHelper[], isDimension: boolean) {
             return _.chain(fields)
                 .filter((f) => isDimension ? f.isDimension : !f.isDimension)
                 .map(this._fieldHelperToKoOption)
@@ -226,22 +226,22 @@ namespace Brightmetrics.Reports.ViewModels {
         }
 
         private _getParamsAsFieldHelpers(
-            params: BRIDs.IParameter[],
-            allFields: FieldHelper[]): FieldHelper[] {
+            params: Brightmetrics.Reports.Interfaces.DTOs.IParameter[],
+            allFields: Brightmetrics.Reports.Interfaces.IReportFieldHelper[]): Brightmetrics.Reports.Interfaces.IReportFieldHelper[] {
 
             this._fieldHelperToParamMap = new WeakMap();
 
-            const fieldHelpers = [] as FieldHelper[];
+            const fieldHelpers = [] as Brightmetrics.Reports.Interfaces.IReportFieldHelper[];
 
             for (const param of params) {
-                const fieldHelperFinder = {} as FieldHelper;
+                const fieldHelperFinder = {} as Brightmetrics.Reports.Interfaces.IReportFieldHelper;
 
                 if ((param as any).dimensionIndex === void (0)) {
-                    const valParam = param as BRIDs.IParameterValue;
+                    const valParam = param as Brightmetrics.Reports.Interfaces.DTOs.IParameterValue;
                     fieldHelperFinder.index = valParam.factIndex;
                     fieldHelperFinder.isDimension = false;
                 } else {
-                    const dimParam = param as BRIDs.IParameterDimension;
+                    const dimParam = param as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension;
                     fieldHelperFinder.index = dimParam.dimensionIndex;
                     fieldHelperFinder.isDimension = true;
                 }
@@ -266,9 +266,9 @@ namespace Brightmetrics.Reports.ViewModels {
         }
 
         private _getFieldHelperAsParam(
-            fieldHelper: FieldHelper,
-            dsi: DSI,
-            ...additionalDsis: DSI[]): BRIDs.IParameter {
+            fieldHelper: Brightmetrics.Reports.Interfaces.IReportFieldHelper,
+            dsi: Brightmetrics.Interfaces.IDataSourceInstance,
+            ...additionalDsis: Brightmetrics.Interfaces.IDataSourceInstance[]): Brightmetrics.Reports.Interfaces.DTOs.IParameter {
 
             let paramMaybe = this._fieldHelperToParamMap.get(fieldHelper);
 
@@ -277,12 +277,12 @@ namespace Brightmetrics.Reports.ViewModels {
                     paramMaybe = {
                         dimensionIndex: fieldHelper.index,
                         label: fieldHelper.label,
-                    } as BRIDs.IParameterDimension;
+                    } as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension;
                 } else {
                     paramMaybe = {
                         factIndex: fieldHelper.index,
                         label: fieldHelper.label,
-                    } as BRIDs.IParameterValue;
+                    } as Brightmetrics.Reports.Interfaces.DTOs.IParameterValue;
                 }
             }
             // (`paramMaybe` will be defined now)
@@ -297,8 +297,8 @@ namespace Brightmetrics.Reports.ViewModels {
         }
 
         private _updateParameters(
-            current: FieldHelper[],
-            updated: FieldHelper[],
+            current: Brightmetrics.Reports.Interfaces.IReportFieldHelper[],
+            updated: Brightmetrics.Reports.Interfaces.IReportFieldHelper[],
             props: IFilterWidgetsProps) {
 
             const added = _.difference(updated, current);
@@ -334,14 +334,14 @@ namespace Brightmetrics.Reports.ViewModels {
         }
 
         private _filterMatchesParameter(
-            filter: BRIDs.IFilter | BRIDs.IFilterDetail,
-            parameter: BRIDs.IParameter): boolean {
+            filter: Brightmetrics.Reports.Interfaces.DTOs.IFilter | Brightmetrics.Reports.Interfaces.DTOs.IFilterDetail,
+            parameter: Brightmetrics.Reports.Interfaces.DTOs.IParameter): boolean {
 
             return Utils.ReportHelpers.isDimensionParameter(parameter) ?
-                (parameter as BRIDs.IParameterDimension).dimensionIndex ===
-                (filter as BRIDs.IFilter).dimensionIndex :
-                (parameter as BRIDs.IParameterValue).factIndex ===
-                (filter as BRIDs.IFilterDetail).factIndex;
+                (parameter as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension).dimensionIndex ===
+                (filter as Brightmetrics.Reports.Interfaces.DTOs.IFilter).dimensionIndex :
+                (parameter as Brightmetrics.Reports.Interfaces.DTOs.IParameterValue).factIndex ===
+                (filter as Brightmetrics.Reports.Interfaces.DTOs.IFilterDetail).factIndex;
         }
 
         private _createPillFactory(
@@ -350,7 +350,7 @@ namespace Brightmetrics.Reports.ViewModels {
 
             const allFields = props.fields!();
 
-            return (pillProps: BIs.IPillProps<string>) => {
+            return (pillProps: Brightmetrics.Interfaces.IPillProps<string>) => {
                 const fieldHelper = _.find(allFields, (fh) => {
                     return fh.id === pillProps.value;
                 });
@@ -362,7 +362,7 @@ namespace Brightmetrics.Reports.ViewModels {
                 const parameter = this._getFieldHelperAsParam(
                     fieldHelper,
                     props.dsi()!,
-                    ...props.additionalDsis()) as BRIDs.IParameterDimension;
+                    ...props.additionalDsis()) as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension;
 
                 const detailQueryFilters = _.reject(
                     Utils.ReportHelpers.convertParametersToFilters(props.parameters()),
@@ -406,10 +406,10 @@ namespace Brightmetrics.Reports.ViewModels {
         }
 
         private _allowableFields(
-            allFields: FieldHelper[]): FieldHelper[] {
-            const allowableFields = [] as FieldHelper[];
+            allFields: Brightmetrics.Reports.Interfaces.IReportFieldHelper[]): Brightmetrics.Reports.Interfaces.IReportFieldHelper[] {
+            const allowableFields = [] as Brightmetrics.Reports.Interfaces.IReportFieldHelper[];
             for (const field of allFields) {
-                const calculatedDimension = field.field! as BIs.ICalculatedDimension;
+                const calculatedDimension = field.field! as Brightmetrics.Interfaces.ICalculatedDimension;
                 if (calculatedDimension.AllowFilter !== false) {
                     allowableFields.push(field);
                 }
@@ -443,7 +443,7 @@ namespace Brightmetrics.Reports.ViewModels {
 
                     this._updateParameters(currentParamsAsFHs, updatedParamsAsFHs, props);
                 },
-                pillFactory: (pillProps: BIs.IPillProps<string>) =>
+                pillFactory: (pillProps: Brightmetrics.Interfaces.IPillProps<string>) =>
                     // TODO: This can just be "create pill".
                     this._createPillFactory(textFilterDialog, props)(pillProps),
                 presetListIndex: 0,
@@ -455,7 +455,7 @@ namespace Brightmetrics.Reports.ViewModels {
             textFilterDialog.open();
         }
 
-        private _getFirstRowLabelFromRows(rows: FieldHelper[]) {
+        private _getFirstRowLabelFromRows(rows: Brightmetrics.Reports.Interfaces.IReportFieldHelper[]) {
             if (rows.length > 0) {
                 return rows[0].label + " groupings";
             }
@@ -503,7 +503,7 @@ Limit the {criteria} shown on the report to a specified number of 'top' results`
                 // This fn makes sure we don't include the same filter in our
                 // request for getting dimension values as is the parameter we
                 // are getting dimension values for.
-                const withoutCurrentFilter = (parameter: BRIDs.IParameter) =>
+                const withoutCurrentFilter = (parameter: Brightmetrics.Reports.Interfaces.DTOs.IParameter) =>
                     _.reject(detailQueryFilters, (f) => this._filterMatchesParameter(f, parameter));
 
                 return this.filterWidgets(_.map(parameters, (p) => {
@@ -512,7 +512,7 @@ Limit the {criteria} shown on the report to a specified number of 'top' results`
                     const dimensionIndex: number | undefined = (p as any).dimensionIndex;
                     const fieldIndex = isFact ? factIndex! : dimensionIndex!;
                     let modifier = modifiers[Utils.encodeDimOrFactIndex(fieldIndex, isFact)];
-                    const removeParameter = (param: BRIDs.IParameter) => {
+                    const removeParameter = (param: Brightmetrics.Reports.Interfaces.DTOs.IParameter) => {
                         if (modifier !== void (0)) {
                             this.removeFilterPillModifier(fieldIndex, isFact);
                         }
@@ -547,7 +547,7 @@ Limit the {criteria} shown on the report to a specified number of 'top' results`
                             props.nonActionablePills ||
                             !!(p as any)._isNonActionable,
                         modifier,
-                        parameter: p as BRIDs.IParameter,
+                        parameter: p as Brightmetrics.Reports.Interfaces.DTOs.IParameter,
                         parameterPopover: this.parameterPopover,
                         removeParameter,
                         updateParameters,
@@ -693,7 +693,7 @@ totals of this column.
                         label: _.map(props.rows!(), (r) => r.label).join(" - "),
                         tooltip: "",
                         type: "None",
-                    } as FieldHelper].concat(props.values!());
+                    } as Brightmetrics.Reports.Interfaces.IReportFieldHelper].concat(props.values!());
                 });
 
                 this.canChangeSortDirectionForField = ko.computed(() =>
@@ -766,17 +766,17 @@ totals of this column.
                     let scale: string;
 
                     if (field.isDimension) {
-                        scale = (field.field as BIs.IDimension).DataType;
+                        scale = (field.field as Brightmetrics.Interfaces.IDimension).DataType;
                     } else {
-                        scale = (field.field as BIs.IFact).Scale;
+                        scale = (field.field as Brightmetrics.Interfaces.IFact).Scale;
                     }
 
                     switch (scale) {
-                        case BEs.DataType.Text:
+                        case Brightmetrics.Enums.DataType.Text:
                             options[0].label = "A - Z";
                             options[1].label = "Z - A";
                             break;
-                        case BEs.DataType.DateTime:
+                        case Brightmetrics.Enums.DataType.DateTime:
                             options[0].label = "Oldest - Newest";
                             options[1].label = "Newest - Oldest";
                             break;
@@ -830,7 +830,7 @@ totals of this column.
         }
 
         public addFilterPillModifier(
-            modifier: BRIs.IPillModifier,
+            modifier: Brightmetrics.Reports.Interfaces.IPillModifier,
             fieldIndex: number,
             isFact: boolean = false) {
 
@@ -853,19 +853,19 @@ totals of this column.
         }
 
         public convertDimensionToParameter(
-            fieldHelper: FieldHelper,
-            dsi: DSI): BRIDs.IParameter {
+            fieldHelper: Brightmetrics.Reports.Interfaces.IReportFieldHelper,
+            dsi: Brightmetrics.Interfaces.IDataSourceInstance): Brightmetrics.Reports.Interfaces.DTOs.IParameter {
 
             return this._getFieldHelperAsParam(fieldHelper, dsi);
         }
 
-        public getParameters(): BRIDs.IParameter[] {
+        public getParameters(): Brightmetrics.Reports.Interfaces.DTOs.IParameter[] {
             return _.toArray(this._parameters());
         }
 
         public tryGetAllowFilterFromReportField(fieldHelper: Interfaces.IReportFieldHelper): boolean {
             // Don't allow adding filters, with the AllowFilter property set to 'false'
-            const field = fieldHelper.field ? fieldHelper.field as BIs.ICalculatedDimension : null;
+            const field = fieldHelper.field ? fieldHelper.field as Brightmetrics.Interfaces.ICalculatedDimension : null;
             if (field && field.AllowFilter === false) {
                 return false;
             }
@@ -882,9 +882,9 @@ totals of this column.
                 let index: number;
 
                 if (fieldHelper.isDimension) {
-                    index = (p as BRIDs.IParameterDimension).dimensionIndex;
+                    index = (p as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension).dimensionIndex;
                 } else {
-                    index = (p as BRIDs.IParameterValue).factIndex;
+                    index = (p as Brightmetrics.Reports.Interfaces.DTOs.IParameterValue).factIndex;
                 }
 
                 return index === fieldHelper.index;
diff --git a/ts/Reports/ViewModels/page.ts b/ts/Reports/ViewModels/page.ts
index 7cca9e4..9784400 100644
--- a/ts/Reports/ViewModels/page.ts
+++ b/ts/Reports/ViewModels/page.ts
@@ -1,22 +1,7 @@
 /// <reference path="../../ViewModels/pagebase.ts" />
-
-namespace Brightmetrics.Reports {
-    // Declare all these here, for sub-namespaces to use
-    export import BVs = Brightmetrics.ViewModels;
-    export import BEs = Brightmetrics.Enums;
-    export import BIs = Brightmetrics.Interfaces;
-    export import BRVs = Brightmetrics.Reports.ViewModels;
-    export import BRCs = Brightmetrics.Reports.Classes;
-    export import BREs = Brightmetrics.Reports.Enums;
-    export import BRIs = Brightmetrics.Reports.Interfaces;
-    export import BRIDs = Brightmetrics.Reports.Interfaces.DTOs;
-    export type DSI = BIs.IDataSourceInstance;
-    export type FieldHelper = BRIs.IReportFieldHelper;
-}
-
 namespace Brightmetrics.Reports.ViewModels {
-    declare const templates: BRIDs.IReportTemplateUnsafe[];
-    declare const savedUserReports: Array<BRIDs.IReportSaved<BRIDs.IReportTemplateUnsafe>>;
+    declare const templates: Brightmetrics.Reports.Interfaces.DTOs.IReportTemplateUnsafe[];
+    declare const savedUserReports: Array<Brightmetrics.Reports.Interfaces.DTOs.IReportSaved<Brightmetrics.Reports.Interfaces.DTOs.IReportTemplateUnsafe>>;
 
     const layoutTypeLSKey = "last-report-layout-type";
 
@@ -30,11 +15,11 @@ namespace Brightmetrics.Reports.ViewModels {
     interface IReportPageProps {
         pageHasPendingChange: KnockoutObservable<boolean>;
         isPartnerTemplates?: boolean;
-        partnerTemplateSavedReports?: BRIDs.IReportTemplateUnsafe[];
-        partnerTemplateSystemReports?: BRIDs.IReportTemplateUnsafe[];
+        partnerTemplateSavedReports?: Brightmetrics.Reports.Interfaces.DTOs.IReportTemplateUnsafe[];
+        partnerTemplateSystemReports?: Brightmetrics.Reports.Interfaces.DTOs.IReportTemplateUnsafe[];
         stopNavigation?: KnockoutObservable<boolean>;
-        changeToReportData?: (main: BIs.IKoTemplateBinding, topbar?: BIs.IKoTemplateBinding) => void;
-        initialObjectType?: BREs.ReportObjectType;
+        changeToReportData?: (main: Brightmetrics.Interfaces.IKoTemplateBinding, topbar?: Brightmetrics.Interfaces.IKoTemplateBinding) => void;
+        initialObjectType?: Brightmetrics.Reports.Enums.ReportObjectType;
     }
 
     let preventQueueing = false;
@@ -87,11 +72,11 @@ namespace Brightmetrics.Reports.ViewModels {
      * There are some saved reports floating about that don't have
      * their `dataSourceInstance` property assigned any value.
      */
-    function hasMissingDsiBug(report: BRCs.Report): boolean {
-        return report.type !== BREs.ReportObjectType.System && report.template.dataSourceInstance == null;
+    function hasMissingDsiBug(report: Brightmetrics.Reports.Classes.Report): boolean {
+        return report.type !== Brightmetrics.Reports.Enums.ReportObjectType.System && report.template.dataSourceInstance == null;
     }
 
-    function getReportDsi(dsgid: number, dsiid?: number, dsid?: number): DSI | null {
+    function getReportDsi(dsgid: number, dsiid?: number, dsid?: number): Brightmetrics.Interfaces.IDataSourceInstance | null {
         if (dsid) {
             return Utils.DSI.findByDataSourceId(dsid, dsgid);
         }
@@ -111,38 +96,38 @@ namespace Brightmetrics.Reports.ViewModels {
         }
     }
 
-    export class Page extends BVs.PageBase {
+    export class Page extends Brightmetrics.ViewModels.PageBase {
         public isUsingTopbar: boolean;
-        public topbar: KnockoutObservable<BIs.IKoTemplateBinding>;
-        public main: KnockoutObservable<BIs.IKoTemplateBinding>;
-        public reports: KnockoutObservableArray<BRCs.Report>;
-        public cachedReport: KnockoutObservable<BRCs.Report>;
-        public selectedReport: KnockoutObservable<BRCs.Report>;
-        public selectedReportDSI: KnockoutComputed<DSI | null>;
-        public selectedReportAdditionalDsis: KnockoutComputed<DSI[]>;
+        public topbar: KnockoutObservable<Brightmetrics.Interfaces.IKoTemplateBinding>;
+        public main: KnockoutObservable<Brightmetrics.Interfaces.IKoTemplateBinding>;
+        public reports: KnockoutObservableArray<Brightmetrics.Reports.Classes.Report>;
+        public cachedReport: KnockoutObservable<Brightmetrics.Reports.Classes.Report>;
+        public selectedReport: KnockoutObservable<Brightmetrics.Reports.Classes.Report>;
+        public selectedReportDSI: KnockoutComputed<Brightmetrics.Interfaces.IDataSourceInstance | null>;
+        public selectedReportAdditionalDsis: KnockoutComputed<Brightmetrics.Interfaces.IDataSourceInstance[]>;
         public selectedReportId: KnockoutComputed<string>;
         public pageContentView: KnockoutObservable<Enums.PageContentView>;
-        public dataConnectionGroups: BIs.IDataSourceGroup[];
+        public dataConnectionGroups: Brightmetrics.Interfaces.IDataSourceGroup[];
         public dcgTabs: ITab[];
         public activeTabIndex: KnockoutObservable<number>;
-        public objectType: KnockoutObservable<BREs.ReportObjectType>;
-        public layoutType: KnockoutObservable<BREs.ReportLayoutType>;
+        public objectType: KnockoutObservable<Brightmetrics.Reports.Enums.ReportObjectType>;
+        public layoutType: KnockoutObservable<Brightmetrics.Reports.Enums.ReportLayoutType>;
         public editor: Editor;
         public allReports: AllReports;
         public allReportGroups: KnockoutComputed<string[]>;
         public dsgId: KnockoutComputed<number>;
         public allReportContainerHeight: KnockoutComputed<string>;
-        public partnerTemplateSavedReports: BRIDs.IReportTemplateUnsafe[];
-        public partnerTemplateSystemReports: BRIDs.IReportTemplateUnsafe[];
+        public partnerTemplateSavedReports: Brightmetrics.Reports.Interfaces.DTOs.IReportTemplateUnsafe[];
+        public partnerTemplateSystemReports: Brightmetrics.Reports.Interfaces.DTOs.IReportTemplateUnsafe[];
         public isPartnerTemplates: boolean;
         public stopNavigation: KnockoutComputed<boolean>;
-        public changeToReportData?: (main: BIs.IKoTemplateBinding, topbar?: BIs.IKoTemplateBinding) => void;
+        public changeToReportData?: (main: Brightmetrics.Interfaces.IKoTemplateBinding, topbar?: Brightmetrics.Interfaces.IKoTemplateBinding) => void;
 
         public constructor(props: IReportPageProps) {
             super(props);
         }
 
-        private _loadSavedReports(): BRCs.Report[] {
+        private _loadSavedReports(): Brightmetrics.Reports.Classes.Report[] {
             return _.chain(savedUserReports)
                 .map((saved) => {
 
@@ -153,15 +138,15 @@ namespace Brightmetrics.Reports.ViewModels {
                     }
 
                     // Shallow copy to ensure we don't change orig.
-                    const copy = { ...saved, template } as BRIDs.IReportSaved;
+                    const copy = { ...saved, template } as Brightmetrics.Reports.Interfaces.DTOs.IReportSaved;
 
-                    return BRCs.Report.fromSaved(copy);
+                    return Brightmetrics.Reports.Classes.Report.fromSaved(copy);
                 })
                 .reject((x) => x === null)
-                .value() as BRCs.Report[];
+                .value() as Brightmetrics.Reports.Classes.Report[];
         }
 
-        private _loadSystemReports(): BRCs.Report[] {
+        private _loadSystemReports(): Brightmetrics.Reports.Classes.Report[] {
             if (Utils.userCanEditReports(roleInfo.role.Permissions)) {
                 return _.chain(templates)
                     .map((system) => {
@@ -171,16 +156,16 @@ namespace Brightmetrics.Reports.ViewModels {
                             return null;
                         }
 
-                        return BRCs.Report.fromSystem(template);
+                        return Brightmetrics.Reports.Classes.Report.fromSystem(template);
                     })
                     .reject((x) => x === null)
-                    .value() as BRCs.Report[];
+                    .value() as Brightmetrics.Reports.Classes.Report[];
             } else {
                 return [];
             }
         }
 
-        private _loadPartnerTemplateSavedReports(): BRCs.Report[] {
+        private _loadPartnerTemplateSavedReports(): Brightmetrics.Reports.Classes.Report[] {
             return _.chain(this.partnerTemplateSavedReports)
                 .map((saved) => {
 
@@ -190,13 +175,13 @@ namespace Brightmetrics.Reports.ViewModels {
                         return null;
                     }
 
-                    return BRCs.Report.fromPartnerTemplate(template);
+                    return Brightmetrics.Reports.Classes.Report.fromPartnerTemplate(template);
                 })
                 .reject((x) => x === null)
-                .value() as BRCs.Report[];
+                .value() as Brightmetrics.Reports.Classes.Report[];
         }
 
-        private _loadPartnerTemplateSystemReports(): BRCs.Report[] {
+        private _loadPartnerTemplateSystemReports(): Brightmetrics.Reports.Classes.Report[] {
             return _.chain(this.partnerTemplateSystemReports)
                 .map((system) => {
                     const template = Utils.ReportHelpers.importReport(system);
@@ -205,15 +190,15 @@ namespace Brightmetrics.Reports.ViewModels {
                         return null;
                     }
 
-                    return BRCs.Report.fromSystem(template);
+                    return Brightmetrics.Reports.Classes.Report.fromSystem(template);
                 })
                 .reject((x) => x === null)
-                .value() as BRCs.Report[];
+                .value() as Brightmetrics.Reports.Classes.Report[];
         }
 
         private _navigateToAllReports(
             dsgId?: number,
-            roType?: BREs.ReportObjectType) {
+            roType?: Brightmetrics.Reports.Enums.ReportObjectType) {
 
             this.selectedReport(null);
             this.cachedReport(null);
@@ -236,7 +221,7 @@ namespace Brightmetrics.Reports.ViewModels {
 
             // TODO: <Do permission gating check here ... switch to Saved if restricted?>
 
-            const layoutType = localStorage.getItem(layoutTypeLSKey) as BREs.ReportLayoutType;
+            const layoutType = localStorage.getItem(layoutTypeLSKey) as Brightmetrics.Reports.Enums.ReportLayoutType;
 
             if (layoutType && this.layoutType() !== layoutType) {
                 this.layoutType(layoutType);
@@ -252,7 +237,7 @@ namespace Brightmetrics.Reports.ViewModels {
 
         private _tryNavigateToAllReports(
             dsgId?: number,
-            roType?: BREs.ReportObjectType) {
+            roType?: Brightmetrics.Reports.Enums.ReportObjectType) {
 
             if (!!this.stopNavigation()) {
                 return;
@@ -282,11 +267,11 @@ Are you sure you want to navigate away from this report? All of your changes wil
         private _navigateToReportEditor(
             dsgId: number,
             reportId: string,
-            exportableTemplate?: BRIs.IReportTemplateExport) {
+            exportableTemplate?: Brightmetrics.Reports.Interfaces.IReportTemplateExport) {
 
             let urlJsonPart = "";
-            let template: BRIDs.IReportTemplate;
-            let report: BRCs.Report;
+            let template: Brightmetrics.Reports.Interfaces.DTOs.IReportTemplate;
+            let report: Brightmetrics.Reports.Classes.Report;
             const hasJSON = exportableTemplate !== void (0);
 
             // Check to see if the DCG for `dsgId` exists.
@@ -310,7 +295,7 @@ Are you sure you want to navigate away from this report? All of your changes wil
                 template = Utils.ReportHelpers.createTemplateFromData(exportableTemplate!);
 
                 // Convert that into a report.
-                report = BRCs.Report.fromSystem(template);
+                report = Brightmetrics.Reports.Classes.Report.fromSystem(template);
 
                 this._updateFilterModifiers(exportableTemplate!.filters);
 
@@ -359,7 +344,7 @@ Are you sure you want to navigate away from this report? All of your changes wil
             router.navigate(`report/${dsgId}/${reportId}`);
         }
 
-        private _openReportInNewPage(exportableReport: BRIs.IReportTemplateExport) {
+        private _openReportInNewPage(exportableReport: Brightmetrics.Reports.Interfaces.IReportTemplateExport) {
             Utils.ReportHelpers.openReportInNewPage(exportableReport, this.dsgId());
         }
 
@@ -368,12 +353,12 @@ Are you sure you want to navigate away from this report? All of your changes wil
         // helper properties, then we can use that object to handle transporting
         // around filter modifier information -- and this logic can be moved to
         // `editor` where it belongs.
-        private _updateFilterModifiers(filters: BRIs.IFilterExport[]) {
+        private _updateFilterModifiers(filters: Brightmetrics.Reports.Interfaces.IFilterExport[]) {
             for (const filter of filters) {
                 if (filter.meta && filter.meta.isAutoGenerated) {
                     this.editor.parameters.addFilterPillModifier(
                         {
-                            cssClass: BREs.PillModifierCSSClass.AutoGenerated,
+                            cssClass: Brightmetrics.Reports.Enums.PillModifierCSSClass.AutoGenerated,
                             tooltip: "This filter was added by drilling into a summary report cell",
                         },
                         filter.dimensionIndex);
@@ -382,7 +367,7 @@ Are you sure you want to navigate away from this report? All of your changes wil
         }
 
         // TODO: Should we utilize the combined Delete Confirmation Dialog?  (Reports & Dashboards)
-        private _removeReportPromptThenAjax(report: BRCs.Report, reportHasOtherUsers?: boolean)
+        private _removeReportPromptThenAjax(report: Brightmetrics.Reports.Classes.Report, reportHasOtherUsers?: boolean)
             : JQuery.Thenable<unknown> {
 
             const rejectedPromise = $.Deferred().reject();
@@ -418,7 +403,7 @@ Please try again`),
 
             const always = () => reqInFlight(false);
 
-            if (report.accessLevel === BREs.AccessLevel.Admin) {
+            if (report.accessLevel === Brightmetrics.Reports.Enums.AccessLevel.Admin) {
                 if (reportHasOtherUsers) {
                     req = this._removeReportOrAccessPrompt(reportName, reqInFlight).then((label) => {
                         let _req: JQuery.Thenable<unknown> = rejectedPromise;
@@ -510,7 +495,7 @@ access, or do you want to remove this report for everyone?`),
          * Deletes `report` object from backend.
          * @param report
          */
-        private _removeReportAjax(report: BRCs.Report): JQuery.Thenable<unknown> {
+        private _removeReportAjax(report: Brightmetrics.Reports.Classes.Report): JQuery.Thenable<unknown> {
             return Utils.ajaxRequest("/UserReportTemplates/" + report.id, {
                 _realMethod: "DELETE",
             });
@@ -520,7 +505,7 @@ access, or do you want to remove this report for everyone?`),
          * Deletes `report template` object from backend.
          * @param report
          */
-        private _removeTemplateReportAjax(report: BRCs.Report): JQuery.Thenable<unknown> {
+        private _removeTemplateReportAjax(report: Brightmetrics.Reports.Classes.Report): JQuery.Thenable<unknown> {
             return Utils.ajaxRequest("/Companies/" + defCompanyId + "/ReportTemplates/" + report.id, {
                 _realMethod: "DELETE",
             });
@@ -530,7 +515,7 @@ access, or do you want to remove this report for everyone?`),
          * Removes the current user's access to `report`.
          * @param report
          */
-        private _removeReportAccessAjax(report: BRCs.Report): JQuery.Thenable<unknown> {
+        private _removeReportAccessAjax(report: Brightmetrics.Reports.Classes.Report): JQuery.Thenable<unknown> {
             return Utils.ajaxRequest(`/UserReportTemplates/${report.id}?context=remove_self`, {
                 userId: userInfo.UserId
             });
@@ -546,20 +531,20 @@ access, or do you want to remove this report for everyone?`),
          *
          * @param report
          */
-        private _removeReport(report: BRCs.Report): JQuery.Thenable<unknown> {
+        private _removeReport(report: Brightmetrics.Reports.Classes.Report): JQuery.Thenable<unknown> {
             let req: JQuery.Thenable<unknown>;
 
             if (this.isPartnerTemplates) {
                 req = this._removeTemplateReportAjax(report);
             } else {
-                if (report.accessLevel === BREs.AccessLevel.Admin) {
+                if (report.accessLevel === Brightmetrics.Reports.Enums.AccessLevel.Admin) {
                     // If admin, then check who else has access to this report.
                     req = Utils.ajaxRequest(`/UserReportTemplates/${report.id}?context=acl`)
                         .then((response: any) => {
                             let adminUserCount = 1;
 
                             if (response.success) {
-                                adminUserCount = _.countBy(response.users, "accessLevel")[BREs.AccessLevel.Admin] || 0;
+                                adminUserCount = _.countBy(response.users, "accessLevel")[Brightmetrics.Reports.Enums.AccessLevel.Admin] || 0;
                             }
 
                             return this._removeReportPromptThenAjax(report, adminUserCount > 1);
@@ -575,8 +560,8 @@ access, or do you want to remove this report for everyone?`),
             return req;
         }
 
-        private _createReport(dsi: DSI, reportType: BREs.ReportType): BRCs.Report {
-            const report = new BRCs.Report(dsi, reportType);
+        private _createReport(dsi: Brightmetrics.Interfaces.IDataSourceInstance, reportType: Brightmetrics.Reports.Enums.ReportType): Brightmetrics.Reports.Classes.Report {
+            const report = new Brightmetrics.Reports.Classes.Report(dsi, reportType);
 
             // TODO: Pass in to constructor?
             report.dataConnectionGroup = this.dsgId();
@@ -601,19 +586,19 @@ access, or do you want to remove this report for everyone?`),
 
             router.route(":dsgId/:reportType", (
                 dsgId: string,
-                reportType: BREs.ReportObjectType) => {
+                reportType: Brightmetrics.Reports.Enums.ReportObjectType) => {
 
                 this._tryNavigateToAllReports(+dsgId, reportType);
             });
 
             router.route("report/:dsgId/:reportId", (dsgId: string, reportId: string) => {
-                let exportableTemplate: BRIs.IReportTemplateExport | undefined;
+                let exportableTemplate: Brightmetrics.Reports.Interfaces.IReportTemplateExport | undefined;
                 let storedTemplate = localStorage.getItem(reportId);
 
                 // Check if the report is stored in the local storage.
                 if (storedTemplate) {
                     // Convert it to an exportable template
-                    exportableTemplate = JSON.parse(storedTemplate) as BRIs.IReportTemplateExport;
+                    exportableTemplate = JSON.parse(storedTemplate) as Brightmetrics.Reports.Interfaces.IReportTemplateExport;
 
                     // Remove it from localStorage
                     localStorage.removeItem(reportId);
@@ -624,7 +609,7 @@ access, or do you want to remove this report for everyone?`),
                     // Check if the report is stored in the session storage
                     storedTemplate = safeSessionStorage.getItem(reportId);
                     exportableTemplate = storedTemplate ?
-                        JSON.parse(storedTemplate) as BRIs.IReportTemplateExport :
+                        JSON.parse(storedTemplate) as Brightmetrics.Reports.Interfaces.IReportTemplateExport :
                         void 0;
                 }
 
@@ -637,7 +622,7 @@ access, or do you want to remove this report for everyone?`),
                 reportJSON: string) => {
 
                 try {
-                    const exportableTemplate = JSON.parse(reportJSON) as BRIs.IReportTemplateExport;
+                    const exportableTemplate = JSON.parse(reportJSON) as Brightmetrics.Reports.Interfaces.IReportTemplateExport;
                     safeSessionStorage.setItem(reportId, reportJSON);
 
                     this._navigateToReportEditor(+dsgId, reportId, exportableTemplate);
@@ -681,8 +666,8 @@ access, or do you want to remove this report for everyone?`),
             this.cachedReport = ko.observable();
             this.pageContentView = ko.observable(Enums.PageContentView.Reports);
             this.activeTabIndex = ko.observable(0);
-            this.objectType = ko.observable(props.initialObjectType || BREs.ReportObjectType.System);
-            this.layoutType = ko.observable(BREs.ReportLayoutType.Card);
+            this.objectType = ko.observable(props.initialObjectType || Brightmetrics.Reports.Enums.ReportObjectType.System);
+            this.layoutType = ko.observable(Brightmetrics.Reports.Enums.ReportLayoutType.Card);
 
             this.isUsingTopbar = true;
             this.topbar = ko.observable();
@@ -721,7 +706,7 @@ access, or do you want to remove this report for everyone?`),
 
                 if (report) {
                     const dsgid = this.dsgId();
-                    if (report.type === BREs.ReportObjectType.System || hasMissingDsiBug(report)) {
+                    if (report.type === Brightmetrics.Reports.Enums.ReportObjectType.System || hasMissingDsiBug(report)) {
                         return getReportDsi(dsgid, 0, report.template.dataSourceType);
                     }
                     // ...else if ReportObjectType=Saved
@@ -734,11 +719,11 @@ access, or do you want to remove this report for everyone?`),
             this.selectedReportAdditionalDsis = ko.pureComputed(() => {
                 const report = this.selectedReport();
                 const rdsi = this.selectedReportDSI();
-                const dsis: DSI[] = [];
+                const dsis: Brightmetrics.Interfaces.IDataSourceInstance[] = [];
 
                 if (report && rdsi) {
                     const dsgid = this.dsgId();
-                    if (report.type === BREs.ReportObjectType.System
+                    if (report.type === Brightmetrics.Reports.Enums.ReportObjectType.System
                         && report.template.additionalDataSourceTypes) {
                         for (const dsid of report.template.additionalDataSourceTypes) {
                             const dsi = getReportDsi(dsgid, 0, dsid);
@@ -746,7 +731,7 @@ access, or do you want to remove this report for everyone?`),
                                 dsis.push(dsi);
                             }
                         }
-                    } else if (report.type === BREs.ReportObjectType.Saved &&
+                    } else if (report.type === Brightmetrics.Reports.Enums.ReportObjectType.Saved &&
                         report.template.additionalDataSourceInstances) {
                         for (const dsiid of report.template.additionalDataSourceInstances) {
                             const dsi = getReportDsi(dsgid, dsiid);
@@ -786,19 +771,19 @@ access, or do you want to remove this report for everyone?`),
                 activeTabDSGID: ko.computed(() => this.dsgId()),
                 activeTabIndex: ko.computed(() => this.activeTabIndex()),
                 allReportGroups: this.allReportGroups,
-                createReport: (dsi: DSI, reportType: BREs.ReportType) => {
+                createReport: (dsi: Brightmetrics.Interfaces.IDataSourceInstance, reportType: Brightmetrics.Reports.Enums.ReportType) => {
                     const report = this._createReport(dsi, reportType);
                     const exportableReport = report.toJSON(false);
                     this._navigateToReportEditor(this.dsgId(), report.id, exportableReport);
                 },
                 dcgTabs: this.dcgTabs,
-                handleReportClick: (report: BRCs.Report) => {
+                handleReportClick: (report: Brightmetrics.Reports.Classes.Report) => {
                     this._navigateToReportEditor(this.dsgId(), report.id);
                 },
                 isVARTemplatesPage: !!props.isPartnerTemplates,
                 layoutType: ko.computed(() => this.layoutType()),
                 objectType: ko.computed(() => this.objectType()),
-                removeReport: (report: BRCs.Report) => this._removeReport(report),
+                removeReport: (report: Brightmetrics.Reports.Classes.Report) => this._removeReport(report),
                 reports: ko.computed(() => this.reports()),
                 selectedReport: this.selectedReport,
                 updateActiveTabIndex: (newIndex: number) => {
@@ -806,18 +791,18 @@ access, or do you want to remove this report for everyone?`),
 
                     this._tryNavigateToAllReports(this.dsgId());
                 },
-                updateLayoutType: (updated: BREs.ReportLayoutType) => {
+                updateLayoutType: (updated: Brightmetrics.Reports.Enums.ReportLayoutType) => {
                     this.layoutType(updated);
 
                     localStorage.setItem(layoutTypeLSKey, updated);
                 },
-                updateObjectType: (updated: BREs.ReportObjectType) => {
+                updateObjectType: (updated: Brightmetrics.Reports.Enums.ReportObjectType) => {
                     resetTableHeaderPosition();
                     this.objectType(updated);
 
                     this._tryNavigateToAllReports(this.dsgId(), updated);
                 },
-                updateReport: (updated: BRCs.Report) => {
+                updateReport: (updated: Brightmetrics.Reports.Classes.Report) => {
                     const orig = _.find(this.reports(), (r) => r.id === updated.id);
 
                     if (orig) {
@@ -828,7 +813,7 @@ access, or do you want to remove this report for everyone?`),
                 },
                 updateReportSchedules: (
                     reportId: string,
-                    schedules: BIs.IReportSchedule[]) => {
+                    schedules: Brightmetrics.Interfaces.IReportSchedule[]) => {
 
                     const report = _.find(this.reports(), (r) => r.id === reportId);
 
@@ -841,28 +826,28 @@ access, or do you want to remove this report for everyone?`),
             });
 
             this.editor = new Editor({
-                addReport: (report: BRCs.Report) => {
+                addReport: (report: Brightmetrics.Reports.Classes.Report) => {
                     this.reports.push(report);
                 },
                 allReportGroups: this.allReportGroups,
-                deleteReport: (report: BRCs.Report) => {
+                deleteReport: (report: Brightmetrics.Reports.Classes.Report) => {
                     this.reports.remove(report);
                 },
                 dsgId: this.dsgId,
                 dsi: this.selectedReportDSI,
                 additionalDsis: this.selectedReportAdditionalDsis,
-                goToReport: (report: BRCs.Report) => {
+                goToReport: (report: Brightmetrics.Reports.Classes.Report) => {
                     this._navigateToReportEditor(this.dsgId(), report.id);
                 },
                 isPartnerTemplates: !!props.isPartnerTemplates,
                 navigateBackToReports: () => {
                     this._tryNavigateToAllReports();
                 },
-                openReportInNewPage: (x: BRIs.IReportTemplateExport) => this._openReportInNewPage(x),
-                removeReport: (report: BRCs.Report) => this._removeReport(report),
+                openReportInNewPage: (x: Brightmetrics.Reports.Interfaces.IReportTemplateExport) => this._openReportInNewPage(x),
+                removeReport: (report: Brightmetrics.Reports.Classes.Report) => this._removeReport(report),
                 report: ko.computed(() => this.selectedReport()), // There was a copy here
                 revertReportToOriginalState: () => this.revertChangesToOriginalState(),
-                updateReport: (updated: BRCs.Report) => {
+                updateReport: (updated: Brightmetrics.Reports.Classes.Report) => {
                     const old = _.find(this.reports(), (r) => r.id === updated.id);
 
                     if (old) {
@@ -875,7 +860,7 @@ access, or do you want to remove this report for everyone?`),
                     this.selectedReport(updated);
                     this.cachedReport(ko.toJS(updated));
                 },
-                updateReportSchedules: (schedules: BIs.IReportSchedule[]) => {
+                updateReportSchedules: (schedules: Brightmetrics.Interfaces.IReportSchedule[]) => {
                     const selectedReport = this.selectedReport();
                     const cachedReport = this.cachedReport();
 
@@ -915,7 +900,7 @@ access, or do you want to remove this report for everyone?`),
             }
         }
 
-        public changePageViews(pageContentView: BREs.PageContentView) {
+        public changePageViews(pageContentView: Brightmetrics.Reports.Enums.PageContentView) {
             let topbar;
             let main;
             switch (pageContentView) {
diff --git a/ts/Reports/ViewModels/parameter.ts b/ts/Reports/ViewModels/parameter.ts
index 276cf6d..4cae9e9 100644
--- a/ts/Reports/ViewModels/parameter.ts
+++ b/ts/Reports/ViewModels/parameter.ts
@@ -8,17 +8,17 @@ namespace Brightmetrics.Reports.ViewModels {
     }
 
     interface IParameterProps {
-        dsi: KnockoutComputed<BIs.IDataSourceInstance | null>;
-        additionalDsis: KnockoutReadonlyObservable<BIs.IDataSourceInstance[]>;
-        parameter: BRIDs.IParameter;
-        detailQueryFilters: Array<BRIDs.IFilter | BRIDs.IFilterDetail>;
+        dsi: KnockoutComputed<Brightmetrics.Interfaces.IDataSourceInstance | null>;
+        additionalDsis: KnockoutReadonlyObservable<Brightmetrics.Interfaces.IDataSourceInstance[]>;
+        parameter: Brightmetrics.Reports.Interfaces.DTOs.IParameter;
+        detailQueryFilters: Array<Brightmetrics.Reports.Interfaces.DTOs.IFilter | Brightmetrics.Reports.Interfaces.DTOs.IFilterDetail>;
         multipleSelectOptions?: Partial<MultipleSelect.Interfaces.IMultipleSelectDialogProps<string>>;
     }
 
     export class Parameter extends ViewModel {
-        public filterOptions: KnockoutObservableArray<BREs.FilterOption>;
+        public filterOptions: KnockoutObservableArray<Brightmetrics.Reports.Enums.FilterOption>;
         public filters: JQuery.PlainObject<Filter>;
-        public selectedFilterOption: KnockoutObservable<BREs.FilterOption>;
+        public selectedFilterOption: KnockoutObservable<Brightmetrics.Reports.Enums.FilterOption>;
         public selectedFilterTemplate: KnockoutComputed<IKnockoutTemplateParams<Filter | null>>;
 
         public constructor(props: IParameterProps) {
@@ -26,7 +26,7 @@ namespace Brightmetrics.Reports.ViewModels {
         }
 
         private _getFilters(
-            filterOptions: BREs.FilterOption[],
+            filterOptions: Brightmetrics.Reports.Enums.FilterOption[],
             props: IParameterProps) {
 
             const filters = {} as JQuery.PlainObject<Filter>;
@@ -35,13 +35,13 @@ namespace Brightmetrics.Reports.ViewModels {
                 filters[opt] = new Filter({
                     currentFilterOption: ko.pureComputed(() =>
                         this.selectedFilterOption()),
-                    dataType: (props.parameter as BRIDs.IParameterDimension)._dataType!,
+                    dataType: (props.parameter as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension)._dataType!,
                     detailQueryFilters: props.detailQueryFilters,
                     dsiId: props.dsi()?.Id,
                     additionalDsis: props.additionalDsis,
                     filter: Utils.ReportHelpers.isDimensionParameter(props.parameter) ?
-                        (props.parameter as BRIDs.IParameterDimension).defaultFilters[opt]! :
-                        props.parameter as BRIDs.IParameterValue,
+                        (props.parameter as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension).defaultFilters[opt]! :
+                        props.parameter as Brightmetrics.Reports.Interfaces.DTOs.IParameterValue,
                     filterOption: opt,
                     multipleSelectOptions: props.multipleSelectOptions,
                 });
@@ -50,7 +50,7 @@ namespace Brightmetrics.Reports.ViewModels {
             return filters;
         }
 
-        private _getFilter(filterOption: BREs.FilterOption) {
+        private _getFilter(filterOption: Brightmetrics.Reports.Enums.FilterOption) {
             if (this.filters.hasOwnProperty(filterOption)) {
                 return this.filters[filterOption];
             }
@@ -59,7 +59,7 @@ namespace Brightmetrics.Reports.ViewModels {
         }
 
         private _getFilterTemplateName(
-            filterOption: BREs.FilterOption,
+            filterOption: Brightmetrics.Reports.Enums.FilterOption,
             isDateTime: boolean) {
 
             const commonPrefix = "parameter-field-";
@@ -68,20 +68,20 @@ namespace Brightmetrics.Reports.ViewModels {
 
             switch (filterOption) {
                 // New UI behavior: 'Selected' will umbrella option.
-                case BREs.FilterOption.Selected:
-                case BREs.FilterOption.One:
-                case BREs.FilterOption.Multiple:
+                case Brightmetrics.Reports.Enums.FilterOption.Selected:
+                case Brightmetrics.Reports.Enums.FilterOption.One:
+                case Brightmetrics.Reports.Enums.FilterOption.Multiple:
                     templateName = "multiple-select";
                     break;
-                case BREs.FilterOption.Range:
+                case Brightmetrics.Reports.Enums.FilterOption.Range:
                     if (isDateTime) {
                         templateName = commonPrefix + "date-range"; // Special case.
                     } else {
                         templateName = commonPrefix + filterOption.toLowerCase();
                     }
                     break;
-                case BREs.FilterOption.All:
-                case BREs.FilterOption.Relative:
+                case Brightmetrics.Reports.Enums.FilterOption.All:
+                case Brightmetrics.Reports.Enums.FilterOption.Relative:
                 default:
                     templateName = commonPrefix + filterOption.toLowerCase();
                     break;
@@ -96,7 +96,7 @@ namespace Brightmetrics.Reports.ViewModels {
             const filterOptions = Utils.ReportHelpers.getFilterOptionsFromParameter(parameter);
 
             this.selectedFilterOption = ko.observable(Utils.ReportHelpers.isDimensionParameter(parameter) &&
-                (parameter as BRIDs.IParameterDimension).defaultType || filterOptions[0]);
+                (parameter as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension).defaultType || filterOptions[0]);
             this.filters = this._getFilters(filterOptions, props);
             this.filterOptions = ko.observableArray(filterOptions);
         }
@@ -105,7 +105,7 @@ namespace Brightmetrics.Reports.ViewModels {
             this.selectedFilterTemplate = ko.pureComputed(() => {
                 const filterOption = this.selectedFilterOption();
                 const isDateTime = Utils.ReportHelpers.isDimensionParameter(props.parameter) &&
-                    props.parameter._dataType === BEs.DataType.DateTime;
+                    props.parameter._dataType === Brightmetrics.Enums.DataType.DateTime;
 
                 return {
                     data: this._getFilter(filterOption),
diff --git a/ts/Reports/ViewModels/parameterdialog.ts b/ts/Reports/ViewModels/parameterdialog.ts
index 72bd0c7..5d47df9 100644
--- a/ts/Reports/ViewModels/parameterdialog.ts
+++ b/ts/Reports/ViewModels/parameterdialog.ts
@@ -2,17 +2,17 @@
 
 namespace Brightmetrics.Reports.ViewModels {
     interface IParamaterDialogProps {
-        dsi: KnockoutComputed<BIs.IDataSourceInstance | null>;
-        additionalDsis: KnockoutReadonlyObservable<BIs.IDataSourceInstance[]>;
-        parameter: BRIDs.IParameter;
-        detailQueryFilters: Array<BRIDs.IFilter | BRIDs.IFilterDetail>;
+        dsi: KnockoutComputed<Brightmetrics.Interfaces.IDataSourceInstance | null>;
+        additionalDsis: KnockoutReadonlyObservable<Brightmetrics.Interfaces.IDataSourceInstance[]>;
+        parameter: Brightmetrics.Reports.Interfaces.DTOs.IParameter;
+        detailQueryFilters: Array<Brightmetrics.Reports.Interfaces.DTOs.IFilter | Brightmetrics.Reports.Interfaces.DTOs.IFilterDetail>;
         multipleSelectOptions?: Partial<MultipleSelect.Interfaces.IMultipleSelectDialogProps<string>>;
         hideClose?: boolean;
         onClose?(): void;
         onOkay?(): void;
     }
 
-    export class ParameterDialog extends BVs.DialogViewModel {
+    export class ParameterDialog extends Brightmetrics.ViewModels.DialogViewModel {
         public parameter: Parameter;
         public dialogName: string;
         public hideClose: boolean;
@@ -30,7 +30,7 @@ namespace Brightmetrics.Reports.ViewModels {
                 appendTo: "#page-content-dialog-area",
                 dialogContent: "#parameter-dialog-template",
                 modal: true,
-            } as BIs.IDialogViewModelOptions);
+            } as Brightmetrics.Interfaces.IDialogViewModelOptions);
         }
 
         public createEventHandlers(props: IParamaterDialogProps) {
@@ -49,11 +49,11 @@ namespace Brightmetrics.Reports.ViewModels {
                 const filter = this.parameter.filters[option].toJSON();
 
                 if (Utils.ReportHelpers.isDimensionParameter(props.parameter)) {
-                    const dimensionParameter = props.parameter as BRIDs.IParameterDimension;
-                    dimensionParameter.defaultFilters[option] = filter as BRIDs.IParameterFilter;
+                    const dimensionParameter = props.parameter as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension;
+                    dimensionParameter.defaultFilters[option] = filter as Brightmetrics.Reports.Interfaces.DTOs.IParameterFilter;
                     dimensionParameter.defaultType = option;
                 } else {
-                    _.extend(props.parameter, filter as BRIDs.IParameterValue);
+                    _.extend(props.parameter, filter as Brightmetrics.Reports.Interfaces.DTOs.IParameterValue);
                 }
 
                 if (props.onOkay !== void (0)) {
diff --git a/ts/Reports/ViewModels/parameterpopover.ts b/ts/Reports/ViewModels/parameterpopover.ts
index b267592..db425d2 100644
--- a/ts/Reports/ViewModels/parameterpopover.ts
+++ b/ts/Reports/ViewModels/parameterpopover.ts
@@ -8,11 +8,11 @@ namespace Brightmetrics.Reports.ViewModels {
     const defPosValue = "auto";
 
     interface IParameterPopoverProps {
-        dsi: KnockoutComputed<BIs.IDataSourceInstance | null>;
-        additionalDsis: KnockoutReadonlyObservable<BIs.IDataSourceInstance[]>;
+        dsi: KnockoutComputed<Brightmetrics.Interfaces.IDataSourceInstance | null>;
+        additionalDsis: KnockoutReadonlyObservable<Brightmetrics.Interfaces.IDataSourceInstance[]>;
         displayOnTopOfPill?: boolean;
         isDetail?: KnockoutComputed<boolean>;
-        displayNote?: (pf: BRIDs.IParameterFilter) => string;
+        displayNote?: (pf: Brightmetrics.Reports.Interfaces.DTOs.IParameterFilter) => string;
         msOptsForParam?: {
             [dimensionIndex: number]: Partial<MultipleSelect.Interfaces.IMultipleSelectDialogProps<string>>;
         };
@@ -20,12 +20,12 @@ namespace Brightmetrics.Reports.ViewModels {
     }
 
     export class ParameterPopover extends Brightmetrics.ViewModel {
-        private _parameter: BRIDs.IParameterDimension | BRIDs.IParameterValue;
-        private _otherFilters: Array<BRIDs.IFilter | BRIDs.IFilterDetail>;
+        private _parameter: Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension | Brightmetrics.Reports.Interfaces.DTOs.IParameterValue;
+        private _otherFilters: Array<Brightmetrics.Reports.Interfaces.DTOs.IFilter | Brightmetrics.Reports.Interfaces.DTOs.IFilterDetail>;
         public isOpen: KnockoutObservable<boolean>;
-        public filterOptions: KnockoutObservableArray<BREs.FilterOption>;
+        public filterOptions: KnockoutObservableArray<Brightmetrics.Reports.Enums.FilterOption>;
         public filters: KnockoutObservable<JQuery.PlainObject<Filter>>;
-        public selectedFilterOption: KnockoutObservable<BREs.FilterOption>;
+        public selectedFilterOption: KnockoutObservable<Brightmetrics.Reports.Enums.FilterOption>;
         public selectedFilterTemplateName: KnockoutComputed<string>;
         public selectedFilter: KnockoutComputed<Filter | null>;
         public left: KnockoutObservable<string>;
@@ -46,15 +46,15 @@ namespace Brightmetrics.Reports.ViewModels {
         }
 
         private _populateDimensionParameterData(
-            parameter: BRIDs.IParameterDimension,
-            otherFilters: Array<BRIDs.IFilter | BRIDs.IFilterDetail>) {
+            parameter: Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension,
+            otherFilters: Array<Brightmetrics.Reports.Interfaces.DTOs.IFilter | Brightmetrics.Reports.Interfaces.DTOs.IFilterDetail>) {
             this._parameter = parameter;
             this._otherFilters = otherFilters;
             this.selectedFilterOption(parameter.defaultType);
             this.filterOptions(Utils.ReportHelpers.getFilterOptionsFromParameter(parameter));
         }
 
-        private _populateValueParameterData(parameter: BRIDs.IParameterValue) {
+        private _populateValueParameterData(parameter: Brightmetrics.Reports.Interfaces.DTOs.IParameterValue) {
             this._parameter = parameter;
             this._otherFilters = [];
             const filterOptions = Utils.ReportHelpers.getFilterOptionsFromParameter(parameter);
@@ -66,7 +66,7 @@ namespace Brightmetrics.Reports.ViewModels {
             this.isOpen = ko.observable(false);
             this.filters = ko.observable({} as JQuery.PlainObject<Filter>);
             this.filterOptions = ko.observableArray();
-            this.selectedFilterOption = ko.observable(BREs.FilterOption.All)
+            this.selectedFilterOption = ko.observable(Brightmetrics.Reports.Enums.FilterOption.All)
                 // notify always because it needs to refresh the template data when switching between pills
                 // with the same filter.
                 .extend({ notify: "always" });
@@ -88,19 +88,19 @@ namespace Brightmetrics.Reports.ViewModels {
                         customListFetcher: props.customListFetcher,
                         dataType: Utils.ReportHelpers.isDimensionParameter(this._parameter) &&
                             this._parameter._dataType ||
-                            BEs.DataType.Text,
+                            Brightmetrics.Enums.DataType.Text,
                         detailQueryFilters: this._otherFilters,
                         dsi: props.dsi,
                         additionalDsis: props.additionalDsis,
                         dsiId: props.dsi()?.Id,
                         filter: Utils.ReportHelpers.isDimensionParameter(this._parameter) ?
-                            (this._parameter as BRIDs.IParameterDimension).defaultFilters[opt]! :
-                            this._parameter as BRIDs.IParameterValue,
+                            (this._parameter as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension).defaultFilters[opt]! :
+                            this._parameter as Brightmetrics.Reports.Interfaces.DTOs.IParameterValue,
                         filterOption: opt,
                         isDetail: props.isDetail,
                         displayNote: props.displayNote,
                         multipleSelectOptions: props.msOptsForParam &&
-                            props.msOptsForParam[(this._parameter as BRIDs.IParameterDimension).dimensionIndex],
+                            props.msOptsForParam[(this._parameter as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension).dimensionIndex],
                         setFilterOption: (filterOption) => {
                             this.selectedFilterOption(filterOption);
                         },
@@ -113,25 +113,25 @@ namespace Brightmetrics.Reports.ViewModels {
             this.selectedFilterTemplateName = ko.pureComputed(() => {
                 const filterOption = this.selectedFilterOption();
                 const isDateTime = Utils.ReportHelpers.isDimensionParameter(this._parameter) &&
-                    this._parameter._dataType === BEs.DataType.DateTime;
+                    this._parameter._dataType === Brightmetrics.Enums.DataType.DateTime;
                 let template: string;
 
                 switch (filterOption) {
                     // New UI behavior: Default these choices to 'Multiple'.
-                    case BREs.FilterOption.Selected:
-                    case BREs.FilterOption.One:
-                        template = BREs.FilterOption.Multiple.toLowerCase();
+                    case Brightmetrics.Reports.Enums.FilterOption.Selected:
+                    case Brightmetrics.Reports.Enums.FilterOption.One:
+                        template = Brightmetrics.Reports.Enums.FilterOption.Multiple.toLowerCase();
                         break;
-                    case BREs.FilterOption.Range:
+                    case Brightmetrics.Reports.Enums.FilterOption.Range:
                         if (isDateTime) {
                             template = "date-range"; // Special case.
                         } else {
                             template = filterOption.toLowerCase();
                         }
                         break;
-                    case BREs.FilterOption.All:
-                    case BREs.FilterOption.Multiple:
-                    case BREs.FilterOption.Relative:
+                    case Brightmetrics.Reports.Enums.FilterOption.All:
+                    case Brightmetrics.Reports.Enums.FilterOption.Multiple:
+                    case Brightmetrics.Reports.Enums.FilterOption.Relative:
                     default:
                         template = filterOption.toLowerCase();
                         break;
@@ -212,8 +212,8 @@ namespace Brightmetrics.Reports.ViewModels {
 
         public open(
             $pill: JQuery<HTMLElement>,
-            parameter: BRIDs.IParameter,
-            otherFilters: Array<BRIDs.IFilter | BRIDs.IFilterDetail>) {
+            parameter: Brightmetrics.Reports.Interfaces.DTOs.IParameter,
+            otherFilters: Array<Brightmetrics.Reports.Interfaces.DTOs.IFilter | Brightmetrics.Reports.Interfaces.DTOs.IFilterDetail>) {
             // Special case:
             // If we click over to another pill, we want this component to close
             // first because various subscribers depend on that happening
@@ -225,9 +225,9 @@ namespace Brightmetrics.Reports.ViewModels {
             }
 
             if (Utils.ReportHelpers.isDimensionParameter(parameter)) {
-                this._populateDimensionParameterData(parameter as BRIDs.IParameterDimension, otherFilters);
+                this._populateDimensionParameterData(parameter as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension, otherFilters);
             } else {
-                this._populateValueParameterData(parameter as BRIDs.IParameterValue);
+                this._populateValueParameterData(parameter as Brightmetrics.Reports.Interfaces.DTOs.IParameterValue);
             }
 
             this.isOpen(true);
diff --git a/ts/Reports/ViewModels/report-field-editor.ts b/ts/Reports/ViewModels/report-field-editor.ts
index 4fed9ec..ecd0f02 100644
--- a/ts/Reports/ViewModels/report-field-editor.ts
+++ b/ts/Reports/ViewModels/report-field-editor.ts
@@ -193,7 +193,7 @@ namespace Brightmetrics.Reports.ViewModels {
         template: string;
     }
 
-    interface IFieldHelperExtended extends FieldHelper {
+    interface IFieldHelperExtended extends Brightmetrics.Reports.Interfaces.IReportFieldHelper {
         tooltip: KnockoutComputed<string>;
         isGroup?: boolean;
         parentGroupLabel?: string;
@@ -222,7 +222,7 @@ namespace Brightmetrics.Reports.ViewModels {
 
     /** Convenience function for obtaining the grouping key of a field helper */
     function gkey(fieldHelper: IFieldHelperExtended): string {
-        const dim = fieldHelper.field as BIs.IDimension;
+        const dim = fieldHelper.field as Brightmetrics.Interfaces.IDimension;
         if (dim?.GroupingKey) {
             return dim.GroupingKey;
         }
@@ -272,24 +272,24 @@ namespace Brightmetrics.Reports.ViewModels {
     }
 
     interface IReportFieldEditorProps {
-        dsi: KnockoutComputed<DSI | null>;
-        additionalDsis: KnockoutObservableArray<DSI>;
-        report: KnockoutComputed<BRCs.Report | null>;
-        dimensionsByDsi: KnockoutComputed<Record<number, FieldHelper[]>>;
-        factsByDsi: KnockoutComputed<Record<number, FieldHelper[]>>;
-        parameters: KnockoutComputed<BRIDs.IParameter[]>;
-        addParameter: (p: BRIDs.IParameter) => void;
-        removeParameter: (p: BRIDs.IParameter) => void;
-        thresholds: KnockoutComputed<BRIDs.IReportThreshold[]>;
-        columns: KnockoutObservableArray<FieldHelper>;
-        rows: KnockoutObservableArray<FieldHelper>;
-        values: KnockoutObservableArray<FieldHelper>;
-        filterWidgets: BRVs.FilterWidgets;
+        dsi: KnockoutComputed<Brightmetrics.Interfaces.IDataSourceInstance | null>;
+        additionalDsis: KnockoutObservableArray<Brightmetrics.Interfaces.IDataSourceInstance>;
+        report: KnockoutComputed<Brightmetrics.Reports.Classes.Report | null>;
+        dimensionsByDsi: KnockoutComputed<Record<number, Brightmetrics.Reports.Interfaces.IReportFieldHelper[]>>;
+        factsByDsi: KnockoutComputed<Record<number, Brightmetrics.Reports.Interfaces.IReportFieldHelper[]>>;
+        parameters: KnockoutComputed<Brightmetrics.Reports.Interfaces.DTOs.IParameter[]>;
+        addParameter: (p: Brightmetrics.Reports.Interfaces.DTOs.IParameter) => void;
+        removeParameter: (p: Brightmetrics.Reports.Interfaces.DTOs.IParameter) => void;
+        thresholds: KnockoutComputed<Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold[]>;
+        columns: KnockoutObservableArray<Brightmetrics.Reports.Interfaces.IReportFieldHelper>;
+        rows: KnockoutObservableArray<Brightmetrics.Reports.Interfaces.IReportFieldHelper>;
+        values: KnockoutObservableArray<Brightmetrics.Reports.Interfaces.IReportFieldHelper>;
+        filterWidgets: Brightmetrics.Reports.ViewModels.FilterWidgets;
         initialSlideOutState?: SlideOutState;
         canSeeFieldEditor?: boolean;
-        addThreshold(toAdd: BRIDs.IReportThreshold): void;
-        updateThreshold(old: BRIDs.IReportThreshold, toUpdate: BRIDs.IReportThreshold): void;
-        removeThreshold(toRemove: BRIDs.IReportThreshold): void;
+        addThreshold(toAdd: Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold): void;
+        updateThreshold(old: Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold, toUpdate: Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold): void;
+        removeThreshold(toRemove: Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold): void;
     }
 
     namespace Widget {
@@ -487,8 +487,8 @@ namespace Brightmetrics.Reports.ViewModels {
         private _availableDimensions: ObservableArrayWidget;
         private _availableValues: ObservableArrayWidget;
         private _availableCommonDimensions: ObservableArrayWidget;
-        private _filters: KnockoutComputed<BRIDs.IParameter[]>;
-        private _thresholds: KnockoutComputed<BRIDs.IReportThreshold[]>;
+        private _filters: KnockoutComputed<Brightmetrics.Reports.Interfaces.DTOs.IParameter[]>;
+        private _thresholds: KnockoutComputed<Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold[]>;
         private _isSummaryReport: KnockoutComputed<boolean>;
         private _rowAddDropdownValue: KnockoutObservable<number | undefined>;
         private _columnAddDropdownValue: KnockoutObservable<number | undefined>;
@@ -498,7 +498,7 @@ namespace Brightmetrics.Reports.ViewModels {
         /** All values, regardless of data source */
         private _allPossibleValues: KnockoutComputed<IFieldHelperExtended[]>;
         private _dsgid: KnockoutComputed<number>;
-        private _primaryDsi: DSI | null;
+        private _primaryDsi: Brightmetrics.Interfaces.IDataSourceInstance | null;
         private _selectedDsiId: KnockoutObservable<number>;
         private _initializedFieldEditor: boolean;
         private _isCommonDimensionPredicate: (fh: IFieldHelperExtended) => boolean;
@@ -522,7 +522,7 @@ namespace Brightmetrics.Reports.ViewModels {
         public rowsWidget: Widget.ViewModel;
         public columnsWidget: Widget.ViewModel;
         public valuesWidget: Widget.ViewModel;
-        public additionalDsis: KnockoutObservableArray<DSI>;
+        public additionalDsis: KnockoutObservableArray<Brightmetrics.Interfaces.IDataSourceInstance>;
         public isSlideOutState_None: KnockoutComputed<boolean>;
         public isSlideOutState_Layout: KnockoutComputed<boolean>;
         public isSlideOutState_FieldsAndLayout: KnockoutComputed<boolean>;
@@ -535,7 +535,7 @@ namespace Brightmetrics.Reports.ViewModels {
             super(props);
         }
 
-        private _handleDsiConfigurationChange(changes: { added: DSI[], deleted: DSI[] }) {
+        private _handleDsiConfigurationChange(changes: { added: Brightmetrics.Interfaces.IDataSourceInstance[], deleted: Brightmetrics.Interfaces.IDataSourceInstance[] }) {
             if (changes.deleted.length) {
                 this._handleDsiConfigurationChangeDeleted(changes.deleted);
             } else if (changes.added.length) {
@@ -559,7 +559,7 @@ namespace Brightmetrics.Reports.ViewModels {
             return false;
         }
 
-        private _handleDsiConfigurationChangeDeleted(deleted: DSI[]) {
+        private _handleDsiConfigurationChangeDeleted(deleted: Brightmetrics.Interfaces.IDataSourceInstance[]) {
             const xdataRowsRemoved: string[] = []
             const xdataColsRemoved: string[] = []
             deleted.forEach((dsi) => {
@@ -681,9 +681,9 @@ namespace Brightmetrics.Reports.ViewModels {
         }
 
         private _initFieldEditorCore(
-            rows: BRIDs.IReportField[],
-            cols: BRIDs.IReportField[],
-            vals: BRIDs.IReportField[])
+            rows: Brightmetrics.Reports.Interfaces.DTOs.IReportField[],
+            cols: Brightmetrics.Reports.Interfaces.DTOs.IReportField[],
+            vals: Brightmetrics.Reports.Interfaces.DTOs.IReportField[])
             : void
         {
             const dsgid = this._dsgid();
@@ -705,7 +705,7 @@ namespace Brightmetrics.Reports.ViewModels {
 
                 if (!dsi) { continue; }
 
-                const dataField = Utils.DSI.getDimensionForIndex(dsi, index) as BIs.IDimension;
+                const dataField = Utils.DSI.getDimensionForIndex(dsi, index) as Brightmetrics.Interfaces.IDimension;
                 if (!dataField) { continue; }
 
                 const inCommon = hasMatchingField(availableCommonDimensions, index, dsi.Id, dataField.GroupingKey);
@@ -727,8 +727,8 @@ namespace Brightmetrics.Reports.ViewModels {
             this._availableCommonDimensions.removeAll(removeFromCommon);
             this._availableValues.removeAll(removeFromValues);
 
-            function getDsi(reportField: BRIDs.IReportField): DSI | null {
-                let dsi: DSI | null = null;
+            function getDsi(reportField: Brightmetrics.Reports.Interfaces.DTOs.IReportField): Brightmetrics.Interfaces.IDataSourceInstance | null {
+                let dsi: Brightmetrics.Interfaces.IDataSourceInstance | null = null;
                 if (reportField.dataSourceType) {
                     dsi = Utils.DSI.findByDataSourceId(reportField.dataSourceType, dsgid) ?? null;
                 }
@@ -759,7 +759,7 @@ namespace Brightmetrics.Reports.ViewModels {
             }
         }
 
-        private _initFieldEditor(report: BRCs.Report) {
+        private _initFieldEditor(report: Brightmetrics.Reports.Classes.Report) {
             this._initFieldEditorCore(report.template.rows, report.template.cols, report.template.values);
             this._initializedFieldEditor = true;
         }
@@ -850,7 +850,7 @@ namespace Brightmetrics.Reports.ViewModels {
                             tooltip: ko.pureComputed(() => isGroupExpanded() ?
                                 `Click to hide all <b>${groupName}</b> fields` :
                                 `Click to show all <b>${groupName}</b> fields`),
-                            type: BREs.ReportFieldType.None,
+                            type: Brightmetrics.Reports.Enums.ReportFieldType.None,
                         } as IFieldHelperExtended;
 
                         for (const field of fieldsForGroup) {
@@ -913,14 +913,14 @@ namespace Brightmetrics.Reports.ViewModels {
             props: IReportFieldEditorProps,
             target: HTMLElement | JQuery<HTMLElement>) {
 
-            const menuOpts: BIs.IMoreVertItems[] = [];
+            const menuOpts: Brightmetrics.Interfaces.IMoreVertItems[] = [];
             const dsi = props.dsi();
             if (!dsi) {
                 throw new Error("Unable to load morevert menu due to no available DSI");
             }
             const otherDsis = props.additionalDsis();
             const canDoOtfa = Utils.canDoOtfa(dsi);
-            const isDetailReport = props.report()!.template.reportType === BREs.ReportType.Detail;
+            const isDetailReport = props.report()!.template.reportType === Brightmetrics.Reports.Enums.ReportType.Detail;
 
             if (data.isDimension) {
                 const isPartOfRows = _.any(this.rows(), (f) => f === data);
@@ -953,7 +953,7 @@ namespace Brightmetrics.Reports.ViewModels {
                     if (existingThreshold) {
                         menuOpts.push({
                             click: () => {
-                                const thresholdDialog = new BRVs.EditDimensionThresholdDialog({
+                                const thresholdDialog = new Brightmetrics.Reports.ViewModels.EditDimensionThresholdDialog({
                                     dsiId: dsi.Id,
                                     fieldHelper: data,
                                     onApply: (newThreshold) =>
@@ -971,7 +971,7 @@ namespace Brightmetrics.Reports.ViewModels {
                         if (isDetailReport) {
                             menuOpts.push({
                                 click: () => {
-                                    const thresholdDialog = new BRVs.EditDimensionThresholdDialog({
+                                    const thresholdDialog = new Brightmetrics.Reports.ViewModels.EditDimensionThresholdDialog({
                                         dsiId: dsi.Id,
                                         fieldHelper: data,
                                         onApply: (newThreshold) =>
@@ -1009,7 +1009,7 @@ namespace Brightmetrics.Reports.ViewModels {
                     if (!this.isNonActionable(data)) {
                         menuOpts.push({
                             click: () => {
-                                const filter = _.find(this._filters(), (f: BRIDs.IParameterDimension) =>
+                                const filter = _.find(this._filters(), (f: Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension) =>
                                     f.dimensionIndex === data.index)!;
 
                                 props.removeParameter(filter);
@@ -1034,17 +1034,17 @@ namespace Brightmetrics.Reports.ViewModels {
                                 });
 
                                 const parameter = Utils.convertFieldHelperToParam(data, dsi, ...otherDsis) as
-                                    BRIDs.IParameterDimension;
+                                    Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension;
 
-                                if (parameter._dataType === BEs.DataType.DateTime) {
-                                    parameter.defaultType = BREs.FilterOption.Relative;
+                                if (parameter._dataType === Brightmetrics.Enums.DataType.DateTime) {
+                                    parameter.defaultType = Brightmetrics.Reports.Enums.FilterOption.Relative;
                                 // if the filter corresponds to a Detail Dimension or a Custom Detail Dimension
                                 // we want Matches to be the default value to avoid an early call to the backend.
                                 } else if (Utils.isDDIndex(parameter.dimensionIndex) ||
                                            Utils.isCDDIndex(parameter.dimensionIndex)) {
-                                    parameter.defaultType = BREs.FilterOption.Matches;
+                                    parameter.defaultType = Brightmetrics.Reports.Enums.FilterOption.Matches;
                                 } else {
-                                    parameter.defaultType = BREs.FilterOption.Selected;
+                                    parameter.defaultType = Brightmetrics.Reports.Enums.FilterOption.Selected;
                                 }
 
                                 props.addParameter(parameter);
@@ -1076,7 +1076,7 @@ namespace Brightmetrics.Reports.ViewModels {
                         if (existingThreshold) {
                             menuOpts.push({
                                 click: () => {
-                                    const thresholdDialog = new BRVs.EditThresholdDialog({
+                                    const thresholdDialog = new Brightmetrics.Reports.ViewModels.EditThresholdDialog({
                                         dsiId: dsi.Id,
                                         fieldHelper: data,
                                         onApply: (newThreshold) =>
@@ -1093,7 +1093,7 @@ namespace Brightmetrics.Reports.ViewModels {
                         } else {
                             menuOpts.push({
                                 click: () => {
-                                    const thresholdDialog = new BRVs.EditThresholdDialog({
+                                    const thresholdDialog = new Brightmetrics.Reports.ViewModels.EditThresholdDialog({
                                         dsiId: dsi.Id,
                                         fieldHelper: data,
                                         onApply: (newThreshold) =>
@@ -1123,7 +1123,7 @@ namespace Brightmetrics.Reports.ViewModels {
                         if (!this.isNonActionable(data)) {
                             menuOpts.push({
                                 click: () => {
-                                    const filter = _.find(this._filters(), (f: BRIDs.IParameterValue) =>
+                                    const filter = _.find(this._filters(), (f: Brightmetrics.Reports.Interfaces.DTOs.IParameterValue) =>
                                         f.factIndex === data.index)!;
 
                                     props.removeParameter(filter);
@@ -1137,7 +1137,7 @@ namespace Brightmetrics.Reports.ViewModels {
 
                         if (allowAsFilter && !isDetailReport) {
                             // Filtering in OTFA only works for detail facts.
-                            allowAsFilter = data.type === BREs.ReportFieldType.DetailFact;
+                            allowAsFilter = data.type === Brightmetrics.Reports.Enums.ReportFieldType.DetailFact;
                         }
 
                         if (allowAsFilter) {
@@ -1235,7 +1235,7 @@ namespace Brightmetrics.Reports.ViewModels {
                 otherDSIs: this.additionalDsis().map((d) => d.Id),
                 onUpdate: (dsiids) => {
                     const updated = dsiids.map(Utils.DSI.findById)
-                        .filter((d): d is DSI => d != null && d !== dsi);
+                        .filter((d): d is Brightmetrics.Interfaces.IDataSourceInstance => d != null && d !== dsi);
 
                     this.additionalDsis(updated);
 
@@ -1350,7 +1350,7 @@ namespace Brightmetrics.Reports.ViewModels {
                 });
             })()));
 
-            this.addSubscription(props.dsi.subscribe(whenAssigned<DSI>((_dsi) => {
+            this.addSubscription(props.dsi.subscribe(whenAssigned<Brightmetrics.Interfaces.IDataSourceInstance>((_dsi) => {
                 this._primaryDsi = _dsi;
                 this.selectedDsiId(_dsi.Id);
             })));
@@ -1385,7 +1385,7 @@ namespace Brightmetrics.Reports.ViewModels {
             });
 
             this.dsiOptions = ko.pureComputed(() => [props.dsi(), ...this.additionalDsis()]
-                .filter((dsi): dsi is DSI => dsi != null)
+                .filter((dsi): dsi is Brightmetrics.Interfaces.IDataSourceInstance => dsi != null)
                 .map((dsi, i) => ({
                     label: dsi.Name,
                     // Show lock icon next to primary data source option.
@@ -1474,7 +1474,7 @@ namespace Brightmetrics.Reports.ViewModels {
             this.domContentChanged = ko.computed(() => domContentChanged());
 
             this._isSummaryReport = ko.pureComputed(() =>
-                props.report()?.template.reportType === BREs.ReportType.Summary);
+                props.report()?.template.reportType === Brightmetrics.Reports.Enums.ReportType.Summary);
 
             this.addSubscription(this._rowAddDropdownValue.subscribe(
                 this._createAddDropdownFieldCallback(this.rows)));
@@ -1490,7 +1490,7 @@ namespace Brightmetrics.Reports.ViewModels {
 
             this._setAllSortableOptionFields(props);
 
-            this.addSubscription(this.additionalDsis.subscribe((changes: Array<KnockoutArrayChange<DSI>>) => {
+            this.addSubscription(this.additionalDsis.subscribe((changes: Array<KnockoutArrayChange<Brightmetrics.Interfaces.IDataSourceInstance>>) => {
                 this._handleDsiConfigurationChange({
                     deleted: changes.filter((c) => c.status === "deleted").map((c) => c.value),
                     added: changes.filter((c) => c.status === "added").map((c) => c.value),
@@ -1526,15 +1526,15 @@ namespace Brightmetrics.Reports.ViewModels {
 
         public hasFilter(field: IFieldHelperExtended) {
             return _.any(this._filters(), (f) => field.isDimension ?
-                (f as BRIDs.IParameterDimension).dimensionIndex === field.index :
-                (f as BRIDs.IParameterValue).factIndex === field.index);
+                (f as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension).dimensionIndex === field.index :
+                (f as Brightmetrics.Reports.Interfaces.DTOs.IParameterValue).factIndex === field.index);
         }
 
         public isNonActionable(field: IFieldHelperExtended) {
             const filter = _.find(this._filters(), (f) =>
                 field.isDimension ?
-                    +(f as BRIDs.IParameterDimension).dimensionIndex! === field.index :
-                    +(f as BRIDs.IParameterValue).factIndex! === field.index);
+                    +(f as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension).dimensionIndex! === field.index :
+                    +(f as Brightmetrics.Reports.Interfaces.DTOs.IParameterValue).factIndex! === field.index);
 
             return filter ? (filter as any)._isNonActionable : false;
         }
diff --git a/ts/Reports/ViewModels/report.ts b/ts/Reports/ViewModels/report.ts
index 704d630..9e71860 100644
--- a/ts/Reports/ViewModels/report.ts
+++ b/ts/Reports/ViewModels/report.ts
@@ -765,7 +765,7 @@ namespace Brightmetrics.Reports.ViewModels {
     */
 
     export interface IFieldHelper {
-        field: BIs.IField | null;
+        field: Brightmetrics.Interfaces.IField | null;
         index: number;
         isDimension: boolean;
         label: string;
@@ -773,19 +773,19 @@ namespace Brightmetrics.Reports.ViewModels {
 
     interface IRequestTriggers {
         columns: IFieldHelper[];
-        dsi: BIs.IDataSourceInstance | null;
+        dsi: Brightmetrics.Interfaces.IDataSourceInstance | null;
         isDetail: boolean;
         isTopXEnabled: boolean;
-        parameters: BRIDs.IParameter[];
+        parameters: Brightmetrics.Reports.Interfaces.DTOs.IParameter[];
         recordsOnly: boolean;
         recordSort: boolean;
         rows: IFieldHelper[];
         topX: number;
         values: IFieldHelper[];
-        thresholds: BRIDs.IReportThreshold[];
+        thresholds: Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold[];
     }
 
-    type ReportDataResponse = BIs.IReportSummaryDataResponse | BIs.IReportDetailDataResponse;
+    type ReportDataResponse = Brightmetrics.Interfaces.IReportSummaryDataResponse | Brightmetrics.Interfaces.IReportDetailDataResponse;
 
     // tslint:disable:max-classes-per-file
     export class TableLayoutHelper {
@@ -1084,7 +1084,7 @@ namespace Brightmetrics.Reports.ViewModels {
             }, 0);
         }
 
-        public static makeTotalValue(rowGroup: TableCell[][], index: number, field: BIs.IField): TableCell {
+        public static makeTotalValue(rowGroup: TableCell[][], index: number, field: Brightmetrics.Interfaces.IField): TableCell {
             let sum = 0;
             let count = 0;
             for (const row of rowGroup) {
@@ -1125,15 +1125,15 @@ namespace Brightmetrics.Reports.ViewModels {
     */
 
     interface IReportProps {
-        getTemplateSnapshot: () => BRIDs.IReportTemplate;
+        getTemplateSnapshot: () => Brightmetrics.Reports.Interfaces.DTOs.IReportTemplate;
         rows: KnockoutComputed<IFieldHelper[]>;
         columns: KnockoutComputed<IFieldHelper[]>;
         values: KnockoutComputed<IFieldHelper[]>;
-        dsi: KnockoutComputed<BIs.IDataSourceInstance | null>;
-        additionalDataSourceInstances: KnockoutComputed<BIs.IDataSourceInstance[]>;
+        dsi: KnockoutComputed<Brightmetrics.Interfaces.IDataSourceInstance | null>;
+        additionalDataSourceInstances: KnockoutComputed<Brightmetrics.Interfaces.IDataSourceInstance[]>;
         isDetail: KnockoutComputed<boolean>;
-        parameters: KnockoutComputed<BRIDs.IParameter[]>;
-        thresholds: KnockoutComputed<BRIDs.IReportThreshold[]>;
+        parameters: KnockoutComputed<Brightmetrics.Reports.Interfaces.DTOs.IParameter[]>;
+        thresholds: KnockoutComputed<Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold[]>;
         topX: KnockoutComputed<number>;
         isTopXEnabled: KnockoutComputed<boolean>;
         defaultSortAscending: KnockoutComputed<boolean>;
@@ -1200,7 +1200,7 @@ namespace Brightmetrics.Reports.ViewModels {
         public datarows: TableCell[][];
 
         public constructor(
-            private data: BIs.IReportSummaryData[],
+            private data: Brightmetrics.Interfaces.IReportSummaryData[],
             private reportTable: IPivotTable,
             private precision: number[],
             private sortColPath?: string[])
@@ -1241,7 +1241,7 @@ namespace Brightmetrics.Reports.ViewModels {
             this.totalColumnCount = subcolumnTotal(this.colgroups);
         }
 
-        private makeColumnGroup(depth: number, subdata: BIs.IReportSummaryData[], startIndex: number, path: string[]): IColumnGroup[] {
+        private makeColumnGroup(depth: number, subdata: Brightmetrics.Interfaces.IReportSummaryData[], startIndex: number, path: string[]): IColumnGroup[] {
             if (depth < this.colcount) {
                 const colgroups = _.groupBy(subdata, (d) => d.dimensions[depth + this.rowcount]);
                 // TODO: sort colgroups and then put TOTAL, if present, at the end
@@ -1339,7 +1339,7 @@ namespace Brightmetrics.Reports.ViewModels {
             }
         }
 
-        private makeDataRow(depth: number, subdata: BIs.IReportSummaryData[], path: string[]): TableCell[][] {
+        private makeDataRow(depth: number, subdata: Brightmetrics.Interfaces.IReportSummaryData[], path: string[]): TableCell[][] {
             const result = [] as TableCell[][];
             if (depth < this.rowcount) {
                 const rowgroups = _.groupBy(subdata, (d) => d.dimensions[depth]);
@@ -1438,13 +1438,13 @@ namespace Brightmetrics.Reports.ViewModels {
 
                         const value = d.values[i];
                         const field = this.reportTable.values[i].field;
-                        const scale = (field ? field.Scale : "") as BEs.ValueScale;
+                        const scale = (field ? field.Scale : "") as Brightmetrics.Enums.ValueScale;
                         let label: string;
                         let labelHasHTML = false;
                         if (value === null) {
                             label = "";
                         }
-                        else if (!BEs.ValueScale[scale]) {
+                        else if (!Brightmetrics.Enums.ValueScale[scale]) {
                             label = Utils.reportNumberFormat(
                                 value,
                                 this.precision[i],
@@ -1491,7 +1491,7 @@ namespace Brightmetrics.Reports.ViewModels {
         private findColumnGroup(
             colgroups: IColumnGroup[],
             depth: number,
-            data: BIs.IReportSummaryData)
+            data: Brightmetrics.Interfaces.IReportSummaryData)
             : IColumnGroup[] {
             if (depth >= this.colcount) {
                 return colgroups;
@@ -1503,7 +1503,7 @@ namespace Brightmetrics.Reports.ViewModels {
             return [];
         }
 
-        private getData(data: BIs.IReportSummaryData[], depth: number): BIs.IReportSummaryData | undefined {
+        private getData(data: Brightmetrics.Interfaces.IReportSummaryData[], depth: number): Brightmetrics.Interfaces.IReportSummaryData | undefined {
             const rowcount = this.rowcount;
             return _.find(data, (d) => {
                 const dimcount = d.dimensions.length;
@@ -1524,7 +1524,7 @@ namespace Brightmetrics.Reports.ViewModels {
             });
         }
 
-        private subTotal(data: BIs.IReportSummaryData[], depth: number): number | null {
+        private subTotal(data: Brightmetrics.Interfaces.IReportSummaryData[], depth: number): number | null {
             const totalData = this.getData(data, depth);
             if (totalData) {
                 // Within the total row, return the value corresponding to the sort index
@@ -1560,7 +1560,7 @@ namespace Brightmetrics.Reports.ViewModels {
             ReportRequest._instance = this;
         }
 
-        private _handleDetailQuery<T = BIs.IReportSummaryDataResponse | BIs.IReportDetailDataResponse>(
+        private _handleDetailQuery<T = Brightmetrics.Interfaces.IReportSummaryDataResponse | Brightmetrics.Interfaces.IReportDetailDataResponse>(
             request: JQuery.Thenable<{ commandId: string; detaggType?: string }>): JQuery.Thenable<T> {
             const defd = $.Deferred<T, string>();
 
@@ -1614,7 +1614,7 @@ namespace Brightmetrics.Reports.ViewModels {
             return defd.promise();
         }
 
-        private _handleSummaryOrOtfaResponse<T = BIs.IReportSummaryDataResponse | BIs.IReportDetailDataResponse>(
+        private _handleSummaryOrOtfaResponse<T = Brightmetrics.Interfaces.IReportSummaryDataResponse | Brightmetrics.Interfaces.IReportDetailDataResponse>(
             request: JQuery.Thenable<T>): JQuery.Thenable<T> {
             return request.then((response) => {
                 const commandId = (response as any).commandId as string;
@@ -1630,8 +1630,8 @@ namespace Brightmetrics.Reports.ViewModels {
             }, (xhr) => { throw xhr.responseJSON?.errormsg; });
         }
 
-        public send(dsi: BIs.IDataSourceInstance, template: BRIDs.IReportTemplate)
-            : JQuery.Thenable<BIs.IReportSummaryDataResponse | BIs.IReportDetailDataResponse> {
+        public send(dsi: Brightmetrics.Interfaces.IDataSourceInstance, template: Brightmetrics.Reports.Interfaces.DTOs.IReportTemplate)
+            : JQuery.Thenable<Brightmetrics.Interfaces.IReportSummaryDataResponse | Brightmetrics.Interfaces.IReportDetailDataResponse> {
             this._canDoOtfa = Utils.canDoOtfa(dsi);
             this._isDetailQuery = template.reportType === Enums.ReportType.Detail;
 
@@ -1639,10 +1639,10 @@ namespace Brightmetrics.Reports.ViewModels {
 
             if (this._isDetailQuery) {
                 this._requestInFlight = request = Utils.ReportHelpers.getReportDetailData(dsi.Id, template, "exact");
-                request = this._handleDetailQuery<BIs.IReportDetailDataResponse>(request);
+                request = this._handleDetailQuery<Brightmetrics.Interfaces.IReportDetailDataResponse>(request);
             } else {
                 this._requestInFlight = request = Utils.ReportHelpers.getReportSummaryData(dsi.Id, template, "exact");
-                request = this._handleSummaryOrOtfaResponse<BIs.IReportSummaryDataResponse>(request);
+                request = this._handleSummaryOrOtfaResponse<Brightmetrics.Interfaces.IReportSummaryDataResponse>(request);
             }
 
             return request;
@@ -1674,10 +1674,10 @@ namespace Brightmetrics.Reports.ViewModels {
         private _tableColumnSortField: KnockoutComputed<IFieldHelper>;
         private _sortIndexesAreOutOfSync: boolean;
         private _fixedCellContent: FixedCellContent;
-        private _getTemplateSnapshot: () => BRIDs.IReportTemplate;
+        private _getTemplateSnapshot: () => Brightmetrics.Reports.Interfaces.DTOs.IReportTemplate;
         private _dsgId: KnockoutComputed<number | null>;
         private _isWaitingForUserConfirmation = false;
-        private _parameterErrorExplanationTemplate: (data: { parameters: BRIDs.IParameter[] }) => string;
+        private _parameterErrorExplanationTemplate: (data: { parameters: Brightmetrics.Reports.Interfaces.DTOs.IParameter[] }) => string;
         /**
          * The report has an error, but that error is *not* preventing it from
          * being saved.
@@ -1685,7 +1685,7 @@ namespace Brightmetrics.Reports.ViewModels {
          * For example, when its filters are invalid.
          */
         private _hasSavableError: KnockoutObservable<boolean>;
-        private _lastDummySummaryData: BIs.IReportSummaryDataResponse;
+        private _lastDummySummaryData: Brightmetrics.Interfaces.IReportSummaryDataResponse;
         private _reportName: KnockoutReadonlyObservable<string>;
 
         public requiresDetailAggregation: KnockoutComputed<boolean>;
@@ -1707,15 +1707,15 @@ namespace Brightmetrics.Reports.ViewModels {
         public rows: KnockoutComputed<IFieldHelper[]>;
         public columns: KnockoutComputed<IFieldHelper[]>;
         public values: KnockoutComputed<IFieldHelper[]>;
-        public parameters: KnockoutComputed<BRIDs.IParameter[]>;
-        public thresholds: KnockoutComputed<BRIDs.IReportThreshold[]>;
+        public parameters: KnockoutComputed<Brightmetrics.Reports.Interfaces.DTOs.IParameter[]>;
+        public thresholds: KnockoutComputed<Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold[]>;
         public topX: KnockoutComputed<number>;
         public isTopXEnabled: KnockoutComputed<boolean>;
         public recordsOnly: KnockoutComputed<boolean>;
         public recordSort: KnockoutComputed<boolean>;
         public defaultSortIndex: KnockoutComputed<number>;
         public defaultSortAscending: KnockoutComputed<boolean>;
-        public dsi: KnockoutComputed<BIs.IDataSourceInstance | null>;
+        public dsi: KnockoutComputed<Brightmetrics.Interfaces.IDataSourceInstance | null>;
         public isDetail: KnockoutComputed<boolean>;
         public isDetailLike: KnockoutComputed<boolean>;
         public validationErrorText: KnockoutComputed<string>;
@@ -1730,7 +1730,7 @@ namespace Brightmetrics.Reports.ViewModels {
         public autoRefreshTooltip: KnockoutComputed<string>;
 
         public updateId: string;
-        public lastSummaryData: BIs.IReportSummaryDataResponse;
+        public lastSummaryData: Brightmetrics.Interfaces.IReportSummaryDataResponse;
         /**
          * Since we don't have a way to go back in time, this is our means for
          * figuring out what the "definition" (rows, cols, vals) was for the
@@ -1740,7 +1740,7 @@ namespace Brightmetrics.Reports.ViewModels {
          */
         public lastSummaryDataDef: string[];
 
-        public lastDetailData: BIs.IReportDetailDataResponse | null = null;
+        public lastDetailData: Brightmetrics.Interfaces.IReportDetailDataResponse | null = null;
         public decimalPrecisionByValueIndex: number[];
         public runReport_rateLimited: () => void;
         public detailQueryDialog: DetailQueryDialog;
@@ -1891,7 +1891,7 @@ namespace Brightmetrics.Reports.ViewModels {
             }
         }
 
-        private _getFixedCellContentOptions_LazyLoadRows(): BRIs.IFixedCellContentOptions {
+        private _getFixedCellContentOptions_LazyLoadRows(): Brightmetrics.Reports.Interfaces.IFixedCellContentOptions {
             return {
                 cellRectGetter: ($el: JQuery<HTMLElement>) => {
                     const rowspan = parseInt($el.data(TableCellDataKey.LazyFCCRowspanHelperKey), 10);
@@ -1971,7 +1971,7 @@ tr >
             };
         }
 
-        private _getFixedCellContentOptions_Native(): BRIs.IFixedCellContentOptions {
+        private _getFixedCellContentOptions_Native(): Brightmetrics.Reports.Interfaces.IFixedCellContentOptions {
             return {
                 fixedCellSelector: ".is-rowspan--start",
                 scrollParentRectPreprocessor: (rect: Brightmetrics.Interfaces.IRect) => {
@@ -1982,7 +1982,7 @@ tr >
             };
         }
 
-        private _getFixedCellContentOptions(): BRIs.IFixedCellContentOptions {
+        private _getFixedCellContentOptions(): Brightmetrics.Reports.Interfaces.IFixedCellContentOptions {
             switch (this.renderingStrategy()) {
                 case ReportRenderingStrategy.Native:
                     return this._getFixedCellContentOptions_Native();
@@ -2075,7 +2075,7 @@ tr >
             }
         }
 
-        private _exportReport(exportOptions: BRIs.IExportReport) {
+        private _exportReport(exportOptions: Brightmetrics.Reports.Interfaces.IExportReport) {
             const exportForm = Utils.getOrCreateExportForm();
             exportForm.find("input[name='dataSourceId']").val(`y${exportOptions.dsiId}`);
             exportForm.find("input[name='reportType']").val(exportOptions.reportType);
@@ -2092,7 +2092,7 @@ tr >
             exportForm.submit();
         }
 
-        private _getLastSummaryData(): BIs.IReportSummaryDataResponse {
+        private _getLastSummaryData(): Brightmetrics.Interfaces.IReportSummaryDataResponse {
             if (this.requiresDetailAggregation.peek() && this._willBeOutOfSync) {
                 return this._lastDummySummaryData;
             }
@@ -2100,12 +2100,12 @@ tr >
         }
 
         private exportTemplate(
-            reportSnapshot: BRIDs.IReportTemplate,
-            _export: BIs.IExportDialogOptions) {
-            const template: BRIDs.IReportTemplateUnsafe & {
+            reportSnapshot: Brightmetrics.Reports.Interfaces.DTOs.IReportTemplate,
+            _export: Brightmetrics.Interfaces.IExportDialogOptions) {
+            const template: Brightmetrics.Reports.Interfaces.DTOs.IReportTemplateUnsafe & {
                 defaultSortPath: unknown[];
-                detailFilters: BRIDs.IFilterDetail[];
-                filters: BRIDs.IFilter[];
+                detailFilters: Brightmetrics.Reports.Interfaces.DTOs.IFilterDetail[];
+                filters: Brightmetrics.Reports.Interfaces.DTOs.IFilter[];
                 timedetail: string;
                 timezone: string;
                 title: string;
@@ -2929,10 +2929,10 @@ The following filters are invalid:
             });
         }
 
-        public getReportTimeRangeFromParams(params: BRIDs.IParameterDimension[]) {
+        public getReportTimeRangeFromParams(params: Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension[]) {
             const dateRangeFilter = _.find(params, Utils.ReportHelpers.isTimeRangeFilter);
 
-            if (!dateRangeFilter || dateRangeFilter.defaultType === BREs.FilterOption.All) {
+            if (!dateRangeFilter || dateRangeFilter.defaultType === Brightmetrics.Reports.Enums.FilterOption.All) {
                 return "All time";
             }
 
@@ -3064,7 +3064,7 @@ The following filters are invalid:
             return tableRowsWithTotals;
         }
 
-        public detailTable_createLayout(providedData?: BIs.IReportDetailDataResponse) {
+        public detailTable_createLayout(providedData?: Brightmetrics.Interfaces.IReportDetailDataResponse) {
             const rows = this.rows();
             const cols = this.columns();
             const values = this.values();
@@ -3084,7 +3084,7 @@ The following filters are invalid:
                     let label: string;
                     let labelHasHTML = false;
                     const data = {} as JQuery.PlainObject;
-                    const scale = (all[i].field as any).Scale as BEs.ValueScale;
+                    const scale = (all[i].field as any).Scale as Brightmetrics.Enums.ValueScale;
                     const value = c;
 
                     if (value === null) {
@@ -3101,7 +3101,7 @@ The following filters are invalid:
                         } else {
                             label = String(value);
                         }
-                    } else if (BEs.ValueScale[scale] === void (0)) {
+                    } else if (Brightmetrics.Enums.ValueScale[scale] === void (0)) {
                         label = Utils.reportNumberFormat(
                             value,
                             2, // TODO: Get precision for detail reports.
@@ -3310,7 +3310,7 @@ The following filters are invalid:
             this.renderDetailReport({
                 columns: allNames.concat("dummyId"),
                 data: newBodyRows,
-            } as BIs.IReportDetailDataResponse);
+            } as Brightmetrics.Interfaces.IReportDetailDataResponse);
         }
 
         public detailTable_renderDummyTable() {
@@ -3512,7 +3512,7 @@ The following filters are invalid:
 
                             // Make copy of data so we can create the subtotal
                             // row for our previous row since it has real data.
-                            return ko.toJS(dataRow) as BIs.IReportSummaryData;
+                            return ko.toJS(dataRow) as Brightmetrics.Interfaces.IReportSummaryData;
                         }).forEach((dataRow) => {
 
                             // Here we splice in our previous data's new
@@ -3543,7 +3543,7 @@ The following filters are invalid:
                     });
                 });
 
-            const totalColumnRows: BIs.IReportSummaryData[] = [];
+            const totalColumnRows: Brightmetrics.Interfaces.IReportSummaryData[] = [];
 
             // Handle extending columns and values with fake data.
             _.forEach(data, (row) => {
@@ -3568,7 +3568,7 @@ The following filters are invalid:
 
                     for (let i = replaceAt; i < length; i++) {
                         // Clone the row we just inserted the new column into
-                        const totalColumnRow = ko.toJS(row) as BIs.IReportSummaryData;
+                        const totalColumnRow = ko.toJS(row) as Brightmetrics.Interfaces.IReportSummaryData;
 
                         // This loop logarithmically adds the TOTAL columns of
                         // the current column and all nested columns.
@@ -3602,13 +3602,13 @@ The following filters are invalid:
 
         public updateCache(data: ReportDataResponse, currentRequestId?: string) {
             if (this.isDetail()) {
-                this.lastDetailData = data as BIs.IReportDetailDataResponse;
+                this.lastDetailData = data as Brightmetrics.Interfaces.IReportDetailDataResponse;
 
                 this.isOutOfSync(false);
             } else {
                 this.lastSummaryDataDef = lastSummaryDataDefByRequestId[currentRequestId ?? this.updateId];
                 lastSummaryDataDefByRequestId = {}; // Purge to avoid data accum.
-                this.lastSummaryData = data as BIs.IReportSummaryDataResponse;
+                this.lastSummaryData = data as Brightmetrics.Interfaces.IReportSummaryDataResponse;
 
                 if (this.isDetailLike()) {
                     this.isOutOfSync(false);
@@ -3676,7 +3676,7 @@ The following filters are invalid:
 
             const currentRequestId = this.updateId;
             const timeRange = this.getReportTimeRangeFromParams(
-                this.parameters() as BRIDs.IParameterDimension[]);
+                this.parameters() as Brightmetrics.Reports.Interfaces.DTOs.IParameterDimension[]);
 
             lastSummaryDataDefByRequestId[currentRequestId] = this.rows.peek()
                 .concat(this.columns.peek())
@@ -3779,7 +3779,7 @@ The following filters are invalid:
             this._tableBodyRows(layout.bodyRows);
         }
 
-        public renderDetailReport(providedData?: BIs.IReportDetailDataResponse) {
+        public renderDetailReport(providedData?: Brightmetrics.Interfaces.IReportDetailDataResponse) {
             const layout = this.detailTable_createLayout(providedData);
 
             layout.bodyRows = this.detailTable_sortRowsInner(layout.bodyRows);
@@ -3819,7 +3819,7 @@ The following filters are invalid:
         }
 
         /** Get the data used to render the table */
-        public getReportTableData(table: BRIDs.IReportTemplate) {
+        public getReportTableData(table: Brightmetrics.Reports.Interfaces.DTOs.IReportTemplate) {
             // If the table is out of sync let the print preview page get a new dataset
             if (this.isOutOfSync() || !this.reportTableData) {
                 return null;
@@ -3831,7 +3831,7 @@ The following filters are invalid:
 
             const tableLabels = table.rows.concat(table.cols).concat(table.values)
                 .map((fh) => (fh as IFieldHelper).label);
-            const dataLabels = (this.reportTableData as BIs.IReportDetailDataResponse)
+            const dataLabels = (this.reportTableData as Brightmetrics.Interfaces.IReportDetailDataResponse)
                 .columns
                 .slice(0, -1); // `-1` to omit detail ID column.
 
@@ -3845,7 +3845,7 @@ The following filters are invalid:
 
             // Make copy of response data just in case user wants to re-add
             // any removed field(s).
-            const data = ko.toJS(this.reportTableData) as BIs.IReportDetailDataResponse;
+            const data = ko.toJS(this.reportTableData) as Brightmetrics.Interfaces.IReportDetailDataResponse;
 
             dataLabels.forEach((dataLabel, i) => {
                 const fieldWasRemoved = !_.any(tableLabels, (label) => label === dataLabel);
@@ -3863,8 +3863,8 @@ The following filters are invalid:
             this._ignoreTriggers = ignore;
         }
 
-        public getReportTable(): BRIDs.IReportTemplate {
-            const template: BRIDs.IReportTemplateUnsafe = {
+        public getReportTable(): Brightmetrics.Reports.Interfaces.DTOs.IReportTemplate {
+            const template: Brightmetrics.Reports.Interfaces.DTOs.IReportTemplateUnsafe = {
                 cols: this.columns().map((c) => ({ dimensionIndex: c.index, label: c.label })),
                 defaultSortAscending: this.defaultSortAscending(),
                 defaultSortIndex: this.defaultSortIndex(),
@@ -3873,7 +3873,7 @@ The following filters are invalid:
                 options: this.parameters(),
                 recordSort: this.recordSort(),
                 recordsOnly: this.recordsOnly(),
-                reportType: this.isDetail() ? BREs.ReportType.Detail : BREs.ReportType.Summary,
+                reportType: this.isDetail() ? Brightmetrics.Reports.Enums.ReportType.Detail : Brightmetrics.Reports.Enums.ReportType.Summary,
                 rows: this.rows().map((r) => ({ dimensionIndex: r.index, label: r.label })),
                 topX: this.topX(),
                 values: this.values().map((v) => ({ valueIndex: v.index, label: v.label, scale: v.field!.Scale })),
diff --git a/ts/Reports/ViewModels/reporteditortopbar.ts b/ts/Reports/ViewModels/reporteditortopbar.ts
index c7abfd0..caa6199 100644
--- a/ts/Reports/ViewModels/reporteditortopbar.ts
+++ b/ts/Reports/ViewModels/reporteditortopbar.ts
@@ -1,17 +1,10 @@
 // jshint ignore: start
 
 namespace Brightmetrics.Reports.ViewModels {
-    import BVs = Brightmetrics.ViewModels;
-    import BIs = Brightmetrics.Interfaces;
-    import BEs = Brightmetrics.Enums;
-    import BRIs = Brightmetrics.Reports.Interfaces;
-    import BRIDs = Brightmetrics.Reports.Interfaces.DTOs;
-    import BREs = Brightmetrics.Reports.Enums;
-    import BRCs = Brightmetrics.Reports.Classes;
     import Utils = Brightmetrics.Utils;
     import BDDVs = Brightmetrics.DashboardDetail.ViewModels;
 
-    declare const roleInfo: { role: { Permissions: BIs.IBrightPermission[] } };
+    declare const roleInfo: { role: { Permissions: Brightmetrics.Interfaces.IBrightPermission[] } };
 
     const inlineEditorCSSSelector = ".js-inline-editor";
     const inlineTextCSSSelector = ".js-inline-text";
@@ -37,7 +30,7 @@ namespace Brightmetrics.Reports.ViewModels {
         ReportName,
     }
 
-    interface IMoreVertItemHelper extends BIs.IMoreVertItems {
+    interface IMoreVertItemHelper extends Brightmetrics.Interfaces.IMoreVertItems {
         forDirtyStateOnly: boolean;
         forReportCreatorsOnly: boolean;
         forSavedReportsOnly: boolean;
@@ -50,35 +43,35 @@ namespace Brightmetrics.Reports.ViewModels {
     interface IRequestResponse {
         success: boolean
         /**
-         * `BRIDs.IReportSaved` when dealing with a normal response. `string`
+         * `Brightmetrics.Reports.Interfaces.DTOs.IReportSaved` when dealing with a normal response. `string`
          * when dealing with a partner template response
          */
-        template: string | BRIDs.IReportSaved
+        template: string | Brightmetrics.Reports.Interfaces.DTOs.IReportSaved
     }
 
     interface IReportEditorTopbarProps {
-        report: KnockoutComputed<BRCs.Report | null>;
+        report: KnockoutComputed<Brightmetrics.Reports.Classes.Report | null>;
         reportHasError: KnockoutObservable<boolean>;
         reportGroup: KnockoutComputed<string>;
         reportDescription: KnockoutComputed<string>;
         hasPendingChanges: KnockoutComputed<boolean>;
         reportName: KnockoutComputed<string>;
-        dsi: KnockoutComputed<BIs.IDataSourceInstance | null>;
+        dsi: KnockoutComputed<Brightmetrics.Interfaces.IDataSourceInstance | null>;
         isOutOfSync: KnockoutComputed<boolean>;
         navigateBackToReports: () => void;
         allReportGroups: KnockoutComputed<string[]>;
         isPartnerTemplates: boolean;
         openPrintPreview: () => void;
-        getTemplateSnapshot(): BRIDs.IReportTemplate;
-        addReport(report: BRCs.Report): void;
-        updateReport(report: BRCs.Report): void;
-        removeReport(report: BRCs.Report): JQuery.Thenable<unknown>;
-        goToReport(report: BRCs.Report): void;
+        getTemplateSnapshot(): Brightmetrics.Reports.Interfaces.DTOs.IReportTemplate;
+        addReport(report: Brightmetrics.Reports.Classes.Report): void;
+        updateReport(report: Brightmetrics.Reports.Classes.Report): void;
+        removeReport(report: Brightmetrics.Reports.Classes.Report): JQuery.Thenable<unknown>;
+        goToReport(report: Brightmetrics.Reports.Classes.Report): void;
         cancelPendingChanges(soft?: boolean): void;
         updateReportName(updateName: string): void;
         updateReportGroup(updatedGroup: string): void;
         updateReportDescription(updatedDescription: string): void;
-        updateReportSchedules(schedules: BIs.IReportSchedule[]): void;
+        updateReportSchedules(schedules: Brightmetrics.Interfaces.IReportSchedule[]): void;
     }
 
     export class ReportEditorTopbar extends Brightmetrics.ViewModel {
@@ -110,11 +103,11 @@ namespace Brightmetrics.Reports.ViewModels {
         public isEditingReportGroup: KnockoutComputed<boolean>;
         public reportType: KnockoutComputed<string>;
         public reportDS: KnockoutComputed<string>;
-        public reportDSI: KnockoutComputed<BIs.IDataSourceInstance>;
-        public moreVertMenuItems: KnockoutComputed<BIs.IMoreVertItems[]>;
+        public reportDSI: KnockoutComputed<Brightmetrics.Interfaces.IDataSourceInstance>;
+        public moreVertMenuItems: KnockoutComputed<Brightmetrics.Interfaces.IMoreVertItems[]>;
         public printPreviewTooltip: KnockoutComputed<string>;
         public isPrintPreviewDisabled: KnockoutComputed<boolean>;
-        public availableReportActions: KnockoutComputed<BIs.IMoreVertItems[]>;
+        public availableReportActions: KnockoutComputed<Brightmetrics.Interfaces.IMoreVertItems[]>;
         public reportDescriptionTooltip: KnockoutComputed<string>;
 
         public constructor(props: IReportEditorTopbarProps) {
@@ -123,18 +116,18 @@ namespace Brightmetrics.Reports.ViewModels {
 
         private _openEmailOptions(props: IReportEditorTopbarProps) {
             const report = props.report()!;
-            const emailOpts = new BVs.EmailOptionsDialog({
-                dataPerspective: BEs.DataPerspective.Report,
+            const emailOpts = new Brightmetrics.ViewModels.EmailOptionsDialog({
+                dataPerspective: Brightmetrics.Enums.DataPerspective.Report,
                 dsi: this.reportDSI(),
                 entity: report,
                 getTemplateSnapshot: props.getTemplateSnapshot,
-                onDestroy: (schedules: BIs.IReportSchedule[]) => {
+                onDestroy: (schedules: Brightmetrics.Interfaces.IReportSchedule[]) => {
                     props.updateReportSchedules(schedules);
                 },
                 parameters: Utils.deepClone(report.template.options),
             });
 
-            if (report.type === BREs.ReportObjectType.System) {
+            if (report.type === Brightmetrics.Reports.Enums.ReportObjectType.System) {
                 emailOpts.openSendEmail({ onCancel: void 0 });
             } else {
                 emailOpts.open();
@@ -260,15 +253,15 @@ namespace Brightmetrics.Reports.ViewModels {
             this.inlineFieldBeingEdited(InlineEditableField.None);
         }
 
-        private _convertResponseToReport(response: IRequestResponse): BRCs.Report {
-            let report: BRCs.Report;
+        private _convertResponseToReport(response: IRequestResponse): Brightmetrics.Reports.Classes.Report {
+            let report: Brightmetrics.Reports.Classes.Report;
             const template = typeof response.template === "string" ?
-                (JSON.parse(response.template) as BRIDs.IReportTemplate) :
+                (JSON.parse(response.template) as Brightmetrics.Reports.Interfaces.DTOs.IReportTemplate) :
                 response.template.template;
             const normalized = Utils.ReportHelpers.importReport(template)!;
 
             if (this.isPartnerTemplates) {
-                report = BRCs.Report.fromPartnerTemplate(normalized);
+                report = Brightmetrics.Reports.Classes.Report.fromPartnerTemplate(normalized);
                 // When saving a PRT, the backend converts any CCFs to PCCFs,
                 // but if we're in a PRT-editor, then we want to see it as a
                 // CCF, so here we switch it back.
@@ -279,8 +272,8 @@ namespace Brightmetrics.Reports.ViewModels {
                     }
                 });
             } else {
-                report = BRCs.Report.fromSaved({
-                    ...response.template as BRIDs.IReportSaved,
+                report = Brightmetrics.Reports.Classes.Report.fromSaved({
+                    ...response.template as Brightmetrics.Reports.Interfaces.DTOs.IReportSaved,
                     template: normalized,
                 });
             }
@@ -318,7 +311,7 @@ namespace Brightmetrics.Reports.ViewModels {
 
             return Utils.ajaxRequest(url, data)
                 .then(this._convertResponseToReport.bind(this))
-                .then((report: BRCs.Report) => {
+                .then((report: Brightmetrics.Reports.Classes.Report) => {
                     props.addReport(report);
                     props.cancelPendingChanges();
                     props.goToReport(report);
@@ -346,7 +339,7 @@ Please try again`),
             });
 
             ajax.then(this._convertResponseToReport.bind(this))
-                .then((report: BRCs.Report) => {
+                .then((report: Brightmetrics.Reports.Classes.Report) => {
                     props.updateReport(report);
                     props.cancelPendingChanges(true);
 
@@ -364,7 +357,7 @@ Please try again`),
             return ajax;
         }
 
-        private _exportReport(exportOptions: BRIs.IExportReport) {
+        private _exportReport(exportOptions: Brightmetrics.Reports.Interfaces.IExportReport) {
             const exportForm = Utils.getOrCreateExportForm();
             exportForm.find("input[name='dataSourceId']").val(`y${exportOptions.dsiId}`);
             exportForm.find("input[name='reportType']").val(exportOptions.reportType);
@@ -425,7 +418,7 @@ Please try again`),
                     hideOnOutOfSync: false,
                     icon: null,
                     index: 0,
-                    permission: BREs.AccessLevel.Modify,
+                    permission: Brightmetrics.Reports.Enums.AccessLevel.Modify,
                     text: ReportAction.SAVE,
                 },
                 {
@@ -437,7 +430,7 @@ Please try again`),
                     hideOnOutOfSync: false,
                     icon: null,
                     index: 1,
-                    permission: BREs.AccessLevel.None,
+                    permission: Brightmetrics.Reports.Enums.AccessLevel.None,
                     text: ReportAction.SAVE_AS,
                 },
                 {
@@ -449,7 +442,7 @@ Please try again`),
                     hideOnOutOfSync: false,
                     icon: null,
                     index: 2,
-                    permission: BREs.AccessLevel.None,
+                    permission: Brightmetrics.Reports.Enums.AccessLevel.None,
                     text: ReportAction.CANCEL,
                 },
                 {
@@ -461,7 +454,7 @@ Please try again`),
                     hideOnOutOfSync: false,
                     icon: null,
                     index: 3,
-                    permission: BREs.AccessLevel.None,
+                    permission: Brightmetrics.Reports.Enums.AccessLevel.None,
                     text: ReportAction.EMAIL,
                 },
                 {
@@ -474,7 +467,7 @@ Please try again`),
                                 const table = {
                                     cols: reportPreview.table.cols,
                                     defaultSortAscending: reportPreview.tableColumnSortAscending,
-                                    defaultSortIndex: reportPreview.table.reportType === BREs.ReportType.Summary ?
+                                    defaultSortIndex: reportPreview.table.reportType === Brightmetrics.Reports.Enums.ReportType.Summary ?
                                         reportPreview.table.defaultSortIndex :
                                         Math.max(reportPreview.tableColumnSortIndex
                                             + reportPreview.table.rows.length, 0) || 0,
@@ -521,7 +514,7 @@ Please try again`),
                     hideOnOutOfSync: true,
                     icon: null,
                     index: 4,
-                    permission: BREs.AccessLevel.None,
+                    permission: Brightmetrics.Reports.Enums.AccessLevel.None,
                     text: ReportAction.EXPORT,
                 },
                 {
@@ -533,7 +526,7 @@ Please try again`),
                     hideOnOutOfSync: true,
                     icon: null,
                     index: 5,
-                    permission: BREs.AccessLevel.None,
+                    permission: Brightmetrics.Reports.Enums.AccessLevel.None,
                     text: ReportAction.PRINT,
                 },
                 {
@@ -545,7 +538,7 @@ Please try again`),
                     hideOnOutOfSync: false,
                     icon: null,
                     index: 6,
-                    permission: BREs.AccessLevel.Admin,
+                    permission: Brightmetrics.Reports.Enums.AccessLevel.Admin,
                     text: ReportAction.PERMISSIONS,
                 },
                 {
@@ -562,7 +555,7 @@ Please try again`),
                     hideOnOutOfSync: false,
                     icon: null,
                     index: 7,
-                    permission: BREs.AccessLevel.None,
+                    permission: Brightmetrics.Reports.Enums.AccessLevel.None,
                     text: ReportAction.REMOVE,
                 },
                 {
@@ -658,7 +651,7 @@ Please try again`),
                     hideOnOutOfSync: false,
                     icon: null,
                     index: 8,
-                    permission: BREs.AccessLevel.Admin,
+                    permission: Brightmetrics.Reports.Enums.AccessLevel.Admin,
                     text: ReportAction.MANAGE_CUSTOMER_ACCESS,
                 },
             ];
@@ -673,7 +666,7 @@ Please try again`),
                     hideOnOutOfSync: false,
                     icon: null,
                     index: 9,
-                    permission: BREs.AccessLevel.Admin,
+                    permission: Brightmetrics.Reports.Enums.AccessLevel.Admin,
                     text: ReportAction.API_ACCESS,
                 });
             }
@@ -708,7 +701,7 @@ Please try again`),
                 const report = props.report();
 
                 return !!report &&
-                    (report.type === BREs.ReportObjectType.Saved || report.type === BREs.ReportObjectType.Partner);
+                    (report.type === Brightmetrics.Reports.Enums.ReportObjectType.Saved || report.type === Brightmetrics.Reports.Enums.ReportObjectType.Partner);
             });
 
             this.isEditingReportGroup = ko.computed(() =>
@@ -750,7 +743,7 @@ Please try again`),
 
                 const mvi = _.find(this._moreVertItems, (item) => item.index === 3);
                 // Change the text of the send actions depending on the type of report.
-                if (report.type === BREs.ReportObjectType.System) {
+                if (report.type === Brightmetrics.Reports.Enums.ReportObjectType.System) {
                     mvi!.text = ReportAction.SYSTEM_EMAIL;
                 } else {
                     mvi!.text = ReportAction.EMAIL;
@@ -778,7 +771,7 @@ Please try again`),
                 if (this.isPartnerTemplates) {
                     items = _.reject(items, (item) => !item.forPartnerReportsOnly);
 
-                    if (props.report()!.type === BREs.ReportObjectType.System) {
+                    if (props.report()!.type === Brightmetrics.Reports.Enums.ReportObjectType.System) {
                         items = _.reject(items, (item) => item.text === ReportAction.MANAGE_CUSTOMER_ACCESS);
                     }
                 } else {
@@ -793,7 +786,7 @@ Please try again`),
                     Utils.userHasPermission(roleInfo.role.Permissions,
                         Brightmetrics.Enums.BrightPermissionKey.CanAdministerCompany));
 
-                return items as BIs.IMoreVertItems[];
+                return items as Brightmetrics.Interfaces.IMoreVertItems[];
             });
 
             this.printPreviewTooltip = ko.computed(() => {
diff --git a/ts/Reports/ViewModels/saveasdialog.ts b/ts/Reports/ViewModels/saveasdialog.ts
index f4f6662..10c729c 100644
--- a/ts/Reports/ViewModels/saveasdialog.ts
+++ b/ts/Reports/ViewModels/saveasdialog.ts
@@ -4,9 +4,6 @@
 /// <reference path="../../ViewModels/dialog.ts" />
 
 namespace Brightmetrics.Reports.ViewModels {
-    import BVs = Brightmetrics.ViewModels;
-    import BIs = Brightmetrics.Interfaces;
-
     const reportGroupFieldCSSSelector = "js-report-group-field";
 
     ko.bindingHandlers.$highlightonfocus = {
@@ -29,7 +26,7 @@ namespace Brightmetrics.Reports.ViewModels {
         customTitle?: string;
     }
 
-    export class SaveAsDialog extends BVs.DialogViewModel {
+    export class SaveAsDialog extends Brightmetrics.ViewModels.DialogViewModel {
         public dialogTitle: string;
         public reportName: KnockoutObservable<string>;
         public reportGroup: KnockoutObservable<string>;
@@ -78,7 +75,7 @@ namespace Brightmetrics.Reports.ViewModels {
                 dialogClasses: ["c-dialog-wrapper"],
                 dialogContent: "#save-as-dialog-template",
                 modal: true,
-            } as BIs.IDialogViewModelOptions);
+            } as Brightmetrics.Interfaces.IDialogViewModelOptions);
 
             _.defer(() => this.reportNameHasFocus(true));
         }
