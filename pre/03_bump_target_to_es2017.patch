diff --git a/ts/Admin/DataCustomization/Interfaces/igrouprowprops.ts b/ts/Admin/DataCustomization/Interfaces/igrouprowprops.ts
index b14c221..36f9c70 100644
--- a/ts/Admin/DataCustomization/Interfaces/igrouprowprops.ts
+++ b/ts/Admin/DataCustomization/Interfaces/igrouprowprops.ts
@@ -4,6 +4,6 @@
         customItem: Types.CustomItem;
         name: string;
         editCustomItem: () => void;
-        deleteCustomItem: () => Promise<any>;
+        deleteCustomItem: () => JQuery.Thenable<any>;
     }
 }
diff --git a/ts/Admin/DataCustomization/Interfaces/iungroupeddata.ts b/ts/Admin/DataCustomization/Interfaces/iungroupeddata.ts
index cfcd982..9623635 100644
--- a/ts/Admin/DataCustomization/Interfaces/iungroupeddata.ts
+++ b/ts/Admin/DataCustomization/Interfaces/iungroupeddata.ts
@@ -7,7 +7,7 @@
         customItem: Types.CustomItem;
         customItemIndex: number;
         editCustomItem: () => void;
-        deleteCustomItem: () => Promise<any>;
+        deleteCustomItem: () => JQuery.Thenable<any>;
         type: Enums.CustomType;
     }
 }
diff --git a/ts/Admin/DataCustomization/ViewModels/ccfeditorview.ts b/ts/Admin/DataCustomization/ViewModels/ccfeditorview.ts
index 04182a4..83bef15 100644
--- a/ts/Admin/DataCustomization/ViewModels/ccfeditorview.ts
+++ b/ts/Admin/DataCustomization/ViewModels/ccfeditorview.ts
@@ -14,8 +14,8 @@
         valueIndex?: number;
         dsi: BIs.IDataSourceInstance;
         onBack(): void;
-        onDelete(): Promise<any>;
-        onSave(updatedCCF: Interfaces.ICustomCalculatedFieldData): Promise<any>;
+        onDelete(): JQuery.Thenable<any>;
+        onSave(updatedCCF: Interfaces.ICustomCalculatedFieldData): JQuery.Thenable<any>;
     }
 
     export class CCFEditorView extends Brightmetrics.ViewModel implements Interfaces.IView {
diff --git a/ts/Admin/DataCustomization/ViewModels/cddeditorview.ts b/ts/Admin/DataCustomization/ViewModels/cddeditorview.ts
index 6c2bbcf..52a2bb7 100644
--- a/ts/Admin/DataCustomization/ViewModels/cddeditorview.ts
+++ b/ts/Admin/DataCustomization/ViewModels/cddeditorview.ts
@@ -104,8 +104,8 @@
         dsg: BIs.IDataSourceGroup;
         dsi: BIs.IDataSourceInstance;
         onBack(): void;
-        onDelete(): Promise<any>;
-        onSave(updatedCDD: BIs.ICustomDetailDimension): Promise<any>;
+        onDelete(): JQuery.Thenable<any>;
+        onSave(updatedCDD: BIs.ICustomDetailDimension): JQuery.Thenable<any>;
     }
 
     export class CDDEditorView extends Brightmetrics.ViewModel implements Interfaces.IView {
diff --git a/ts/Admin/DataCustomization/ViewModels/pageview.ts b/ts/Admin/DataCustomization/ViewModels/pageview.ts
index 7086cdd..33684aa 100644
--- a/ts/Admin/DataCustomization/ViewModels/pageview.ts
+++ b/ts/Admin/DataCustomization/ViewModels/pageview.ts
@@ -68,7 +68,7 @@
             return data;
         }
 
-        private _saveCCF(ccf: Interfaces.ICustomCalculatedFieldData): Promise<any> {
+        private _saveCCF(ccf: Interfaces.ICustomCalculatedFieldData): JQuery.Thenable<any> {
             const ajax = Utils.ajaxRequest(
                 `/DataSourceInstance/${this._dsiForItem.Id}/CustomCalculatedFields`,
                 ccf);
@@ -100,7 +100,7 @@
             return ajax;
         }
 
-        private _saveCDD(cdd: BIs.ICustomDetailDimension): Promise<any> {
+        private _saveCDD(cdd: BIs.ICustomDetailDimension): JQuery.Thenable<any> {
             const ajax = Utils.ajaxRequest(
                 `/DataSourceInstance/${this._dsiForItem.Id}/CustomDetailDimensions`,
                 cdd);
@@ -152,7 +152,7 @@
             cdd: BIs.ICustomDetailDimension,
             cddIndex: number,
             dsi: BIs.IDataSourceInstance)
-            : Promise<any>
+            : JQuery.Thenable<any>
         {
             const buttonLabel = "DELETE";
             const isLoading = ko.observable(false);
@@ -221,7 +221,7 @@
         private _deleteCCF(
             dsi: BIs.IDataSourceInstance,
             ccf: BIs.ICustomCalculatedField)
-            : Promise<any>
+            : JQuery.Thenable<any>
         {
             const buttonLabel = "DELETE";
             const isLoading = ko.observable(false);
diff --git a/ts/Admin/ViewModels/companySettings.ts b/ts/Admin/ViewModels/companySettings.ts
index 1608bc1..4c6d88e 100644
--- a/ts/Admin/ViewModels/companySettings.ts
+++ b/ts/Admin/ViewModels/companySettings.ts
@@ -109,7 +109,7 @@ namespace Brightmetrics.Admin.ViewModels {
         // Permissions
         public hasBillingPermission: KnockoutObservable<boolean>;
 
-        private openManageTrialsWizard(): Promise<unknown> {
+        private openManageTrialsWizard(): JQuery.Thenable<unknown> {
             return Utils.StartTrialAndSubscriptionWizard(this.dcgTrials, this.billingData());
         }
 
@@ -375,7 +375,7 @@ namespace Brightmetrics.Admin.ViewModels {
             };
         }
 
-        public saveBillingInfo(data: any): Promise<unknown> {
+        public saveBillingInfo(data: any): JQuery.Thenable<unknown> {
             const trials: ITrialData[] = data.trials ? data.trials : [];
 
             if (data.billingInfo) {
diff --git a/ts/Admin/ViewModels/dashboardtickersetting.ts b/ts/Admin/ViewModels/dashboardtickersetting.ts
index 144bb2f..6a18e80 100644
--- a/ts/Admin/ViewModels/dashboardtickersetting.ts
+++ b/ts/Admin/ViewModels/dashboardtickersetting.ts
@@ -18,7 +18,7 @@ namespace Brightmetrics.Admin.ViewModels {
     interface ITickerSettingDialog {
         isRealtime: boolean;
         name: string;
-        onApply: (json: any) => JQuery.Promise<any>;
+        onApply: (json: any) => JQuery.Thenable<any>;
         ticker: Brightmetrics.Dashboard.Interfaces.ITickerSettings;
     }
 
@@ -33,7 +33,7 @@ namespace Brightmetrics.Admin.ViewModels {
         public dashboardTickerTooltip: KnockoutComputed<string>;
         public disableRealtimeTicker: KnockoutComputed<boolean>;
         public buttonWithLoading: bmvs.ButtonWithLoading;
-        public onApplyCallback: (json: any) => JQuery.Promise<any>;
+        public onApplyCallback: (json: any) => JQuery.Thenable<any>;
 
         public static defaultDialogContent = tabSettingsDialogContentSelector;
         public static defaultAppendToSelector = dialogAppendToSelector;
@@ -111,7 +111,7 @@ namespace Brightmetrics.Admin.ViewModels {
                 this.onApplyCallback(this.toJSON()).then(() => {
                     this.buttonWithLoading.setLoadingValue(false);
                     this.destroy();
-                }).catch(() => this.buttonWithLoading.setLoadingValue(false));
+                }, () => this.buttonWithLoading.setLoadingValue(false));
             };
 
             this.events.onCancelClick = () => {
diff --git a/ts/Admin/VoiceAnalytics/ViewModels/addrulesetdialog.ts b/ts/Admin/VoiceAnalytics/ViewModels/addrulesetdialog.ts
index 26d898a..2128885 100644
--- a/ts/Admin/VoiceAnalytics/ViewModels/addrulesetdialog.ts
+++ b/ts/Admin/VoiceAnalytics/ViewModels/addrulesetdialog.ts
@@ -2,7 +2,7 @@
     import VAIs = Brightmetrics.VoiceAnalytics.Interfaces;
 
     interface IAddRuleSetDialogProps {
-        onAdd: (ruleSet: VAIs.IRuleSet) => Promise<void>;
+        onAdd: (ruleSet: VAIs.IRuleSet) => JQuery.Thenable<void>;
         voiceAnalyticsDcg: number;
         duplicate?: VAIs.IRuleSet;
     }
diff --git a/ts/Admin/VoiceAnalytics/ViewModels/manageprofiles.ts b/ts/Admin/VoiceAnalytics/ViewModels/manageprofiles.ts
index d2573ee..3f7a0b5 100644
--- a/ts/Admin/VoiceAnalytics/ViewModels/manageprofiles.ts
+++ b/ts/Admin/VoiceAnalytics/ViewModels/manageprofiles.ts
@@ -13,13 +13,13 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
         profiles: KnockoutObservableArray<VAIs.IProfile>;
         possibleDcgs: KnockoutObservableArray<VAIs.ITargetingSpec>;
         currentView: KnockoutObservable<Enums.View>;
-        onAdd: (profile: VAIs.IProfile) => Promise<VAIs.IProfile>;
-        onUpdate: (profile: VAIs.IProfile, tagCategoryChanges: Record<string, any>) => Promise<VAIs.IProfile>;
-        onDelete: (id: string) => Promise<void>;
+        onAdd: (profile: VAIs.IProfile) => JQuery.Thenable<VAIs.IProfile>;
+        onUpdate: (profile: VAIs.IProfile, tagCategoryChanges: Record<string, any>) => JQuery.Thenable<VAIs.IProfile>;
+        onDelete: (id: string) => JQuery.Thenable<void>;
     }
 
     function getTargetingRuleFilterValues(targetingRuleFilterId: string, targetDcgId: number)
-        : () => Promise<Array<IKoOption<string>>> {
+        : () => JQuery.Thenable<Array<IKoOption<string>>> {
         return () => Utils.ajaxRequest(`/VoiceAnalytics/${defCompanyId}/Profiles` +
               `?getPossibleValues=${targetingRuleFilterId}&targetDcg=${targetDcgId}`)
             .then((response: { data?: string[], commandId?: string; success: boolean }) => {
@@ -69,7 +69,7 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
             super(props);
         }
 
-        private showUnsavedChangesDialog(): Promise<string> {
+        private showUnsavedChangesDialog(): JQuery.Thenable<string> {
             return Utils.basicConfirm2({
                 content: "Are you sure you want to navigate away from the profile you're editing?" +
                     " All of your changes will be lost.",
@@ -181,7 +181,7 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
 
             this.events.onSaveClick = () => {
                 if (this.canSave()) {
-                    let request: Promise<void>;
+                    let request: JQuery.Thenable<void>;
                     const editor = this.editor();
                     const json = editor.toJSON();
 
@@ -273,7 +273,7 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
             });
         }
 
-        private _updateTagCategories(allTagCategories: VAIs.ITagCategory[]): Promise<VAIs.ITagCategory[]> {
+        private _updateTagCategories(allTagCategories: VAIs.ITagCategory[]): JQuery.Thenable<VAIs.ITagCategory[]> {
             const defd = $.Deferred<VAIs.ITagCategory[]>();
             const dialog: MultipleSelectDialog<string> = new MultipleSelectDialog<string>({
                 listFetcher: () => $.Deferred().resolve({ data: allTagCategories })
diff --git a/ts/Admin/VoiceAnalytics/ViewModels/managetagcategories.ts b/ts/Admin/VoiceAnalytics/ViewModels/managetagcategories.ts
index 545325f..b338292 100644
--- a/ts/Admin/VoiceAnalytics/ViewModels/managetagcategories.ts
+++ b/ts/Admin/VoiceAnalytics/ViewModels/managetagcategories.ts
@@ -27,7 +27,7 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
             return { data: JSON.stringify(this) };
         }
 
-        public send(): Promise<{ success: boolean; ruleSets: VAIs.IRuleSet[] }> {
+        public send(): JQuery.Thenable<{ success: boolean; ruleSets: VAIs.IRuleSet[] }> {
             return Utils.ajaxRequest(
                 `/VoiceAnalytics/${defCompanyId}/TagCategories/${this._tagCategoryId}/RuleSetTags`,
                 this.json());
@@ -35,7 +35,7 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
     }
 
     interface IAddsNewRuleSet {
-        onAddNewRuleSet: (ruleSet: VAIs.IRuleSet) => Promise<unknown>;
+        onAddNewRuleSet: (ruleSet: VAIs.IRuleSet) => JQuery.Thenable<unknown>;
         tagCategories: KnockoutObservableArray<VAIs.ITagCategory>;
     }
 
@@ -43,9 +43,9 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
         voiceAnalyticsDcg: number;
         currentView: KnockoutObservable<Enums.View>;
         ruleSets: KnockoutObservableArray<VAIs.IRuleSet>;
-        onAdd: () => Promise<VAIs.ITagCategory>;
+        onAdd: () => JQuery.Thenable<VAIs.ITagCategory>;
         onUpdate: (tagCategory: VAIs.ITagCategory, tagCategoryId: string) =>
-            Promise<VAIs.ITagCategory>;
+            JQuery.Thenable<VAIs.ITagCategory>;
         onDelete: (tagCategory: VAIs.ITagCategory) => void;
         onSave: (updated: VAIs.ITagCategory, suppressNotification: boolean) => void;
     }
@@ -57,11 +57,11 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
         ruleSets: VAIs.IRuleSet[];
         allRuleSets: KnockoutObservableArray<VAIs.IRuleSet>;
         onDelete: (makeRequest: boolean) => void;
-        updateTagCategoryTag: (newTag: string) => Promise<unknown>;
+        updateTagCategoryTag: (newTag: string) => JQuery.Thenable<unknown>;
         updateTagRuleSets: (
             tagName: string,
             added: VAIs.IRuleSet[],
-            removed: VAIs.IRuleSet[]) => Promise<unknown>;
+            removed: VAIs.IRuleSet[]) => JQuery.Thenable<unknown>;
     }
 
     // tslint:disable:max-classes-per-file
@@ -70,7 +70,7 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
         private _voiceAnalyticsDcg: number;
         private _allRuleSets: KnockoutObservableArray<VAIs.IRuleSet>;
         private _tagCategories: KnockoutObservableArray<VAIs.ITagCategory>;
-        private _addNewRuleSet: (ruleSet: VAIs.IRuleSet) => Promise<unknown>;
+        private _addNewRuleSet: (ruleSet: VAIs.IRuleSet) => JQuery.Thenable<unknown>;
         public name: KnockoutObservable<string>;
         public nameHasFocus: KnockoutObservable<boolean>;
         public nameHasBlurred: KnockoutObservable<boolean>;
@@ -245,7 +245,7 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
             this.events.onDeleteClick = () => props.onDelete(true);
 
             this.events.onSaveClick = () => {
-                let defd: Promise<unknown> = Brightmetrics.Constants.resolvedDeferred;
+                let defd: JQuery.Thenable<unknown> = Brightmetrics.Constants.resolvedDeferred;
 
                 this.isLoading(true);
 
@@ -313,7 +313,7 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
          */
         private _tagLookup: KnockoutObservable<Record<string, Record<string, VAIs.IRuleSet[]>>>;
         private _tagLookupUpdater: KnockoutComputed<void>;
-        private _addNewRuleSet: (ruleSet: VAIs.IRuleSet) => Promise<unknown>;
+        private _addNewRuleSet: (ruleSet: VAIs.IRuleSet) => JQuery.Thenable<unknown>;
         public templateId = "manage-tag-categories-view-template";
         public tagCategoryOptions: KnockoutComputed<Array<IKoOption<string>>>;
         public currentView: KnockoutObservable<Enums.View>;
@@ -333,7 +333,7 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
             super(props);
         }
 
-        private _loadRuleSetTags(tagCategoryId: string): Promise<VAIs.IRuleSetTag[]> {
+        private _loadRuleSetTags(tagCategoryId: string): JQuery.Thenable<VAIs.IRuleSetTag[]> {
             const defd = $.Deferred<VAIs.IRuleSetTag[]>();
             const handleRequestFailure = () => {
                 defd.reject();
@@ -354,10 +354,10 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
         }
 
         private _generateTagLookup(tagCategories: string[], ruleSets: VAIs.IRuleSet[]):
-            Promise<Record<number, Record<string, VAIs.IRuleSet[]>>>
+            JQuery.Thenable<Record<number, Record<string, VAIs.IRuleSet[]>>>
         {
             const defd = $.Deferred<Record<string, Record<string, VAIs.IRuleSet[]>>>();
-            const requests: Array<Promise<unknown>> = [];
+            const requests: Array<JQuery.Thenable<unknown>> = [];
             const data: Record<string, Record<string, VAIs.IRuleSet[]>> = {};
 
             // TODO: Debug only
@@ -440,7 +440,7 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
             tagName: string,
             tagRuleSets: VAIs.IRuleSet[],
             tagCategoryId: string,
-            makeRequest: boolean): Promise<unknown>
+            makeRequest: boolean): JQuery.Thenable<unknown>
         {
             this._removeTagByTagCategoryId(tagName, tagRuleSets, tagCategoryId);
 
@@ -466,7 +466,7 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
             () => Utils.notifyUser(`There was an error removing the tag ${tagName}`, ["error"]));
         }
 
-        private _updateTagCategoryTag(tagCategoryId: string, oldValue: string, newValue: string): Promise<unknown> {
+        private _updateTagCategoryTag(tagCategoryId: string, oldValue: string, newValue: string): JQuery.Thenable<unknown> {
             const request = new RuleSetTagRequest(tagCategoryId);
             request.value = oldValue;
             request.actions.push({ action: "renameTo", actionValue: newValue });
@@ -491,7 +491,7 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
             tagCategoryId: string,
             tag: string,
             addedRuleSets: VAIs.IRuleSet[],
-            removedRuleSets: VAIs.IRuleSet[]): Promise<unknown>
+            removedRuleSets: VAIs.IRuleSet[]): JQuery.Thenable<unknown>
         {
             const request = new RuleSetTagRequest(tagCategoryId);
             request.value = tag;
diff --git a/ts/Admin/VoiceAnalytics/ViewModels/pageview.ts b/ts/Admin/VoiceAnalytics/ViewModels/pageview.ts
index 17d4745..8c61e8c 100644
--- a/ts/Admin/VoiceAnalytics/ViewModels/pageview.ts
+++ b/ts/Admin/VoiceAnalytics/ViewModels/pageview.ts
@@ -22,7 +22,7 @@
             super();
         }
 
-        private _addProfile(profile: VAIs.IProfile): Promise<VAIs.IProfile> {
+        private _addProfile(profile: VAIs.IProfile): JQuery.Thenable<VAIs.IProfile> {
             return Utils.ajaxRequest(`/VoiceAnalytics/${defCompanyId}/Profiles`,
                  { profile: JSON.stringify(profile) })
                 .then((response: { profile: VAIs.IProfile }) => {
@@ -33,7 +33,7 @@
         }
 
         private _updateProfile(profile: VAIs.IProfile, tagCategoryChanges: Record<string, any>)
-            : Promise<VAIs.IProfile> {
+            : JQuery.Thenable<VAIs.IProfile> {
             const payload: Record<string, any> = { profile: JSON.stringify(profile) };
 
             _.keys(tagCategoryChanges).forEach((key) => {
@@ -51,7 +51,7 @@
                 });
         }
 
-        private _deleteProfile(profileId: string): Promise<void> {
+        private _deleteProfile(profileId: string): JQuery.Thenable<void> {
             return Utils.ajaxRequest(`/VoiceAnalytics/${defCompanyId}/Profiles/${profileId}`, {
                 _realMethod: "DELETE",
             }).then((response: { success: boolean; }) => {
@@ -83,7 +83,7 @@
             return null;
         }
 
-        private _sendAddRuleSetRequest(ruleSet: VAIs.IRuleSet): Promise<VAIs.IRuleSet | null> {
+        private _sendAddRuleSetRequest(ruleSet: VAIs.IRuleSet): JQuery.Thenable<VAIs.IRuleSet | null> {
             // NOTE: ruleSet passed in as arg has temporary ID.
             // ruleSet returned from the request has *actual* ID
             delete (ruleSet as any).ruleSetId;
@@ -99,7 +99,7 @@
                 }, () => this._handleAddRuleSetRequestFail(ruleSet));
         }
 
-        private _duplicateRuleSetDialog = (ruleSet: VAIs.IRuleSet): Promise<unknown> => {
+        private _duplicateRuleSetDialog = (ruleSet: VAIs.IRuleSet): JQuery.Thenable<unknown> => {
             const defd = $.Deferred<unknown>();
             const _ = new AddRuleSetDialog({
                 duplicate: ruleSet,
@@ -113,7 +113,7 @@
             return defd.promise();
         }
 
-        private _addRuleSetDialog = (): Promise<unknown> => {
+        private _addRuleSetDialog = (): JQuery.Thenable<unknown> => {
             const defd = $.Deferred<unknown>();
             const _ = new AddRuleSetDialog({
                 onAdd: (rs) => {
@@ -126,7 +126,7 @@
             return defd.promise();
         }
 
-        private _deleteTagCategoryDialog = (tagCategory: VAIs.ITagCategory): Promise<unknown> => {
+        private _deleteTagCategoryDialog = (tagCategory: VAIs.ITagCategory): JQuery.Thenable<unknown> => {
             const defd = $.Deferred<unknown>();
             Utils.basicConfirm2({
                 content: `Are you sure you want to delete the tag category ${tagCategory.name}?`,
@@ -145,7 +145,7 @@
             return defd.promise();
         }
 
-        private _addTagCategoryDialog = (): Promise<VAIs.ITagCategory> => {
+        private _addTagCategoryDialog = (): JQuery.Thenable<VAIs.ITagCategory> => {
             const defd = $.Deferred<unknown>();
             const _ = new AddTagCategoryDialog({
                 onAction: (tc) => {
@@ -159,7 +159,7 @@
 
         private _editTagCategoryDialog = (
             tagCategory: VAIs.ITagCategory,
-            tagCategoryId: string): Promise<VAIs.ITagCategory> => {
+            tagCategoryId: string): JQuery.Thenable<VAIs.ITagCategory> => {
 
             const defd = $.Deferred<VAIs.ITagCategory>();
             const _ = new EditTagCategoryDialog({
@@ -174,7 +174,7 @@
             return defd.promise();
         };
 
-        private _deleteRuleSetDialog = (ruleSet: VAIs.IRuleSet): Promise<unknown> => {
+        private _deleteRuleSetDialog = (ruleSet: VAIs.IRuleSet): JQuery.Thenable<unknown> => {
             const defd = $.Deferred<unknown>();
             Utils.basicConfirm2({
                 content: `Are you sure you want to delete the Rule Set ${ruleSet.name}?`,
@@ -194,7 +194,7 @@
         }
 
         private _addRuleSet = (ruleSet: VAIs.IRuleSet, skipEditing: boolean = false)
-            : Promise<VAIs.IRuleSet> =>
+            : JQuery.Thenable<VAIs.IRuleSet> =>
         {
             return this._sendAddRuleSetRequest(ruleSet).then((responseRuleSet) => {
                 if (responseRuleSet) {
@@ -299,7 +299,7 @@
         };
 
         private _sendAddRuleRequest = (ruleSet: VAIs.IRuleSet, type: "allOf" | "anyOf" | "noneOf")
-            : Promise<VAIs.IRule> => {
+            : JQuery.Thenable<VAIs.IRule> => {
             return Utils.ajaxRequest(`/VoiceAnalytics/${defCompanyId}/RuleSets/${ruleSet.ruleSetId}/Rule`,
                  { type })
                 .then((response: { success: boolean; rule: VAIs.IRule }) => {
@@ -354,7 +354,7 @@
                 ["error"]);
         }
 
-        private _sendDeleteRuleSetRequest = (ruleSet: VAIs.IRuleSet): Promise<string> => {
+        private _sendDeleteRuleSetRequest = (ruleSet: VAIs.IRuleSet): JQuery.Thenable<string> => {
             return Utils.ajaxRequest(`/VoiceAnalytics/${defCompanyId}/RuleSets/${ruleSet.ruleSetId}`, {
                 _realMethod: "DELETE"
             }).then((response) => {
@@ -366,7 +366,7 @@
             }, () => this._handleDeleteRuleSetRequestFail(ruleSet));
         }
 
-        private _sendDeleteTagCategoryRequest = (tagCategory: VAIs.ITagCategory): Promise<string> => {
+        private _sendDeleteTagCategoryRequest = (tagCategory: VAIs.ITagCategory): JQuery.Thenable<string> => {
             return Utils.ajaxRequest(
                 `/VoiceAnalytics/${defCompanyId}/TagCategories/${tagCategory.id}`, {
                 _realMethod: "DELETE"
diff --git a/ts/Admin/VoiceAnalytics/ViewModels/ruleset.ts b/ts/Admin/VoiceAnalytics/ViewModels/ruleset.ts
index b5c2423..a8327f0 100644
--- a/ts/Admin/VoiceAnalytics/ViewModels/ruleset.ts
+++ b/ts/Admin/VoiceAnalytics/ViewModels/ruleset.ts
@@ -7,9 +7,9 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
     import VAEs = Brightmetrics.VoiceAnalytics.Enums;
 
     interface ICrudActions<T> {
-        onDuplicate: (entity: T) => Promise<unknown>;
-        onDelete: (entity: T) => Promise<unknown>;
-        onSave: (entity: T) => Promise<unknown>;
+        onDuplicate: (entity: T) => JQuery.Thenable<unknown>;
+        onDelete: (entity: T) => JQuery.Thenable<unknown>;
+        onSave: (entity: T) => JQuery.Thenable<unknown>;
     }
 
     interface IRuleSetProps {
@@ -17,10 +17,10 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
         tagCategories: KnockoutObservableArray<VAIs.ITagCategory>;
         ruleSet: VAIs.IRuleSet;
         onBack: () => void;
-        onDuplicate: (entity: VAIs.IRuleSet) => Promise<unknown>;
-        onDelete: (entity: VAIs.IRuleSet) => Promise<unknown>;
-        onSave: (entity: VAIs.IRuleSet, suppressNotification: boolean) => Promise<unknown>;
-        onAddRule: (type: "allOf" | "anyOf" | "noneOf") => Promise<VAIs.IRule>;
+        onDuplicate: (entity: VAIs.IRuleSet) => JQuery.Thenable<unknown>;
+        onDelete: (entity: VAIs.IRuleSet) => JQuery.Thenable<unknown>;
+        onSave: (entity: VAIs.IRuleSet, suppressNotification: boolean) => JQuery.Thenable<unknown>;
+        onAddRule: (type: "allOf" | "anyOf" | "noneOf") => JQuery.Thenable<VAIs.IRule>;
         isDraft?: boolean;
     }
 
@@ -191,9 +191,9 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
         private _save: (
             updated: VAIs.IRuleSet,
             suppressNotification: boolean,
-        ) => Promise<unknown>;
+        ) => JQuery.Thenable<unknown>;
         private _editTagsDialog: Brightmetrics.ViewModels.DialogViewModel;
-        private _addRule: (type: "allOf" | "anyOf" | "noneOf") => Promise<VAIs.IRule>;
+        private _addRule: (type: "allOf" | "anyOf" | "noneOf") => JQuery.Thenable<VAIs.IRule>;
 
         public templateId = "rule-set-view-template";
         public tags: KnockoutObservableArray<VAIs.IRuleSetTag>;
@@ -207,7 +207,7 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
             super(props);
         }
 
-        private _saveRuleSet(suppress: boolean = false): Promise<unknown> {
+        private _saveRuleSet(suppress: boolean = false): JQuery.Thenable<unknown> {
             return this._save(this.toJSON(), suppress);
         }
 
diff --git a/ts/Admin/VoiceAnalytics/ViewModels/rulesetdialog.ts b/ts/Admin/VoiceAnalytics/ViewModels/rulesetdialog.ts
index 920625f..0dabeb5 100644
--- a/ts/Admin/VoiceAnalytics/ViewModels/rulesetdialog.ts
+++ b/ts/Admin/VoiceAnalytics/ViewModels/rulesetdialog.ts
@@ -9,7 +9,7 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
         tagCategories: KnockoutObservableArray<VAIs.ITagCategory>,
         startingTag: Pick<VAIs.IRuleSetTag, "tagCategoryId" | "value">;
         startingName: string;
-        onAdd: (ruleSet: VAIs.IRuleSet) => Promise<unknown>;
+        onAdd: (ruleSet: VAIs.IRuleSet) => JQuery.Thenable<unknown>;
     }
 
     export class RuleSetDialog extends Brightmetrics.ViewModels.DialogViewModel {
diff --git a/ts/Admin/VoiceAnalytics/ViewModels/subpill.ts b/ts/Admin/VoiceAnalytics/ViewModels/subpill.ts
index 1945c73..90fc1a1 100644
--- a/ts/Admin/VoiceAnalytics/ViewModels/subpill.ts
+++ b/ts/Admin/VoiceAnalytics/ViewModels/subpill.ts
@@ -8,7 +8,7 @@ namespace Brightmetrics.Admin.VoiceAnalytics.ViewModels {
         parentDialog?: Brightmetrics.ViewModels.DialogViewModel;
         onUpdate: (values: T[]) => void;
         innerListLabel: string;
-        innerListFetcher: () => Promise<Array<IKoOption<T>>>;
+        innerListFetcher: () => JQuery.Thenable<Array<IKoOption<T>>>;
         presetValues?: () => T[];
         pillLabel: KnockoutComputed<string>;
     }
diff --git a/ts/AudioAlerts/Classes/alerter.ts b/ts/AudioAlerts/Classes/alerter.ts
index fef4e09..ac6c645 100644
--- a/ts/AudioAlerts/Classes/alerter.ts
+++ b/ts/AudioAlerts/Classes/alerter.ts
@@ -111,7 +111,7 @@
          * apply the audio alert animation, so we swallow the exception and
          * resolve the promise anyway after a 2 second timeout.
          */
-        private _getAudioPlayPromise(): Promise<unknown> {
+        private _getAudioPlayPromise(): JQuery.Thenable<unknown> {
             const defd = $.Deferred();
             const fakePlaybackTimeout = 2000;
 
@@ -145,7 +145,7 @@
 
                     const playPromise = audioElement.play();
 
-                    // Older browsers `play()` won't return a Promise object.
+                    // Older browsers `play()` won't return a JQuery.Thenable object.
                     if (playPromise) {
                         playPromise.catch((err) => {
                             // UserAgent might be blocking sound content.
@@ -172,7 +172,7 @@
             return defd.promise();
         }
 
-        private _play(): Promise<unknown> {
+        private _play(): JQuery.Thenable<unknown> {
             this._beforePlay();
 
             return this._getAudioPlayPromise();
diff --git a/ts/C2G/ViewModels/c2g.ts b/ts/C2G/ViewModels/c2g.ts
index d5dffb3..65e4ec7 100644
--- a/ts/C2G/ViewModels/c2g.ts
+++ b/ts/C2G/ViewModels/c2g.ts
@@ -754,7 +754,7 @@ namespace Brightmetrics.C2G.ViewModels {
                     if (this.timeBlockTeamActivityDataCache.hasOwnProperty(id)) {
                         this.activeTimeBlockTeamActivityData(this.timeBlockTeamActivityDataCache[id]);
                     } else {
-                        ((timeBlock! as any).click() as JQuery.Promise<any>).then((response) => {
+                        ((timeBlock! as any).click() as JQuery.Thenable<any>).then((response) => {
 
                             // Make sure our categories are sorted such that
                             // groups appear before agents.
diff --git a/ts/Dashboard/CreateDashboardWizard/createdashboarddialog.ts b/ts/Dashboard/CreateDashboardWizard/createdashboarddialog.ts
index 49b2611..02e8375 100644
--- a/ts/Dashboard/CreateDashboardWizard/createdashboarddialog.ts
+++ b/ts/Dashboard/CreateDashboardWizard/createdashboarddialog.ts
@@ -17,7 +17,7 @@ namespace Brightmetrics.Dashboard.CreateDashboardWizard.ViewModels {
         onBack?: () => void;
         onClose?: () => void;
         onNext?: (...args: any[]) => void;
-        onCreate?: (...args: any[]) => Promise<any>;
+        onCreate?: (...args: any[]) => JQuery.Thenable<any>;
     }
 
     // #region SUMMARY DIALOG
diff --git a/ts/Dashboard/Interfaces/itabactions.ts b/ts/Dashboard/Interfaces/itabactions.ts
index 42adf84..cc47e85 100644
--- a/ts/Dashboard/Interfaces/itabactions.ts
+++ b/ts/Dashboard/Interfaces/itabactions.ts
@@ -3,16 +3,16 @@
         addState(pastStateReason: Enums.PastStateReason, pastStateInfo?: string): void;
         beginChartOptions(): void;
         abortPreChartOptions(): void;
-        discardChanges(): Promise<unknown>;
+        discardChanges(): JQuery.Thenable<unknown>;
         endChartOptions(applyChanges: boolean, chartName?: string): void;
         redo(): void;
-        save(): Promise<unknown>;
+        save(): JQuery.Thenable<unknown>;
         undo(): void;
     }
 
     export interface ITabActions extends ITabActionsBase {
-        add(tab: IDashboardTab): Promise<unknown>;
-        remove(): Promise<unknown>;
+        add(tab: IDashboardTab): JQuery.Thenable<unknown>;
+        remove(): JQuery.Thenable<unknown>;
     }
 
     interface INewPartnerTabResponse {
@@ -21,8 +21,8 @@
     }
 
     export interface IPartnerTabActions extends ITabActionsBase {
-        add(tab: INewPartnerTabResponse): Promise<unknown>;
-        remove(template: Brightmetrics.Interfaces.ITabTemplate): Promise<unknown>;
+        add(tab: INewPartnerTabResponse): JQuery.Thenable<unknown>;
+        remove(template: Brightmetrics.Interfaces.ITabTemplate): JQuery.Thenable<unknown>;
         updateName(name: string): void;
         openCustomerMgmtDialog(): void;
     }
diff --git a/ts/Dashboard/Realtime/agentinfo.ts b/ts/Dashboard/Realtime/agentinfo.ts
index ec6a631..4ce4617 100644
--- a/ts/Dashboard/Realtime/agentinfo.ts
+++ b/ts/Dashboard/Realtime/agentinfo.ts
@@ -48,7 +48,7 @@
             return Date.parse(this.timestamp + "Z") < (Date.now() - (3 * 60 * 1000));
         }
 
-        public startRealtime(): JQuery.Promise<unknown> {
+        public startRealtime(): JQuery.Thenable<unknown> {
             this.timesRequested++;
             this.nextTry = Date.now() + Math.round(10000 * Math.pow(1.8, Math.min(10, this.timesRequested)));
             this.startingRealtime(true);
diff --git a/ts/Dashboard/Realtime/micc-realtime-demo-proxy.ts b/ts/Dashboard/Realtime/micc-realtime-demo-proxy.ts
index d6b556c..95ee76d 100644
--- a/ts/Dashboard/Realtime/micc-realtime-demo-proxy.ts
+++ b/ts/Dashboard/Realtime/micc-realtime-demo-proxy.ts
@@ -1349,7 +1349,7 @@ namespace Brightmetrics.Dashboard.Realtime {
                     console.log("Unsupported method", methodName, args);
                     break;
             }
-            return $.Deferred().resolve();
+            return $.Deferred().resolve().promise();
         }
     }
 }
diff --git a/ts/Dashboard/Realtime/purecloud-realtime-demo-proxy.ts b/ts/Dashboard/Realtime/purecloud-realtime-demo-proxy.ts
index cfc11ac..981894d 100644
--- a/ts/Dashboard/Realtime/purecloud-realtime-demo-proxy.ts
+++ b/ts/Dashboard/Realtime/purecloud-realtime-demo-proxy.ts
@@ -1934,7 +1934,7 @@ namespace Brightmetrics.Dashboard.Realtime {
                     console.log("Unsupported method", methodName, args);
                     break;
             }
-            return $.Deferred().resolve();
+            return $.Deferred().resolve().promise();
         }
     }
 }
diff --git a/ts/Dashboard/Realtime/realtime-demo-hub.ts b/ts/Dashboard/Realtime/realtime-demo-hub.ts
index f80242c..562601b 100644
--- a/ts/Dashboard/Realtime/realtime-demo-hub.ts
+++ b/ts/Dashboard/Realtime/realtime-demo-hub.ts
@@ -41,7 +41,7 @@
                 }
                 deferred.resolve();
             }, 500);
-            return deferred;
+            return deferred.promise();
         }
         public createHubProxy(hubName: string): SignalR.Hub.Proxy {
             const proxy = this.demoType === "pure" ? new PureCloudDemoProxy() :
diff --git a/ts/Dashboard/Realtime/realtime-demo-proxy.ts b/ts/Dashboard/Realtime/realtime-demo-proxy.ts
index ba40928..b108517 100644
--- a/ts/Dashboard/Realtime/realtime-demo-proxy.ts
+++ b/ts/Dashboard/Realtime/realtime-demo-proxy.ts
@@ -1357,7 +1357,7 @@ namespace Brightmetrics.Dashboard.Realtime {
                     console.log("Unsupported method", methodName, args);
                     break;
             }
-            return $.Deferred().resolve();
+            return $.Deferred().resolve().promise();
         }
     }
 }
diff --git a/ts/Dashboard/Realtime/realtimehub.ts b/ts/Dashboard/Realtime/realtimehub.ts
index 792c9d3..5a7d398 100644
--- a/ts/Dashboard/Realtime/realtimehub.ts
+++ b/ts/Dashboard/Realtime/realtimehub.ts
@@ -66,7 +66,7 @@ namespace Brightmetrics.Dashboard.Realtime {
         private companyId: number;
         private agentInfo: { [agentId: string]: AgentInfo };
         private dsiAgentMap: { [dsiId: string]: string };
-        private agentRequestsInFlight: { [agentId: string]: JQuery.Promise<AgentInfo> };
+        private agentRequestsInFlight: { [agentId: string]: JQuery.Thenable<AgentInfo> };
         private started: boolean;
         private checkTimer: number;
         private hubTimer: number;
@@ -148,7 +148,7 @@ namespace Brightmetrics.Dashboard.Realtime {
             return requestInFlight;
         }
 
-        private getAgentInfo(agentId: string) {
+        private getAgentInfo(agentId: string): JQuery.Thenable<AgentInfo> {
             this.log("getAgentInfo", agentId);
             const agentInfo = this.agentInfo[agentId];
             if (agentInfo.isExpired()) {
@@ -729,7 +729,7 @@ request because connection state is ${this.connectionState()}`);
         }
 
         public getDimensionValues(dsiId: string, queryType: string)
-            : Promise<Brightmetrics.Interfaces.IDimensionValuesResponse>
+            : JQuery.Thenable<Brightmetrics.Interfaces.IDimensionValuesResponse>
         {
             const agentId = this.dsiAgentMap[dsiId];
             if (agentId === void 0) {
diff --git a/ts/Dashboard/ViewModels/alertsettingsdialog.ts b/ts/Dashboard/ViewModels/alertsettingsdialog.ts
index 8e23f75..2e4fc80 100644
--- a/ts/Dashboard/ViewModels/alertsettingsdialog.ts
+++ b/ts/Dashboard/ViewModels/alertsettingsdialog.ts
@@ -73,7 +73,7 @@ namespace Brightmetrics.Dashboard.ViewModels {
         isRealtime: boolean;
         dsiId: string | number;
         valuesSelected?: KnockoutComputed<any>;
-        getPossibleValuesForValueIndex(valueIndex: number): Promise<string[]>;
+        getPossibleValuesForValueIndex(valueIndex: number): JQuery.Thenable<string[]>;
     }
 
     // tslint:disable max-classes-per-file
diff --git a/ts/Dashboard/ViewModels/chart.ts b/ts/Dashboard/ViewModels/chart.ts
index a01ebb4..228dd70 100644
--- a/ts/Dashboard/ViewModels/chart.ts
+++ b/ts/Dashboard/ViewModels/chart.ts
@@ -1488,7 +1488,7 @@ The real-time agent is experiencing the following errors that may be affecting
 this chart:
 <br />
 <br />
-${_.map(errors, (e) => `- ${_.escape(e)}`).join("<br />")}
+${_.map(errors, (e: any) => `- ${_.escape(e)}`).join("<br />")}
 <br />
 <br />
 Please ${getContactSupportText()} for more information
diff --git a/ts/Dashboard/ViewModels/chartoptionsdialog.ts b/ts/Dashboard/ViewModels/chartoptionsdialog.ts
index befabbe..9e6e7d4 100644
--- a/ts/Dashboard/ViewModels/chartoptionsdialog.ts
+++ b/ts/Dashboard/ViewModels/chartoptionsdialog.ts
@@ -249,7 +249,7 @@ Count) can be charted together.`),
             });
     }
 
-    function runPossibleValuesQuery(dsiId: number, possibleValuesQuery: string): Promise<string[]> {
+    function runPossibleValuesQuery(dsiId: number, possibleValuesQuery: string): JQuery.Thenable<string[]> {
         const realtimeHub = Brightmetrics.Dashboard.Realtime.RealtimeHub.getDefaultInstance();
         const query = possibleValuesQuery.substring("query:".length);
 
@@ -268,11 +268,11 @@ Count) can be charted together.`),
             });
     }
 
-    function promiseFromResult<T>(result: T): Promise<T> {
+    function promiseFromResult<T>(result: T): JQuery.Thenable<T> {
         return $.Deferred<T>().resolve(result).promise();
     }
 
-    function getPossibleValues(factIndex: number, dsi: BIs.IDataSourceInstance | null): Promise<string[]> {
+    function getPossibleValues(factIndex: number, dsi: BIs.IDataSourceInstance | null): JQuery.Thenable<string[]> {
         const possibleValues = getPossibleValuesField(factIndex, dsi);
         if (!possibleValues) {
             return promiseFromResult([]);
@@ -1162,7 +1162,7 @@ Count) can be charted together.`),
             return getPossibleValuesField(this._decodedColGrpValIdx(), this._dsi());
         }
 
-        private _getPossibleValuesForColumnGroupingIndex(): Promise<string[]> {
+        private _getPossibleValuesForColumnGroupingIndex(): JQuery.Thenable<string[]> {
             return getPossibleValues(this._decodedColGrpValIdx(), this._dsi());
         }
 
@@ -2012,7 +2012,7 @@ Count) can be charted together.`),
                         buttonLabels: ["CONTINUE"],
                         content: "Changes have been made, if you continue they will be lost. Do you wish to continue?",
                         title: "Unsaved Changes",
-                    }) as Promise<"CONTINUE" | "CANCEL">).then((choice) => {
+                    }) as JQuery.Thenable<"CONTINUE" | "CANCEL">).then((choice) => {
                         if (choice === "CONTINUE") {
                             doCancel();
                         }
@@ -2036,7 +2036,7 @@ like to update your alerts before proceeding, click the cancel button below and
 navigate to the Alerts section to make changes.
 `),
                         title: "Confirm Alert Changes",
-                    }) as Promise<"CONTINUE" | "CANCEL">).then((choice) => {
+                    }) as JQuery.Thenable<"CONTINUE" | "CANCEL">).then((choice) => {
                         if (choice === "CONTINUE") {
                             this._removeInvalidAlerts();
 
diff --git a/ts/Dashboard/ViewModels/copychartdialog.ts b/ts/Dashboard/ViewModels/copychartdialog.ts
index 1b36d88..18a6900 100644
--- a/ts/Dashboard/ViewModels/copychartdialog.ts
+++ b/ts/Dashboard/ViewModels/copychartdialog.ts
@@ -15,7 +15,7 @@ namespace Brightmetrics.Dashboard.ViewModels {
         chartName: string;
         currentTabId: string;
         tabsList: ITabListItem[];
-        onCopy(destinationTabId: string): Promise<any>;
+        onCopy(destinationTabId: string): JQuery.Thenable<any>;
     }
 
     export class CopyChartDialog extends BVs.DialogViewModel {
diff --git a/ts/Dashboard/ViewModels/customcolumngroupsdialog.ts b/ts/Dashboard/ViewModels/customcolumngroupsdialog.ts
index ee93da8..3ba82f2 100644
--- a/ts/Dashboard/ViewModels/customcolumngroupsdialog.ts
+++ b/ts/Dashboard/ViewModels/customcolumngroupsdialog.ts
@@ -60,7 +60,7 @@ namespace Brightmetrics.Dashboard.ViewModels {
 
     interface ICustomColumnGroupsDialogOptions {
         columnGroups: DTOs.ICustomColumnGrouping[];
-        possibleValues: Promise<string[]>;
+        possibleValues: JQuery.Thenable<string[]>;
         updateCallback(result: DTOs.ICustomColumnGrouping[]): void;
     }
 
@@ -76,7 +76,7 @@ namespace Brightmetrics.Dashboard.ViewModels {
             super(props);
         }
 
-        private _editValues(columnGroup: ColumnGroup, possibleValuesQuery: Promise<string[]>) {
+        private _editValues(columnGroup: ColumnGroup, possibleValuesQuery: JQuery.Thenable<string[]>) {
             const presetValues = columnGroup.values.slice(0);
 
             const msDialog: MultipleSelect.ViewModels.MultipleSelectDialog =
diff --git a/ts/Dashboard/ViewModels/dashboard.ts b/ts/Dashboard/ViewModels/dashboard.ts
index 8ec3611..c5e797a 100644
--- a/ts/Dashboard/ViewModels/dashboard.ts
+++ b/ts/Dashboard/ViewModels/dashboard.ts
@@ -48,7 +48,7 @@
         tabActions: Interfaces.ITabActionsBase;
         pdtProps?: IPartnerDashboardTemplateProps;
         isCancelButtonEnabled?: KnockoutComputed<boolean>;
-        addChartToOtherTab(chart: DTOs.IChart, destinationTabId: string): Promise<unknown>;
+        addChartToOtherTab(chart: DTOs.IChart, destinationTabId: string): JQuery.Thenable<unknown>;
         createChartBoxFromClassic(otherBoxes: IFlowgridBox[], chart: DTOs.IChart): Classes.ChartBox;
         onRedo(callback: (
             from: Interfaces.IDashboardTab,
@@ -85,7 +85,7 @@
         private _dataRefreshTimer: number;
         private _createChartBoxFromClassic: (otherBoxes: IFlowgridBox[], chart: DTOs.IChart) => Classes.ChartBox;
         private canEdit: boolean;
-        private _addChartToOtherTab: (chart: DTOs.IChart, destinationTabId: string) => Promise<unknown>;
+        private _addChartToOtherTab: (chart: DTOs.IChart, destinationTabId: string) => JQuery.Thenable<unknown>;
         private _allTabs: KnockoutComputed<Interfaces.IDashboardTab[]>;
 
         // #region PARTNER TEMPLATES ONLY
@@ -160,7 +160,7 @@
             }).open();
         }
 
-        private _copyChartToDashboard(chart: DTOs.IChart, destinationTabId: string): Promise<unknown> {
+        private _copyChartToDashboard(chart: DTOs.IChart, destinationTabId: string): JQuery.Thenable<unknown> {
             const tab = this.toJSON();
 
             chart = ko.toJS(chart); // deep clone
@@ -334,7 +334,7 @@
                             this.hasLinkedDashboards(false);
                         }
                     }
-                }).catch((err) => {
+                }, (err) => {
                     this.hasLinkedDashboards(false);
                 });
             return this.hasLinkedDashboards();
@@ -346,12 +346,12 @@
                     if (response.success) {
                         this.processUsersPerms(response.users.length);
                     }
-                }).catch((err) => {
+                }, (err) => {
                     this.processUsersPerms(1);
                 });
         }
 
-        private requestUsers(): Promise<any> {
+        private requestUsers(): JQuery.Thenable<any> {
             return Utils.ajaxRequest(`/Companies/${defCompanyId}/DashboardTabs/${this._ref.id}?target=acl`);
         }
 
@@ -376,11 +376,11 @@
             this._deleteConfirmationDialog.open();
         }
 
-        private _getPublicTabLinks(): Promise<number> {
+        private _getPublicTabLinks(): JQuery.Thenable<number> {
             return Utils.ajaxRequest(`/Companies/${defCompanyId}/DashboardTabs/${this._ref.id}/TabLinks`);
         }
 
-        private _handleSave(): Promise<unknown> {
+        private _handleSave(): JQuery.Thenable<unknown> {
                 this.isLoading(true);
 
                 return this._tabActions.save()
@@ -434,7 +434,7 @@
             });
         }
 
-        private _handleSaveAs(): Promise<unknown> {
+        private _handleSaveAs(): JQuery.Thenable<unknown> {
             let tabName = "";
 
             if (this._hasSomeRealtimeCharts()) {
@@ -891,7 +891,7 @@
                     const playPromise = audioElement.play();
 
                     if (playPromise) {
-                        playPromise.catch(() => {
+                        playPromise.then(null, () => {
                             this.notifyAudioError();
                         });
                     }
diff --git a/ts/Dashboard/ViewModels/page.ts b/ts/Dashboard/ViewModels/page.ts
index 8754b5e..63e8d82 100644
--- a/ts/Dashboard/ViewModels/page.ts
+++ b/ts/Dashboard/ViewModels/page.ts
@@ -531,7 +531,7 @@
             }
         }
 
-        private _saveActiveTab(): Promise<unknown> {
+        private _saveActiveTab(): JQuery.Thenable<unknown> {
             const tab = this._getTabViewModelSnapshot()!;
 
             if (!this.isRadianceTab()) {
@@ -559,7 +559,7 @@
                 });
         }
 
-        private _discardActiveTabChanges(): Promise<unknown> {
+        private _discardActiveTabChanges(): JQuery.Thenable<unknown> {
             const tab = JSON.parse(this._lastSavedActiveTabState()) as Interfaces.IDashboardTab;
 
             return this._updateActiveTab(tab);
@@ -647,16 +647,16 @@
             return "";
         }
 
-        private _showUnsavedChangesDialog(): Promise<"DISCARD" | "SAVE" | "CANCEL"> {
+        private _showUnsavedChangesDialog(): JQuery.Thenable<"DISCARD" | "SAVE" | "CANCEL"> {
             return Utils.basicConfirm2({
                 buttonClasses: ["c-btn--red-inv", "c-btn--green"],
                 buttonLabels: ["DISCARD", "SAVE"],
                 content: "You have unsaved changes on your dashboard, how would you like to continue?",
                 title: "Unsaved Changes",
-            }) as Promise<"DISCARD" | "SAVE" | "CANCEL">;
+            }) as JQuery.Thenable<"DISCARD" | "SAVE" | "CANCEL">;
         }
 
-        private _handlePendingChanges(): Promise<unknown> {
+        private _handlePendingChanges(): JQuery.Thenable<unknown> {
             // If we are in the process of reloading this tab with one modified
             // by another user, then ignore `hasPendingChanges` because we don't
             // need a second dialog to come up for confirmation.
@@ -690,7 +690,7 @@
             this._lastSavedActiveTabState(JSON.stringify(tab));
         }
 
-        private _updateActiveTab(tab: Interfaces.IDashboardTab): Promise<unknown> {
+        private _updateActiveTab(tab: Interfaces.IDashboardTab): JQuery.Thenable<unknown> {
             this.tabs.replace(this._getActiveTab()!, tab);
 
             this._updateTabViewModel();
@@ -698,13 +698,13 @@
             return Constants.resolvedDeferred;
         }
 
-        private _setActiveTab(tab: Interfaces.IDashboardTab): Promise<unknown> {
+        private _setActiveTab(tab: Interfaces.IDashboardTab): JQuery.Thenable<unknown> {
             const nextIndex = Math.max(_.indexOf(this.tabs.peek(), tab), 0);
 
             return this._setActiveTabIndex(nextIndex);
         }
 
-        private _setActiveTabIndex(index: number): Promise<unknown> {
+        private _setActiveTabIndex(index: number): JQuery.Thenable<unknown> {
             // Here we need to do all of the preliminary work of
             // checking / handling this state transition
 
@@ -740,7 +740,7 @@
             }
         }
 
-        private _setActiveTabEditMode(toEdit: boolean): Promise<unknown> {
+        private _setActiveTabEditMode(toEdit: boolean): JQuery.Thenable<unknown> {
             if (toEdit && this.isPublicLinkView) {
                 throw new Error("Cannot switch to edit mode while viewing a public dashboard");
             }
@@ -799,7 +799,7 @@
         }
 
         private _addChartToOtherTab(chart: DTOs.IChart, destinationTabId: string)
-            : Promise<unknown>
+            : JQuery.Thenable<unknown>
         {
             const toTab = _.find(this.tabs(), (t) => t.id === destinationTabId)!;
             const dsiId = Utils.DSI.parseId(chart.items[0].itemid || "");
@@ -838,7 +838,7 @@
             return Constants.rejectedDeferred;
         }
 
-        private _addTab(newTab: Interfaces.IDashboardTab): Promise<unknown> {
+        private _addTab(newTab: Interfaces.IDashboardTab): JQuery.Thenable<unknown> {
             isProcessingAdd = true;
 
             this.tabs.push(newTab);
@@ -860,7 +860,7 @@
                 .then(() => this._setActiveTabEditMode(true));
         }
 
-        private _removeActiveTab(): Promise<unknown> {
+        private _removeActiveTab(): JQuery.Thenable<unknown> {
             const activeTabIndex = this.activeTabIndex();
             let nextTabIndex = activeTabIndex;
             const tabs = this.tabs();
@@ -884,7 +884,7 @@
             });
         }
 
-        private _getPublicLinkCount(): Promise<number> {
+        private _getPublicLinkCount(): JQuery.Thenable<number> {
             return Utils.ajaxRequest(`/Companies/${defCompanyId}/DashboardTabs/${this._getActiveTabId()}/TabLinks`)
                 .then(
                     (response: { data?: string[] }) => _.size(response.data!) || 0,
@@ -963,7 +963,7 @@
         }
 
         private _showDashboardHasBeenModifiedDialog(updated: Interfaces.IDashboardTab)
-            : Promise<unknown>
+            : JQuery.Thenable<unknown>
         {
             return Utils.basicConfirm2({
                 buttonLabels: ["RELOAD"],
diff --git a/ts/Dashboard/timelinechartrenderer.ts b/ts/Dashboard/timelinechartrenderer.ts
index fb67a45..f5b9c27 100644
--- a/ts/Dashboard/timelinechartrenderer.ts
+++ b/ts/Dashboard/timelinechartrenderer.ts
@@ -1362,7 +1362,7 @@ Please wait until the call is complete to view the cradle-to-grave details of th
             agentState: IAgentState,
             historicalDSIID: number,
             realtimeDSIID: number)
-            : Promise<number> {
+            : JQuery.Thenable<number> {
 
             const defd = $.Deferred();
             const params = $.param({
diff --git a/ts/DataSources/ViewModels/datasourceconfigdialog.ts b/ts/DataSources/ViewModels/datasourceconfigdialog.ts
index 4d1c481..9304610 100644
--- a/ts/DataSources/ViewModels/datasourceconfigdialog.ts
+++ b/ts/DataSources/ViewModels/datasourceconfigdialog.ts
@@ -557,9 +557,9 @@ namespace Brightmetrics.DataSources.ViewModels {
             }
             const agentId = this.selectedAgent().EmailAddress;
             if (!agentId || agentId === "Add New Agent") {
-                return $.Deferred().reject({ errormsg: "You must choose an agent to use for connecting to this data source." });
+                return $.Deferred().reject({ errormsg: "You must choose an agent to use for connecting to this data source." }).promise();
             }
-            return $.Deferred().resolve({ agent: { EmailAddress: agentId } });
+            return $.Deferred().resolve({ agent: { EmailAddress: agentId } }).promise();
         }
 
         /* tslint:disable:no-shadowed-variable */
diff --git a/ts/DataSources/ViewModels/datasourcesview.ts b/ts/DataSources/ViewModels/datasourcesview.ts
index 3130b02..7a6c843 100644
--- a/ts/DataSources/ViewModels/datasourcesview.ts
+++ b/ts/DataSources/ViewModels/datasourcesview.ts
@@ -369,7 +369,7 @@ namespace Brightmetrics.DataSources.ViewModels {
                     Utils.logError("Unable to get detailed DataConnectionGroups");
                     deferred.resolve();
                 });
-            return deferred;
+            return deferred.promise();
         }
 
         public initialize(props: IDataSourcesView) {
diff --git a/ts/DataSources/ViewModels/editsubscriptiondialog.ts b/ts/DataSources/ViewModels/editsubscriptiondialog.ts
index c1e27c0..8a53ab2 100644
--- a/ts/DataSources/ViewModels/editsubscriptiondialog.ts
+++ b/ts/DataSources/ViewModels/editsubscriptiondialog.ts
@@ -90,7 +90,7 @@
             return SubscriptionType.MonthToMonth;
         }
 
-        private _previewSubscription(data: JQuery.PlainObject): Promise<any>
+        private _previewSubscription(data: JQuery.PlainObject): JQuery.Thenable<any>
         {
             return Utils.ajaxRequest(`/DataConnectionGroups/${this.dataConnectionGroupId}`, {
                 previewOnly: true,
@@ -98,7 +98,7 @@
             });
         }
 
-        private _updateSubscription(): Promise<any> {
+        private _updateSubscription(): JQuery.Thenable<any> {
             this.isLoading(true);
 
             const data = {
diff --git a/ts/DataSources/ViewModels/paymentinfodialog.ts b/ts/DataSources/ViewModels/paymentinfodialog.ts
index 58d27dc..9848113 100644
--- a/ts/DataSources/ViewModels/paymentinfodialog.ts
+++ b/ts/DataSources/ViewModels/paymentinfodialog.ts
@@ -416,7 +416,7 @@ namespace Brightmetrics.DataSources.ViewModels {
                 });
             }
 
-            return defer;
+            return defer.promise();
         }
 
         public createEventHandlers(props: IPaymentInfoDialogProps) {
diff --git a/ts/Insights/Scorecards/ViewModels/saveasdialog.ts b/ts/Insights/Scorecards/ViewModels/saveasdialog.ts
index 0d7b1c2..065aed3 100644
--- a/ts/Insights/Scorecards/ViewModels/saveasdialog.ts
+++ b/ts/Insights/Scorecards/ViewModels/saveasdialog.ts
@@ -1,7 +1,7 @@
 ﻿namespace Brightmetrics.Insights.Scorecards.ViewModels {
     interface ISaveAsDialogProps {
         scorecard: Interfaces.IScorecard;
-        doSaveAs: (sc: Interfaces.IScorecard) => Promise<unknown>;
+        doSaveAs: (sc: Interfaces.IScorecard) => JQuery.Thenable<unknown>;
     }
 
     export class SaveAsDialog extends Brightmetrics.ViewModels.DialogViewModel {
@@ -71,8 +71,8 @@
                     delete scorecard.schedules;
 
                     props.doSaveAs(scorecard)
-                        .then(() => this.destroy())
-                        .catch(() => {
+                        .then(() => this.destroy(), 
+                        () => {
                             Utils.notifyUser(
                                 "Failed to create new Scorecard. Please refresh the page and try again.",
                                 ["error"]);
diff --git a/ts/Insights/Scorecards/ViewModels/scorecardtopbar.ts b/ts/Insights/Scorecards/ViewModels/scorecardtopbar.ts
index ed64974..9a2580d 100644
--- a/ts/Insights/Scorecards/ViewModels/scorecardtopbar.ts
+++ b/ts/Insights/Scorecards/ViewModels/scorecardtopbar.ts
@@ -17,9 +17,9 @@
         isScorecardLoadingData: KnockoutComputed<boolean>;
         onBack: () => void;
         onCancel: () => void;
-        save: (scorecard: Interfaces.IScorecard) => Promise<unknown>;
-        saveNew: (scorecard: Interfaces.IScorecard) => Promise<unknown>;
-        onRemove: () => Promise<unknown>;
+        save: (scorecard: Interfaces.IScorecard) => JQuery.Thenable<unknown>;
+        saveNew: (scorecard: Interfaces.IScorecard) => JQuery.Thenable<unknown>;
+        onRemove: () => JQuery.Thenable<unknown>;
         getSnapshot: () => Interfaces.IScorecard;
         editPermissions: (scorecard: Interfaces.IScorecard) => void;
         onSaveSchedule: (scorecard: Interfaces.IScorecardSchedule, id: string) => void;
@@ -187,8 +187,9 @@
                         this.isLoading(true);
 
                         props.save(props.getSnapshot())
-                            .then(() => Utils.notifyUser("Save successful", ["success"]))
-                            .catch(() => Utils.notifyUser("Failed to save. Please try again", ["error"]))
+                            .then(
+                                () => Utils.notifyUser("Save successful", ["success"]),
+                                () => Utils.notifyUser("Failed to save. Please try again", ["error"]))
                             .then(() => this.isLoading(false));
                     } else {
                         // Go back to VIEW mode.
diff --git a/ts/Insights/Scorecards/ViewModels/scorecardview.ts b/ts/Insights/Scorecards/ViewModels/scorecardview.ts
index a68e8e2..ce3b0a2 100644
--- a/ts/Insights/Scorecards/ViewModels/scorecardview.ts
+++ b/ts/Insights/Scorecards/ViewModels/scorecardview.ts
@@ -152,7 +152,7 @@ namespace Brightmetrics.Insights.Scorecards.ViewModels {
         onBack: () => void;
         onUpdate: (updated: Interfaces.IScorecard) => void;
         onAdd: (added: Interfaces.IScorecard) => void;
-        onRemove: (scorecard: Interfaces.IScorecard) => Promise<unknown>;
+        onRemove: (scorecard: Interfaces.IScorecard) => JQuery.Thenable<unknown>;
         onEditPermissions: (scorecard: Interfaces.IScorecard) => void;
         onSaveSchedule: (scorecard: Interfaces.IScorecardSchedule, id: string) => void;
         onDeleteSchedule: (scorecard: Brightmetrics.Classes.ScheduleEntry, id: string) => void;
@@ -210,14 +210,14 @@ namespace Brightmetrics.Insights.Scorecards.ViewModels {
             super(props);
         }
 
-        private _save(scorecard: Interfaces.IScorecard): Promise<unknown> {
+        private _save(scorecard: Interfaces.IScorecard): JQuery.Thenable<unknown> {
             return Utils.ajaxRequest(`/Companies/${defCompanyId}/Scorecards/${scorecard.id}`, {
                 context: "content",
                 scorecardContent: JSON.stringify(scorecard)
             });
         }
 
-        private _saveAs(scorecard: Interfaces.IScorecard): Promise<unknown> {
+        private _saveAs(scorecard: Interfaces.IScorecard): JQuery.Thenable<unknown> {
             scorecard.id = _.uniqueId("DISNEW");
             return Utils.ajaxRequest(`/Companies/${defCompanyId}/Scorecards`, {
                 dataConnectionGroupId: scorecard.dcgId,
@@ -235,7 +235,7 @@ namespace Brightmetrics.Insights.Scorecards.ViewModels {
 
                 this._dataStore.clear();
 
-                const requests = [] as Array<Promise<unknown>>;
+                const requests = [] as Array<JQuery.Thenable<unknown>>;
 
                 _.forEach(this._columns, (c) => {
                     if (c.data) {
diff --git a/ts/Insights/ViewModels/innergroup.ts b/ts/Insights/ViewModels/innergroup.ts
index 5d67102..1cd78cd 100644
--- a/ts/Insights/ViewModels/innergroup.ts
+++ b/ts/Insights/ViewModels/innergroup.ts
@@ -11,7 +11,7 @@ namespace Brightmetrics.Insights.ViewModels {
         schedules: BIs.IForecastSchedule[];
         addOrUpdateSchedule(schedule: BIs.IForecastSchedule): void;
         deleteSchedule(schedule: BIs.IForecastSchedule): void;
-        runReport(schedule: BIs.IForecastSchedule): Promise<any>;
+        runReport(schedule: BIs.IForecastSchedule): JQuery.Thenable<any>;
     }
 
     export class InnerGroup extends ViewModel {
diff --git a/ts/Insights/ViewModels/outergroup.ts b/ts/Insights/ViewModels/outergroup.ts
index eb313cf..1521d08 100644
--- a/ts/Insights/ViewModels/outergroup.ts
+++ b/ts/Insights/ViewModels/outergroup.ts
@@ -45,7 +45,7 @@ namespace Brightmetrics.Insights.ViewModels {
         }>;
         addOrUpdateSchedule(schedule: BIs.IForecastSchedule): void;
         deleteSchedule(schedule: BIs.IForecastSchedule): void;
-        runReport(schedule: BIs.IForecastSchedule): Promise<any>;
+        runReport(schedule: BIs.IForecastSchedule): JQuery.Thenable<any>;
     }
 
     export class OuterGroup extends ViewModel {
diff --git a/ts/Insights/ViewModels/schedule.ts b/ts/Insights/ViewModels/schedule.ts
index 856ba0a..7e1bb59 100644
--- a/ts/Insights/ViewModels/schedule.ts
+++ b/ts/Insights/ViewModels/schedule.ts
@@ -10,7 +10,7 @@ namespace Brightmetrics.Insights.ViewModels {
         schedule: BIs.IForecastSchedule;
         addOrUpdateSchedule(schedule: BIs.IForecastSchedule): void;
         deleteSchedule(schedule: BIs.IForecastSchedule): void;
-        runReport(schedule: BIs.IForecastSchedule): Promise<any>;
+        runReport(schedule: BIs.IForecastSchedule): JQuery.Thenable<any>;
     }
 
     export class Schedule extends ViewModel {
diff --git a/ts/Insights/ViewModels/scheduledialog.ts b/ts/Insights/ViewModels/scheduledialog.ts
index 6b93c9a..fbacdf1 100644
--- a/ts/Insights/ViewModels/scheduledialog.ts
+++ b/ts/Insights/ViewModels/scheduledialog.ts
@@ -29,7 +29,7 @@ namespace Brightmetrics.Insights.ViewModels {
         availableDataSourceGroups: BIs.IDataSourceGroup[];
         availableGroupsByDSGID: JQuery.PlainObject<KnockoutObservableArray<string>>;
         addOrUpdateSchedule?(schedule: BIs.IForecastSchedule): void;
-        runSchedule?(schedule: BIs.IForecastSchedule): Promise<any>;
+        runSchedule?(schedule: BIs.IForecastSchedule): JQuery.Thenable<any>;
     }
 
     export class ScheduleDialog extends BVs.DialogViewModel {
@@ -108,7 +108,7 @@ namespace Brightmetrics.Insights.ViewModels {
             };
         }
 
-        private _runSchedule(props: IScheduleDialogProps, schedule: BIs.IForecastSchedule): Promise<any> {
+        private _runSchedule(props: IScheduleDialogProps, schedule: BIs.IForecastSchedule): JQuery.Thenable<any> {
             this.requestInFlight(true);
 
             const always = () => this.requestInFlight(false);
@@ -120,7 +120,7 @@ namespace Brightmetrics.Insights.ViewModels {
             return req;
         }
 
-        private _saveSchedule(schedule: BIs.IForecastSchedule): Promise<any> {
+        private _saveSchedule(schedule: BIs.IForecastSchedule): JQuery.Thenable<any> {
             let restURL = "";
 
             if (this.isEdit) {
diff --git a/ts/Insights/ViewModels/sendnowdialog.ts b/ts/Insights/ViewModels/sendnowdialog.ts
index 0eb4902..5d7eb53 100644
--- a/ts/Insights/ViewModels/sendnowdialog.ts
+++ b/ts/Insights/ViewModels/sendnowdialog.ts
@@ -5,7 +5,7 @@ namespace Brightmetrics.Insights.ViewModels {
 
     interface ISendNowDialogProps {
         schedule: BIs.IForecastSchedule;
-        runReport(schedule: BIs.IForecastSchedule): Promise<any>;
+        runReport(schedule: BIs.IForecastSchedule): JQuery.Thenable<any>;
     }
 
     export class SendNowDialog extends Brightmetrics.ViewModels.DialogViewModel {
@@ -19,7 +19,7 @@ namespace Brightmetrics.Insights.ViewModels {
             super(props);
         }
 
-        private _sendNow(props: ISendNowDialogProps): Promise<any> {
+        private _sendNow(props: ISendNowDialogProps): JQuery.Thenable<any> {
             return props.runReport({
                 ...props.schedule,
                 destinations: this.destinations(),
diff --git a/ts/Insights/ViewModels/staffforecastingview.ts b/ts/Insights/ViewModels/staffforecastingview.ts
index f864682..8d5735a 100644
--- a/ts/Insights/ViewModels/staffforecastingview.ts
+++ b/ts/Insights/ViewModels/staffforecastingview.ts
@@ -37,7 +37,7 @@ namespace Brightmetrics.Insights.ViewModels {
             return dsgInfo;
         }
 
-        private _runSchedule(schedule: BIs.IForecastSchedule): Promise<any> {
+        private _runSchedule(schedule: BIs.IForecastSchedule): JQuery.Thenable<any> {
             const req = Utils.ajaxRequest("/Commands", {
                 ...schedule,
                 command: "test-forecast-report-run",
diff --git a/ts/MultipleSelect/Interfaces/imultipleselectdialogprops.ts b/ts/MultipleSelect/Interfaces/imultipleselectdialogprops.ts
index 4b0d7c2..6cfc9c5 100644
--- a/ts/MultipleSelect/Interfaces/imultipleselectdialogprops.ts
+++ b/ts/MultipleSelect/Interfaces/imultipleselectdialogprops.ts
@@ -1,7 +1,7 @@
 ﻿namespace Brightmetrics.MultipleSelect.Interfaces {
     export interface IMultipleSelectDialogProps<T = string | number> extends IMultipleSelectProps<T> {
         nameForItem: string;
-        beforeDestroy?: () => Promise<void>;
+        beforeDestroy?: () => JQuery.Thenable<void>;
         fadeOutOnClose?: boolean;
         isChildDialog?: boolean;
         onClose?: () => void;
diff --git a/ts/MultipleSelect/Interfaces/imultipleselectprops.ts b/ts/MultipleSelect/Interfaces/imultipleselectprops.ts
index e73de78..b65a757 100644
--- a/ts/MultipleSelect/Interfaces/imultipleselectprops.ts
+++ b/ts/MultipleSelect/Interfaces/imultipleselectprops.ts
@@ -6,7 +6,7 @@
          * - Compacting (filtering out bad values).
          * - Handling any errors beforehand.
          */
-        listFetcher: (listIndex: number) => Promise<Array<IKoOption<T>>>;
+        listFetcher: (listIndex: number) => JQuery.Thenable<Array<IKoOption<T>>>;
         listLabels: string[];
         onUpdate: (data: IMultipleSelectJSON<T>) => void;
         // Optionals:
diff --git a/ts/MultipleSelect/ViewModels/list.ts b/ts/MultipleSelect/ViewModels/list.ts
index cdd32ca..09f3567 100644
--- a/ts/MultipleSelect/ViewModels/list.ts
+++ b/ts/MultipleSelect/ViewModels/list.ts
@@ -8,7 +8,7 @@ namespace Brightmetrics.MultipleSelect.ViewModels {
         /** List label */
         label: string;
         value: number;
-        itemFetcher: () => Promise<Array<IKoOption<T>>>;
+        itemFetcher: () => JQuery.Thenable<Array<IKoOption<T>>>;
         /** Selected values (if editing existing) */
         startingSelectedValues: T[];
         isNotExclusive?: boolean;
@@ -20,7 +20,7 @@ namespace Brightmetrics.MultipleSelect.ViewModels {
 
         public label: string;
         public value: number;
-        public itemFetcher: () => Promise<Array<IKoOption<T>>>;
+        public itemFetcher: () => JQuery.Thenable<Array<IKoOption<T>>>;
         public items: KnockoutObservableArray<ListItem<T>>;
         public itemRequestIsFinished: KnockoutObservable<boolean>;
         /** Used as a helper for SHIFT+CLICK functionality. */
diff --git a/ts/MultipleSelect/ViewModels/multipleselectdialog.ts b/ts/MultipleSelect/ViewModels/multipleselectdialog.ts
index 7f1c8c7..7837bbe 100644
--- a/ts/MultipleSelect/ViewModels/multipleselectdialog.ts
+++ b/ts/MultipleSelect/ViewModels/multipleselectdialog.ts
@@ -13,7 +13,7 @@ namespace Brightmetrics.MultipleSelect.ViewModels {
     const defaultWidth = 700;
 
     export class MultipleSelectDialog<T = string | number> extends BVs.DialogViewModel {
-        private beforeDestroy?: () => Promise<void>;
+        private beforeDestroy?: () => JQuery.Thenable<void>;
 
         public dialogName: string;
         public fadeOutOnClose: boolean;
diff --git a/ts/MyAccount/ViewModels/apiaccess.ts b/ts/MyAccount/ViewModels/apiaccess.ts
index e5e8b19..1d07a1c 100644
--- a/ts/MyAccount/ViewModels/apiaccess.ts
+++ b/ts/MyAccount/ViewModels/apiaccess.ts
@@ -6,7 +6,7 @@
     const defaultApiRateLimitResetPeriod = "24-hour";
     declare const grecaptcha: {
         // ready(callback: () => void): void;
-        execute(siteKey: string, actionObject: { action: string }): Promise<string>;
+        execute(siteKey: string, actionObject: { action: string }): JQuery.Thenable<string>;
         render(elementId: string, options: {
             sitekey: string;
             callback: (token: string) => void;
@@ -38,7 +38,7 @@
         public rateLimitResetPeriod: KnockoutObservable<string>;
         public apiCallsRemaining: KnockoutComputed<number>;
 
-        private _loadAPIKey(): Promise<string> {
+        private _loadAPIKey(): JQuery.Thenable<string> {
             const defd = $.Deferred<string>();
 
             Utils.ajaxRequest("/Users/me?apiKey=1")
@@ -54,7 +54,7 @@
             return defd.promise();
         }
 
-        private _loadMaxApiRateLimit(): Promise<{ limit: number, period: string }> {
+        private _loadMaxApiRateLimit(): JQuery.Thenable<{ limit: number, period: string }> {
             const defd = $.Deferred<{ limit: number, period: string }>();
             const defaults = {
                 period: defaultApiRateLimitResetPeriod,
@@ -73,7 +73,7 @@
             return defd.promise();
         }
 
-        private _loadApiUsage(): Promise<number> {
+        private _loadApiUsage(): JQuery.Thenable<number> {
             const defd = $.Deferred<number>();
 
             Utils.ajaxRequest(`/Companies/${defCompanyId}?resource=api-usage`)
@@ -88,7 +88,7 @@
             return defd.promise();
         }
 
-        private _confirmCreateAPIKey(isLoading: KnockoutObservable<boolean>): Promise<boolean> {
+        private _confirmCreateAPIKey(isLoading: KnockoutObservable<boolean>): JQuery.Thenable<boolean> {
             return Utils.basicConfirm2({
                 buttonLabels: "REGENERATE",
                 content: Utils.stringUnraw(`
@@ -105,7 +105,7 @@ key.
          * Presents recaptcha checkbox and/or slideshow. `callback` returns a
          * a token based on their response.
          */
-        private _challengeWithRecaptchaV2(): Promise<unknown> {
+        private _challengeWithRecaptchaV2(): JQuery.Thenable<unknown> {
             const defd = $.Deferred();
 
             grecaptcha.render(recaptchaContainerId, {
@@ -124,7 +124,7 @@ key.
          * Uses Google's algorithmic intuition to decide if the user is a robot.
          * Returns a promise with a token based on their response.
          */
-        private _challengeWithRecaptchaV3(): Promise<string> {
+        private _challengeWithRecaptchaV3(): JQuery.Thenable<string> {
             return grecaptcha.execute(grecaptchaV3SiteKey, { action: "resetApiUsage" });
         }
 
@@ -134,7 +134,7 @@ key.
          * @param token
          * @param version
          */
-        private _verifyRecaptchaToken(token: string, version: 2 | 3): Promise<unknown> {
+        private _verifyRecaptchaToken(token: string, version: 2 | 3): JQuery.Thenable<unknown> {
             return Utils.ajaxRequest("/Companies/" + defCompanyId +
                 "?resource=reset-api-usage" +
                 "&apiVersion=" + version +
diff --git a/ts/Registration/ViewModels/registration.ts b/ts/Registration/ViewModels/registration.ts
index 6954512..5d58d65 100644
--- a/ts/Registration/ViewModels/registration.ts
+++ b/ts/Registration/ViewModels/registration.ts
@@ -215,7 +215,7 @@
             super.createEventHandlers();
 
             this.events.onRegister = () => {
-                let promise: Promise<any>;
+                let promise: JQuery.Thenable<any>;
                 this.detailDialog = new RegisterDialog();
 
                 if (this.isValid()) {
@@ -332,7 +332,7 @@
 
                             return null;
                         }
-                    }).catch((failure: any) => {
+                    }, (failure: any) => {
                         let errorMessage = $.trim(failure?.responseJSON?.errormsg ?? "");
                         if (errorMessage) {
                             if (errorMessage.slice(-1)[0] !== ".") {
@@ -453,7 +453,7 @@
             return Utils.ajaxRequest("/Companies/" + companyId + "/DataSourceInstances", postData, opts);
         }
 
-        public createShoreTelAgent(cred: string, companyId: number): Promise<any> {
+        public createShoreTelAgent(cred: string, companyId: number): JQuery.Thenable<any> {
             const postData = {
                 agentName: shoreTelAgentId
             };
@@ -465,7 +465,7 @@
             return Utils.ajaxRequest("/Companies/" + companyId + "/Agents", postData, opts);
         }
 
-        public createCompany(cred: string): Promise<any> {
+        public createCompany(cred: string): JQuery.Thenable<any> {
             const postData: any = this.toCompanyBackendObject();
 
             const opts = {
@@ -475,7 +475,7 @@
             return Utils.ajaxRequest("/Companies", postData, opts);
         }
 
-        public createUser(): Promise<any> {
+        public createUser(): JQuery.Thenable<any> {
             const postData: any = this.toUserBackendObject();
 
             return Utils.ajaxRequest("/Users", postData);
diff --git a/ts/Reports/ViewModels/allreports.ts b/ts/Reports/ViewModels/allreports.ts
index 1ef3c08..525cb0c 100644
--- a/ts/Reports/ViewModels/allreports.ts
+++ b/ts/Reports/ViewModels/allreports.ts
@@ -87,7 +87,7 @@ namespace Brightmetrics.Reports.ViewModels {
         searchTextHasValue: KnockoutComputed<boolean>;
         selectedReport: KnockoutObservable<BRCs.Report>;
         isVARTemplatesPage: boolean;
-        removeReport(report: BRCs.Report): Promise<unknown>;
+        removeReport(report: BRCs.Report): JQuery.Thenable<unknown>;
         handleReportClick(report: BRCs.Report): void;
         updateReport(report: BRCs.Report): void;
         updateReportSchedules(reportId: string, schedules: BIs.IReportSchedule[]): void;
@@ -196,7 +196,7 @@ namespace Brightmetrics.Reports.ViewModels {
         report: BRCs.Report;
         selectedReport: KnockoutObservable<BRCs.Report>;
         isVARTemplatesPage: boolean;
-        removeReport(report: BRCs.Report): Promise<unknown>;
+        removeReport(report: BRCs.Report): JQuery.Thenable<unknown>;
         handleReportClick(report: BRCs.Report): void;
         updateReport(report: BRCs.Report): void;
         updateReportSchedules(reportId: string, schedules: BIs.IReportSchedule[]): void;
@@ -417,7 +417,7 @@ namespace Brightmetrics.Reports.ViewModels {
             props: IReportItemProps,
             reportName: string,
             reportGroup: string,
-            reportDescription: string): Promise<any> {
+            reportDescription: string): JQuery.Thenable<any> {
 
             const templateToSend = _.clone(props.report.template);
 
@@ -528,7 +528,7 @@ Please try again`),
         selectedReport: KnockoutObservable<BRCs.Report>;
         isVARTemplatesPage: boolean;
         createReport(dsi: BIs.IDataSourceInstance, reportType: BREs.ReportType): void;
-        removeReport(report: BRCs.Report): Promise<unknown>;
+        removeReport(report: BRCs.Report): JQuery.Thenable<unknown>;
         handleReportClick(report: BRCs.Report): void;
         updateActiveTabIndex(index: number): void;
         updateLayoutType(updated: BREs.ReportLayoutType): void;
diff --git a/ts/Reports/ViewModels/editor.ts b/ts/Reports/ViewModels/editor.ts
index f808d83..7eca7f7 100644
--- a/ts/Reports/ViewModels/editor.ts
+++ b/ts/Reports/ViewModels/editor.ts
@@ -28,7 +28,7 @@ namespace Brightmetrics.Reports.ViewModels {
         addReport(report: BRCs.Report): void;
         updateReport(report: BRCs.Report): void;
         deleteReport(report: BRCs.Report): void;
-        removeReport(report: BRCs.Report): Promise<unknown>;
+        removeReport(report: BRCs.Report): JQuery.Thenable<unknown>;
         goToReport(report: BRCs.Report): void;
         openReportInNewPage(exportableReport: BRIs.IReportTemplateExport): void;
         revertReportToOriginalState(): void;
diff --git a/ts/Reports/ViewModels/filter.ts b/ts/Reports/ViewModels/filter.ts
index 852addd..313af29 100644
--- a/ts/Reports/ViewModels/filter.ts
+++ b/ts/Reports/ViewModels/filter.ts
@@ -60,7 +60,7 @@ namespace Brightmetrics.Reports.ViewModels {
         displayNote?: (pf: BRIDs.IParameterFilter) => string;
         multipleSelectOptions?: Partial<MultipleSelect.Interfaces.IMultipleSelectDialogProps<string>>;
         setFilterOption?(filterOption: BREs.FilterOption): void;
-        customListFetcher?(dimensionIndex: number): Promise<Array<IKoOption<string>>>;
+        customListFetcher?(dimensionIndex: number): JQuery.Thenable<Array<IKoOption<string>>>;
     }
 
     export class Filter extends Brightmetrics.ViewModel {
@@ -603,7 +603,7 @@ namespace Brightmetrics.Reports.ViewModels {
         public createEventHandlers(props: IFilterProps) {
             this.events.onMultipleValuesClick = () => {
                 let emailDialog: BVs.EmailDialog | undefined = void (0);
-                let beforeDestroy: (() => Promise<void>) | undefined = void (0);
+                let beforeDestroy: (() => JQuery.Thenable<void>) | undefined = void (0);
                 let listFetcherReady: KnockoutObservable<boolean> | undefined = void (0);
                 let multipleSelectDialog: MultipleSelect.ViewModels.MultipleSelectDialog;
 
diff --git a/ts/Reports/ViewModels/filterwidgets.ts b/ts/Reports/ViewModels/filterwidgets.ts
index ba1a381..b2f1cc0 100644
--- a/ts/Reports/ViewModels/filterwidgets.ts
+++ b/ts/Reports/ViewModels/filterwidgets.ts
@@ -160,7 +160,7 @@ namespace Brightmetrics.Reports.ViewModels {
         msOptsForParam?: {
             [dimensionIndex: number]: Partial<MultipleSelect.Interfaces.IMultipleSelectDialogProps<string>>;
         };
-        customListFetcher?(dimensionIndex: number): Promise<Array<IKoOption<string>>>;
+        customListFetcher?(dimensionIndex: number): JQuery.Thenable<Array<IKoOption<string>>>;
     }
 
     export class FilterWidgets extends Brightmetrics.ViewModel {
diff --git a/ts/Reports/ViewModels/page.ts b/ts/Reports/ViewModels/page.ts
index 8095ff6..7cca9e4 100644
--- a/ts/Reports/ViewModels/page.ts
+++ b/ts/Reports/ViewModels/page.ts
@@ -383,12 +383,12 @@ Are you sure you want to navigate away from this report? All of your changes wil
 
         // TODO: Should we utilize the combined Delete Confirmation Dialog?  (Reports & Dashboards)
         private _removeReportPromptThenAjax(report: BRCs.Report, reportHasOtherUsers?: boolean)
-            : Promise<unknown> {
+            : JQuery.Thenable<unknown> {
 
             const rejectedPromise = $.Deferred().reject();
             const reqInFlight = ko.observable(false);
             const reportName = report.template.name;
-            let req: Promise<unknown>;
+            let req: JQuery.Thenable<unknown>;
 
             const whenRemoveRequestSuccess = () => {
                 Utils.notifyUser(
@@ -421,7 +421,7 @@ Please try again`),
             if (report.accessLevel === BREs.AccessLevel.Admin) {
                 if (reportHasOtherUsers) {
                     req = this._removeReportOrAccessPrompt(reportName, reqInFlight).then((label) => {
-                        let _req: Promise<unknown> = rejectedPromise;
+                        let _req: JQuery.Thenable<unknown> = rejectedPromise;
 
                         if (label === "MYSELF") {
                             _req = this._removeReportAccessAjax(report);
@@ -437,7 +437,7 @@ Please try again`),
                     });
                 } else {
                     req = this._removeReportPrompt(reportName, reqInFlight).then((label) => {
-                        let _req: Promise<unknown> = rejectedPromise;
+                        let _req: JQuery.Thenable<unknown> = rejectedPromise;
 
                         if (label !== "CANCEL") {
                             _req = this._removeReportAjax(report);
@@ -449,7 +449,7 @@ Please try again`),
                 }
             } else {
                 req = this._removeReportAccessPrompt(reportName, reqInFlight).then((label) => {
-                    let _req: Promise<unknown> = rejectedPromise;
+                    let _req: JQuery.Thenable<unknown> = rejectedPromise;
 
                     if (label !== "CANCEL") {
                         _req = this._removeReportAccessAjax(report);
@@ -467,7 +467,7 @@ Please try again`),
 
         private _removeReportOrAccessPrompt(
             reportName: string,
-            isLoading: KnockoutObservable<boolean>): Promise<string> {
+            isLoading: KnockoutObservable<boolean>): JQuery.Thenable<string> {
 
             return Utils.basicConfirm2({
                 buttonClasses: ["c-btn--red-inv", "c-btn--red"],
@@ -482,7 +482,7 @@ access, or do you want to remove this report for everyone?`),
 
         private _removeReportAccessPrompt(
             reportName: string,
-            isLoading: KnockoutObservable<boolean>): Promise<string> {
+            isLoading: KnockoutObservable<boolean>): JQuery.Thenable<string> {
 
             return Utils.basicConfirm2({
                 buttonClasses: ["c-btn--red"],
@@ -495,7 +495,7 @@ access, or do you want to remove this report for everyone?`),
 
         private _removeReportPrompt(
             reportName: string,
-            isLoading: KnockoutObservable<boolean>): Promise<string> {
+            isLoading: KnockoutObservable<boolean>): JQuery.Thenable<string> {
 
             return Utils.basicConfirm2({
                 buttonClasses: ["c-btn--red"],
@@ -510,7 +510,7 @@ access, or do you want to remove this report for everyone?`),
          * Deletes `report` object from backend.
          * @param report
          */
-        private _removeReportAjax(report: BRCs.Report): Promise<unknown> {
+        private _removeReportAjax(report: BRCs.Report): JQuery.Thenable<unknown> {
             return Utils.ajaxRequest("/UserReportTemplates/" + report.id, {
                 _realMethod: "DELETE",
             });
@@ -520,7 +520,7 @@ access, or do you want to remove this report for everyone?`),
          * Deletes `report template` object from backend.
          * @param report
          */
-        private _removeTemplateReportAjax(report: BRCs.Report): Promise<unknown> {
+        private _removeTemplateReportAjax(report: BRCs.Report): JQuery.Thenable<unknown> {
             return Utils.ajaxRequest("/Companies/" + defCompanyId + "/ReportTemplates/" + report.id, {
                 _realMethod: "DELETE",
             });
@@ -530,7 +530,7 @@ access, or do you want to remove this report for everyone?`),
          * Removes the current user's access to `report`.
          * @param report
          */
-        private _removeReportAccessAjax(report: BRCs.Report): Promise<unknown> {
+        private _removeReportAccessAjax(report: BRCs.Report): JQuery.Thenable<unknown> {
             return Utils.ajaxRequest(`/UserReportTemplates/${report.id}?context=remove_self`, {
                 userId: userInfo.UserId
             });
@@ -546,8 +546,8 @@ access, or do you want to remove this report for everyone?`),
          *
          * @param report
          */
-        private _removeReport(report: BRCs.Report): Promise<unknown> {
-            let req: Promise<unknown>;
+        private _removeReport(report: BRCs.Report): JQuery.Thenable<unknown> {
+            let req: JQuery.Thenable<unknown>;
 
             if (this.isPartnerTemplates) {
                 req = this._removeTemplateReportAjax(report);
diff --git a/ts/Reports/ViewModels/parameterpopover.ts b/ts/Reports/ViewModels/parameterpopover.ts
index 5c68757..c3821df 100644
--- a/ts/Reports/ViewModels/parameterpopover.ts
+++ b/ts/Reports/ViewModels/parameterpopover.ts
@@ -16,7 +16,7 @@ namespace Brightmetrics.Reports.ViewModels {
         msOptsForParam?: {
             [dimensionIndex: number]: Partial<MultipleSelect.Interfaces.IMultipleSelectDialogProps<string>>;
         };
-        customListFetcher?(dimensionIndex: number): Promise<Array<IKoOption<string>>>;
+        customListFetcher?(dimensionIndex: number): JQuery.Thenable<Array<IKoOption<string>>>;
     }
 
     export class ParameterPopover extends Brightmetrics.ViewModel {
diff --git a/ts/Reports/ViewModels/report.ts b/ts/Reports/ViewModels/report.ts
index baec711..04de969 100644
--- a/ts/Reports/ViewModels/report.ts
+++ b/ts/Reports/ViewModels/report.ts
@@ -1561,7 +1561,7 @@ namespace Brightmetrics.Reports.ViewModels {
         }
 
         private _handleDetailQuery<T = BIs.IReportSummaryDataResponse | BIs.IReportDetailDataResponse>(
-            request: Promise<{ commandId: string; detaggType?: string }>): Promise<T> {
+            request: JQuery.Thenable<{ commandId: string; detaggType?: string }>): JQuery.Thenable<T> {
             const defd = $.Deferred<T, string>();
 
             const detailQuery = this.detailQueryDialog.detailQuery;
@@ -1615,7 +1615,7 @@ namespace Brightmetrics.Reports.ViewModels {
         }
 
         private _handleSummaryOrOtfaResponse<T = BIs.IReportSummaryDataResponse | BIs.IReportDetailDataResponse>(
-            request: Promise<T>): Promise<T> {
+            request: JQuery.Thenable<T>): JQuery.Thenable<T> {
             return request.then((response) => {
                 const commandId = (response as any).commandId as string;
 
@@ -1631,11 +1631,11 @@ namespace Brightmetrics.Reports.ViewModels {
         }
 
         public send(dsi: BIs.IDataSourceInstance, template: BRIDs.IReportTemplate)
-            : Promise<BIs.IReportSummaryDataResponse | BIs.IReportDetailDataResponse> {
+            : JQuery.Thenable<BIs.IReportSummaryDataResponse | BIs.IReportDetailDataResponse> {
             this._canDoOtfa = Utils.canDoOtfa(dsi);
             this._isDetailQuery = template.reportType === Enums.ReportType.Detail;
 
-            let request: Promise<any>;
+            let request: JQuery.Thenable<any>;
 
             if (this._isDetailQuery) {
                 this._requestInFlight = request = Utils.ReportHelpers.getReportDetailData(dsi.Id, template, "exact");
@@ -3688,7 +3688,7 @@ The following filters are invalid:
             const request = new ReportRequest(this.detailQueryDialog);
             const ajax = request.send(rdsi!, table);
 
-            return (ajax as Promise<ReportDataResponse>).then(
+            return (ajax as JQuery.Thenable<ReportDataResponse>).then(
                 (response) => {
                     if (isManualRun || currentRequestId === this.updateId) {
                         this.afterRun();
diff --git a/ts/Reports/ViewModels/reporteditortopbar.ts b/ts/Reports/ViewModels/reporteditortopbar.ts
index 3028f9a..80ea367 100644
--- a/ts/Reports/ViewModels/reporteditortopbar.ts
+++ b/ts/Reports/ViewModels/reporteditortopbar.ts
@@ -72,7 +72,7 @@ namespace Brightmetrics.Reports.ViewModels {
         getTemplateSnapshot(): BRIDs.IReportTemplate;
         addReport(report: BRCs.Report): void;
         updateReport(report: BRCs.Report): void;
-        removeReport(report: BRCs.Report): Promise<unknown>;
+        removeReport(report: BRCs.Report): JQuery.Thenable<unknown>;
         goToReport(report: BRCs.Report): void;
         cancelPendingChanges(soft?: boolean): void;
         updateReportName(updateName: string): void;
@@ -291,7 +291,7 @@ namespace Brightmetrics.Reports.ViewModels {
             props: IReportEditorTopbarProps,
             reportName: string,
             reportGroup: string,
-            reportDescription: string): Promise<any> {
+            reportDescription: string): JQuery.Thenable<any> {
 
             let url = "/UserReportTemplates";
             const dataSourceInstanceId = props.dsi()!.Id;
@@ -335,7 +335,7 @@ Please try again`),
                 });
         }
 
-        private _save(props: IReportEditorTopbarProps): Promise<any> {
+        private _save(props: IReportEditorTopbarProps): JQuery.Thenable<any> {
             const _report = props.report()!;
             const templateToSend = props.getTemplateSnapshot();
             const endpoint = this.isPartnerTemplates ?
diff --git a/ts/Reports/ViewModels/saveasdialog.ts b/ts/Reports/ViewModels/saveasdialog.ts
index a72d153..82b59aa 100644
--- a/ts/Reports/ViewModels/saveasdialog.ts
+++ b/ts/Reports/ViewModels/saveasdialog.ts
@@ -25,7 +25,7 @@ namespace Brightmetrics.Reports.ViewModels {
         defaultReportName: string;
         defaultGroupName: string;
         defaultDescription?: string;
-        onSave: (name: string, group: string, desc?: string) => Promise<any>;
+        onSave: (name: string, group: string, desc?: string) => JQuery.Thenable<any>;
         customTitle?: string;
     }
 
diff --git a/ts/TextFilter/ViewModels/List.ts b/ts/TextFilter/ViewModels/List.ts
index a0ca7ae..44d542f 100644
--- a/ts/TextFilter/ViewModels/List.ts
+++ b/ts/TextFilter/ViewModels/List.ts
@@ -10,7 +10,7 @@ namespace Brightmetrics.TextFilter.ViewModels {
         /** List label */
         label: string;
         value: number;
-        itemFetcher: () => Promise<Array<IKoOption<T>>>;
+        itemFetcher: () => JQuery.Thenable<Array<IKoOption<T>>>;
         /** Selected values (if editing existing) */
         startingSelectedValues: T[];
         isNotExclusive?: boolean;
@@ -21,7 +21,7 @@ namespace Brightmetrics.TextFilter.ViewModels {
 
         public label: string;
         public value: number;
-        public itemFetcher: () => Promise<Array<IKoOption<T>>>;
+        public itemFetcher: () => JQuery.Thenable<Array<IKoOption<T>>>;
         public items: KnockoutObservableArray<Value<T>>;
         public itemRequestIsFinished: KnockoutObservable<boolean>;
         /** Used as a helper for SHIFT+CLICK functionality. */
diff --git a/ts/TextFilter/ViewModels/textfilterdialog.ts b/ts/TextFilter/ViewModels/textfilterdialog.ts
index 56be725..a5317e2 100644
--- a/ts/TextFilter/ViewModels/textfilterdialog.ts
+++ b/ts/TextFilter/ViewModels/textfilterdialog.ts
@@ -28,7 +28,7 @@ namespace Brightmetrics.TextFilter.ViewModels {
          * - Compacting (filtering out bad values).
          * - Resolving the request promise the correct way.
          */
-        listFetcher: (listIndex: number) => Promise<Array<IKoOption<T>>>;
+        listFetcher: (listIndex: number) => JQuery.Thenable<Array<IKoOption<T>>>;
         listLabels: string[];
         onUpdate: (data: ITextFilterJSON<T>) => void;
         // Optionals:
diff --git a/ts/VARPortal/CustomerSetup/ViewModels/examplestep1.ts b/ts/VARPortal/CustomerSetup/ViewModels/examplestep1.ts
index 75ae3e9..8c762cb 100644
--- a/ts/VARPortal/CustomerSetup/ViewModels/examplestep1.ts
+++ b/ts/VARPortal/CustomerSetup/ViewModels/examplestep1.ts
@@ -10,7 +10,7 @@
             super(props);
         }
 
-        private _doStuff(): Promise<IStepData> {
+        private _doStuff(): JQuery.Thenable<IStepData> {
             const defd = $.Deferred();
             setTimeout(() => {
                 defd.resolve({
diff --git a/ts/VARPortal/CustomerSetup/ViewModels/examplestep2.ts b/ts/VARPortal/CustomerSetup/ViewModels/examplestep2.ts
index 5c0a112..ef095fb 100644
--- a/ts/VARPortal/CustomerSetup/ViewModels/examplestep2.ts
+++ b/ts/VARPortal/CustomerSetup/ViewModels/examplestep2.ts
@@ -10,7 +10,7 @@
             super(props);
         }
 
-        private _doStuff(): Promise<IStepData> {
+        private _doStuff(): JQuery.Thenable<IStepData> {
             const defd = $.Deferred();
             setTimeout(() => {
                 defd.resolve({
diff --git a/ts/VARPortal/PartnerDashboard/ViewModels/alldashboard.ts b/ts/VARPortal/PartnerDashboard/ViewModels/alldashboard.ts
index 7a2bcd0..769b9ff 100644
--- a/ts/VARPortal/PartnerDashboard/ViewModels/alldashboard.ts
+++ b/ts/VARPortal/PartnerDashboard/ViewModels/alldashboard.ts
@@ -122,7 +122,7 @@ namespace Brightmetrics.VARPortal.PartnerDashboard.ViewModels {
             this._selectedTemplateDescription(description);
         }
 
-        private _discardActiveTabChanges(): Promise<unknown> {
+        private _discardActiveTabChanges(): JQuery.Thenable<unknown> {
             const tab = JSON.parse(this._lastSavedActiveTabState()) as Interfaces.IPartnerDashboard;
 
             this._activeTabStates.restart(tab);
@@ -140,7 +140,7 @@ namespace Brightmetrics.VARPortal.PartnerDashboard.ViewModels {
             return Constants.resolvedDeferred;
         }
 
-        private _updateActiveTab(tab: Interfaces.IPartnerDashboard): Promise<unknown> {
+        private _updateActiveTab(tab: Interfaces.IPartnerDashboard): JQuery.Thenable<unknown> {
             this._updatePartnerDashboard(tab);
             this._activeTabStates.restart(tab);
             this._selectedDashboard(this._createTabViewModel(tab));
@@ -278,7 +278,7 @@ namespace Brightmetrics.VARPortal.PartnerDashboard.ViewModels {
             };
         }
 
-        private _handleSavePartnerDashboard(): Promise<unknown> {
+        private _handleSavePartnerDashboard(): JQuery.Thenable<unknown> {
             const selectedDashboard = this._selectedDashboard();
 
             if (selectedDashboard) {
@@ -708,16 +708,16 @@ namespace Brightmetrics.VARPortal.PartnerDashboard.ViewModels {
             multipleSelectDialog.open();
         }
 
-        private _showUnsavedChangesDialog(): Promise<"DISCARD" | "SAVE" | "CANCEL"> {
+        private _showUnsavedChangesDialog(): JQuery.Thenable<"DISCARD" | "SAVE" | "CANCEL"> {
             return Utils.basicConfirm2({
                 buttonClasses: ["c-btn--red-inv", "c-btn--green"],
                 buttonLabels: ["DISCARD", "SAVE"],
                 content: "You have unsaved changes on your dashboard, how would you like to continue?",
                 title: "Unsaved Changes",
-            }) as Promise<"DISCARD" | "SAVE" | "CANCEL">;
+            }) as JQuery.Thenable<"DISCARD" | "SAVE" | "CANCEL">;
         }
 
-        private _handlePendingChanges(): Promise<unknown> {
+        private _handlePendingChanges(): JQuery.Thenable<unknown> {
             return this._showUnsavedChangesDialog().then((choice) => {
                 if (choice === "DISCARD") {
                     return this._discardActiveTabChanges();
@@ -746,13 +746,13 @@ namespace Brightmetrics.VARPortal.PartnerDashboard.ViewModels {
             });
         }
 
-        private _handleRemovePartnerDashboard(id: string): Promise<unknown> {
+        private _handleRemovePartnerDashboard(id: string): JQuery.Thenable<unknown> {
             this._removePartnerDashboard(id);
             this._gotoAllDashboard();
             return Constants.resolvedDeferred;
         }
 
-        private _handleDeletePartnerDashboard(template: Brightmetrics.Interfaces.ITabTemplate): Promise<unknown> {
+        private _handleDeletePartnerDashboard(template: Brightmetrics.Interfaces.ITabTemplate): JQuery.Thenable<unknown> {
             const tabName = Utils.excludeParameterPlaceholder(template.TabName);
             const id = template.TemplateId;
 
diff --git a/ts/VARPortal/PartnerDashboard/ViewModels/dashbooardpartnersaveasdialog.ts b/ts/VARPortal/PartnerDashboard/ViewModels/dashbooardpartnersaveasdialog.ts
index 62f3d8a..fd8c5e3 100644
--- a/ts/VARPortal/PartnerDashboard/ViewModels/dashbooardpartnersaveasdialog.ts
+++ b/ts/VARPortal/PartnerDashboard/ViewModels/dashbooardpartnersaveasdialog.ts
@@ -8,7 +8,7 @@ namespace Brightmetrics.VARPortal.PartnerDashboard.ViewModels {
     interface ISaveAsDialogProps {
         defaultDashboardName: string;
         defaultDescription?: string;
-        onSave: (name: string, group: string, desc?: string) => Promise<any>;
+        onSave: (name: string, group: string, desc?: string) => JQuery.Thenable<any>;
         customTitle?: string;
     }
 
diff --git a/ts/VARPortal/ViewModels/ManageCompaniesView.ts b/ts/VARPortal/ViewModels/ManageCompaniesView.ts
index d7c1083..b13b735 100644
--- a/ts/VARPortal/ViewModels/ManageCompaniesView.ts
+++ b/ts/VARPortal/ViewModels/ManageCompaniesView.ts
@@ -917,7 +917,7 @@ namespace Brightmetrics.VARPortal.ViewModels {
     export class PasswordDialog extends Brightmetrics.ViewModels.DialogViewModel {
         private _deferred: JQuery.Deferred<string>;
 
-        public promise: Promise<string>;
+        public promise: JQuery.Thenable<string>;
         public passwordLabel: string;
         public password: KnockoutObservable<string>;
         public isValid: KnockoutComputed<boolean>;
diff --git a/ts/ViewModels/appsearch.ts b/ts/ViewModels/appsearch.ts
index b8e6c00..fa9807a 100644
--- a/ts/ViewModels/appsearch.ts
+++ b/ts/ViewModels/appsearch.ts
@@ -469,7 +469,7 @@ namespace Brightmetrics.ViewModels {
             window.location = result.value;
         }
 
-        private _animateHide(): JQuery.Promise<any> {
+        private _animateHide(): JQuery.Thenable<any> {
             const $origSearchIcon_Input = $(appSearchIconSelector_Input);
             const $origSearchIcon_InputClone = $origSearchIcon_Input.clone();
             const origSearchIcon_InputOffset = getOffset($origSearchIcon_Input);
@@ -512,7 +512,7 @@ namespace Brightmetrics.ViewModels {
                         completeDefd.resolve();
                     },
                     duration: allAnimationDurationMS,
-                    progress(ignore1: JQuery.Promise<any>, progressPct: number, ignore2: number) {
+                    progress(ignore1: JQuery.Thenable<any>, progressPct: number, ignore2: number) {
                         if (progressPct >= 0.5 && !hasCompleted50PctTask) {
 
                             // Begin fading in the Company Name once the mag glass
@@ -530,7 +530,7 @@ namespace Brightmetrics.ViewModels {
             return completeDefd.promise();
         }
 
-        private _animateShow(): JQuery.Promise<any> {
+        private _animateShow(): JQuery.Thenable<any> {
             const $origSearchIcon_Nav = $(appSearchIconSelector_Nav);
             const origSearchIcon_NavOffset = getOffset($origSearchIcon_Nav);
             const $origSearchIcon_NavClone = $origSearchIcon_Nav.clone();
@@ -565,7 +565,7 @@ namespace Brightmetrics.ViewModels {
                         completeDefd.resolve();
                     },
                     duration: allAnimationDurationMS,
-                    progress(ignore1: JQuery.Promise<any>, progressPct: number, ignore2: number) {
+                    progress(ignore1: JQuery.Thenable<any>, progressPct: number, ignore2: number) {
                         if (progressPct >= 0.5 && !hasCompleted50PctTask) {
                             // Begin fading in the App Search once the mag glass
                             // has animated half way to it's destination.
diff --git a/ts/ViewModels/deleteconfirmationdialog.ts b/ts/ViewModels/deleteconfirmationdialog.ts
index 9b774dd..8cf4840 100644
--- a/ts/ViewModels/deleteconfirmationdialog.ts
+++ b/ts/ViewModels/deleteconfirmationdialog.ts
@@ -69,7 +69,7 @@ namespace Brightmetrics.ViewModels {
                 });
         }
 
-        private requestUsers(): Promise<any> {
+        private requestUsers(): JQuery.Promise<any> {
             if (this.context === "dashboard") {
                 return Utils.ajaxRequest(`/Companies/${this.companyId}/DashboardTabs/${this.id}?target=acl`);
             } else if (this.context === "scorecard") {
@@ -86,7 +86,7 @@ namespace Brightmetrics.ViewModels {
                         this.usersWithAccess(response.users);
                         this.processUsersPerms(response.users.length);
                     }
-                }).catch((err) => {
+                }, (err) => {
                     this.processUsersPerms(1);
                 });
         }
@@ -99,8 +99,8 @@ namespace Brightmetrics.ViewModels {
                     } else {
                         this.totalSchedulesCount = 0;
                     }
-                })
-                .catch(() => this.totalSchedulesCount = 0)
+                },
+                () => this.totalSchedulesCount = 0)
                 .always(() => this.loadAllUsersWithAccess());
         }
 
@@ -299,7 +299,7 @@ namespace Brightmetrics.ViewModels {
                 Utils.notifyUser(`The dashboard ${this.name} has been successfully removed`, ["success"]);
                 this.onDelete();
                 this.destroy();
-            }).catch(() => {
+            }, () => {
                 Utils.notifyUser(
                     `There was an error removing the dashboard ${this.name}`,
                     ["error"]);
@@ -316,7 +316,7 @@ namespace Brightmetrics.ViewModels {
                 Utils.notifyUser(`The scorecard ${this.name} has been successfully removed`, ["success"]);
                 this.onDelete();
                 this.destroy();
-            }).catch(() => {
+            }, () => {
                 Utils.notifyUser(
                     `There was an error removing the scorecard ${this.name}`,
                     ["error"]);
@@ -341,7 +341,7 @@ namespace Brightmetrics.ViewModels {
                 Utils.notifyUser(`The dashboard ${this.name} has been successfully removed`, ["success"]);
                 this.onDelete();
                 this.destroy();
-            }).catch(() => {
+            }, () => {
                 Utils.notifyUser(
                     `There was an error removing the dashboard ${this.name}`,
                     ["error"]);
@@ -360,7 +360,7 @@ namespace Brightmetrics.ViewModels {
                 Utils.notifyUser(`The scorecard ${this.name} has been successfully removed`, ["success"]);
                 this.onDelete();
                 this.destroy();
-            }).catch(() => {
+            }, () => {
                 Utils.notifyUser(
                     `There was an error removing the scorecard ${this.name}`,
                     ["error"]);
@@ -420,7 +420,7 @@ namespace Brightmetrics.ViewModels {
             return;
         }
 
-        public transferScheduleToNewUser(schedule: any): Promise<any> {
+        public transferScheduleToNewUser(schedule: any): JQuery.Thenable<any> {
             let restEndpoint = "";
             if (this.context === "dashboard") {
                 restEndpoint = `/Companies/${defCompanyId}/DashboardTabs/${this.id}/Schedules/${schedule.Id}`;
diff --git a/ts/ViewModels/dialog.ts b/ts/ViewModels/dialog.ts
index 1788052..0f652ca 100644
--- a/ts/ViewModels/dialog.ts
+++ b/ts/ViewModels/dialog.ts
@@ -116,7 +116,7 @@ namespace Brightmetrics.ViewModels {
             this.onOpen();
         }
 
-        private _fadeOpen(): Promise<any> {
+        private _fadeOpen(): JQuery.Thenable<any> {
             const previousInlineStyles = Utils.getElementInlineStyles(
                 this.$el, ["display", "opacity"]);
 
@@ -145,7 +145,7 @@ namespace Brightmetrics.ViewModels {
             this.onClose();
         }
 
-        private _fadeClose(): Promise<any> {
+        private _fadeClose(): JQuery.Thenable<any> {
             const previousInlineStyles = Utils.getElementInlineStyles(
                 this.$el, ["display", "opacity"]);
 
@@ -239,7 +239,7 @@ namespace Brightmetrics.ViewModels {
             $dialog: JQuery<HTMLElement>,
             animProps: JQuery.PlainObject<string | number | ((...args: any[]) => any)>,
             animOpts: JQuery.PlainObject<string | number | ((...args: any[]) => any)> = {})
-            : Promise<any> {
+            : JQuery.Thenable<any> {
 
             const defd = $.Deferred();
 
@@ -283,7 +283,7 @@ namespace Brightmetrics.ViewModels {
             return defd.promise();
         }
 
-        public open(fadeIn?: boolean): Promise<any> {
+        public open(fadeIn?: boolean): JQuery.Thenable<any> {
             const defd = $.Deferred();
 
             if (!this._isCreated) {
@@ -311,7 +311,7 @@ namespace Brightmetrics.ViewModels {
 
         public onOpen(): void { /* override */ }
 
-        public close(fadeOut?: boolean): Promise<any> {
+        public close(fadeOut?: boolean): JQuery.Thenable<any> {
             const defd = $.Deferred();
 
             if (this.isOpen()) {
diff --git a/ts/ViewModels/emaildialog.ts b/ts/ViewModels/emaildialog.ts
index 82c8970..00e21d6 100644
--- a/ts/ViewModels/emaildialog.ts
+++ b/ts/ViewModels/emaildialog.ts
@@ -100,14 +100,14 @@ namespace Brightmetrics.ViewModels {
          *
          * If exists, then 'schedule recurring'.
          */
-        onSave?: (s: BCs.ScheduleEntry) => Promise<any>;
+        onSave?: (s: BCs.ScheduleEntry) => JQuery.Thenable<any>;
         /**
          * Also serves as a flag as to whether this is a 'send once' or
          * 'schedule recurring' dialog
          *
          * If exists, then 'send once'.
          */
-        onSend?: (s: BIs.IEmailReportProps | BIs.IEmailSystemReviewProps) => Promise<any>;
+        onSend?: (s: BIs.IEmailReportProps | BIs.IEmailSystemReviewProps) => JQuery.Thenable<any>;
         parameters?: BRVs.FilterWidgets | null;
         dataSources?: any[] | null;
         agents?: IAgents[];
@@ -596,7 +596,7 @@ namespace Brightmetrics.ViewModels {
         }
 
         private _openIndividualAgentsEmail(
-                saveSchedule: (s: BCs.ScheduleEntry | BIs.IEmailReportProps) => Promise<any>) {
+                saveSchedule: (s: BCs.ScheduleEntry | BIs.IEmailReportProps) => JQuery.Thenable<any>) {
 
             const ied = new Brightmetrics.Insights.Scorecards.ViewModels.IndividualEmailDialog({
                 agents: this.agents!,
@@ -728,7 +728,7 @@ namespace Brightmetrics.ViewModels {
                     return this._openIndividualAgentsEmail(props.onSave! || props.onSend!);
                 }
 
-                let promise: Promise<any>;
+                let promise: JQuery.Thenable<any>;
                 this.isLoading(true);
 
                 if (this.isSchedule) {
diff --git a/ts/ViewModels/emailoptionsdialog.ts b/ts/ViewModels/emailoptionsdialog.ts
index eac9a05..72b0ec6 100644
--- a/ts/ViewModels/emailoptionsdialog.ts
+++ b/ts/ViewModels/emailoptionsdialog.ts
@@ -398,7 +398,7 @@ namespace Brightmetrics.ViewModels {
                 asAdmin: boolean,
                 duplicate: boolean,
                 userId: number
-            }): Promise<ReportOrDashboard> {
+            }): JQuery.Thenable<ReportOrDashboard> {
             let restEndpoint = "";
             const data = schedule.toJSON();
 
@@ -491,7 +491,7 @@ namespace Brightmetrics.ViewModels {
                 });
         }
 
-        public saveScheduleFake(schedule: BCs.ScheduleEntry): Promise<ReportOrDashboard> {
+        public saveScheduleFake(schedule: BCs.ScheduleEntry): JQuery.Thenable<ReportOrDashboard> {
             const defd = $.Deferred<BCs.ScheduleEntry>();
 
             // TODO: Implement real AJAX.
@@ -536,7 +536,7 @@ namespace Brightmetrics.ViewModels {
             }).open();
         }
 
-        public transferOwnership(schedule: BCs.ScheduleEntry, userId: number): Promise<any> {
+        public transferOwnership(schedule: BCs.ScheduleEntry, userId: number): JQuery.Thenable<any> {
             let restEndpoint = "";
 
             if (this.dataPerspective === BEs.DataPerspective.Dashboard) {
diff --git a/ts/ViewModels/permissionsdialog.ts b/ts/ViewModels/permissionsdialog.ts
index da4c26d..5d0c28d 100644
--- a/ts/ViewModels/permissionsdialog.ts
+++ b/ts/ViewModels/permissionsdialog.ts
@@ -158,7 +158,7 @@ namespace Brightmetrics.ViewModels {
             }
         }
 
-        private saveChangesForReports(): JQuery.Promise<any> {
+        private saveChangesForReports(): JQuery.Thenable<any> {
             const url = `/UserReportTemplates/${this.contextId}?context=new_acl`;
             // Note dsiId not used for UserReportTemplates
             const toSend = this.users()
@@ -196,7 +196,7 @@ namespace Brightmetrics.ViewModels {
             }
         }
 
-        private saveChangesForDashboard(): JQuery.Promise<any> {
+        private saveChangesForDashboard(): JQuery.Thenable<any> {
             const url = `/Companies/${this.companyId}/DashboardTabs/${this.contextId}?target=acl`;
             const results: any[] = [];
 
@@ -220,7 +220,7 @@ namespace Brightmetrics.ViewModels {
             });
         }
 
-        private saveChangesForScorecard(): JQuery.Promise<any> {
+        private saveChangesForScorecard(): JQuery.Thenable<any> {
             const url = `/Companies/${this.companyId}/Scorecards/${this.contextId}?context=acl`;
 
             const toSend = this.users()
@@ -267,25 +267,25 @@ namespace Brightmetrics.ViewModels {
                     this.loadUsersFromReport(props.id).always(() => {
                         this.loadCompanyUsers(this.companyId).then(() => {
                             this.loadingData(false);
-                        }).catch(() => this.loadingData(false));
+                        }, () => this.loadingData(false));
                     });
                 } else if (props.context === "dashboard") {
                     this.loadUsersForDashboard(this.companyId, props.id).always(() => {
                         this.loadCompanyUsers(this.companyId).then(() => {
                             this.loadingData(false);
-                        }).catch(() => this.loadingData(false));
+                        }, () => this.loadingData(false));
                     });
                 } else if (props.context === "scorecard") {
                     this.loadUsersForScorecard(this.companyId, props.id).always(() => {
                         this.loadCompanyUsers(this.companyId)
-                            .then(() => this.loadingData(false))
-                            .catch(() => this.loadingData(false));
+                            .then(() => this.loadingData(false),
+                            () => this.loadingData(false));
                     });
                 }
             } else {
                 this.loadCompanyUsers(this.companyId).then(() => {
                     this.loadingData(false);
-                }).catch(() => this.loadingData(false));
+                }, () => this.loadingData(false));
             }
 
             this.permissionContext = ko.observable(props.context);
@@ -307,7 +307,7 @@ namespace Brightmetrics.ViewModels {
                         if (response.success) {
                             this.numberOfLinkedDashboards(_.size(response.data));
                         }
-                    }).catch((err) => {
+                    }, (err) => {
                         this.numberOfLinkedDashboards(0);
                     });
             }
@@ -585,8 +585,8 @@ namespace Brightmetrics.ViewModels {
             }
         }
 
-        public getPublicTabLinks(companyID: number, dashboardTabID: string): Promise<number> {
-            return Utils.ajaxRequest(`/Companies/${companyID}/DashboardTabs/${dashboardTabID}/TabLinks`);
+        public getPublicTabLinks(companyID: number, dashboardTabID: string): JQuery.Promise<number> {
+            return Utils.ajaxRequest(`/Companies/${companyID}/DashboardTabs/${dashboardTabID}/TabLinks`) as any;
         }
 
         public createHeaderCptd(field: string) {
diff --git a/ts/ViewModels/scheduleentry.ts b/ts/ViewModels/scheduleentry.ts
index 5e24952..e1012da 100644
--- a/ts/ViewModels/scheduleentry.ts
+++ b/ts/ViewModels/scheduleentry.ts
@@ -28,7 +28,7 @@ namespace Brightmetrics.ViewModels {
         schedule: BCs.ScheduleEntry;
         entity: ReportOrDashboard;
         hideDuplicateButton?: boolean;
-        onDelete: (s: BCs.ScheduleEntry) => Promise<any>;
+        onDelete: (s: BCs.ScheduleEntry) => JQuery.Thenable<any>;
         onDuplicate: (s: BCs.ScheduleEntry) => void;
         onEdit: (s: BCs.ScheduleEntry) => void;
         onSendNow: (s: BCs.ScheduleEntry) => void;
diff --git a/ts/ViewModels/sendnowdialog.ts b/ts/ViewModels/sendnowdialog.ts
index a2d9189..a6c42ac 100644
--- a/ts/ViewModels/sendnowdialog.ts
+++ b/ts/ViewModels/sendnowdialog.ts
@@ -10,7 +10,7 @@ namespace Brightmetrics.ViewModels {
         dataPerspective: BEs.DataPerspective;
         destinations?: string[];
         onCancel: () => void;
-        onSend: (destinations: string[]) => Promise<any>;
+        onSend: (destinations: string[]) => JQuery.Thenable<any>;
     }
 
     const destinationError_empty = "MUST ENTER AT LEAST ONE DESTINATION";
diff --git a/ts/ViewModels/transferownershipdialog.ts b/ts/ViewModels/transferownershipdialog.ts
index 249a8ef..263a850 100644
--- a/ts/ViewModels/transferownershipdialog.ts
+++ b/ts/ViewModels/transferownershipdialog.ts
@@ -34,7 +34,7 @@ namespace Brightmetrics.ViewModels {
         excluseUserId?: number;
         asAdmin?: boolean;
         onCancel: () => void;
-        onTransfer: (user: number) => Promise<any>;
+        onTransfer: (user: number) => JQuery.Thenable<any>;
     }
 
     export class TransferOwnershipDialog extends DialogViewModel {
@@ -55,7 +55,7 @@ namespace Brightmetrics.ViewModels {
             super(props);
         }
 
-        private _loadAdminUsers(): Promise<Array<IKoOption<number>>> {
+        private _loadAdminUsers(): JQuery.Thenable<Array<IKoOption<number>>> {
             const defd = $.Deferred<Array<IKoOption<number>>>();
 
             Utils.ajaxRequest(
@@ -96,7 +96,7 @@ namespace Brightmetrics.ViewModels {
             return defd.promise();
         }
 
-        private _loadAllUsers(): Promise<Array<IKoOption<number>>> {
+        private _loadAllUsers(): JQuery.Thenable<Array<IKoOption<number>>> {
             const defd = $.Deferred<Array<IKoOption<number>>>();
 
             Utils.ajaxRequest(`/Companies/${defCompanyId}/Users`,
@@ -135,7 +135,7 @@ namespace Brightmetrics.ViewModels {
         }
 
         private _loadUsers() {
-            let defd: Promise<Array<IKoOption<number>>>;
+            let defd: JQuery.Thenable<Array<IKoOption<number>>>;
 
             this.isLoadingUsers(true);
             this.errorText = Utils.stringUnraw(`
diff --git a/ts/basicdialog.ts b/ts/basicdialog.ts
index 64db523..1ab7867 100644
--- a/ts/basicdialog.ts
+++ b/ts/basicdialog.ts
@@ -4,7 +4,7 @@ namespace Brightmetrics {
     export class BasicDialog {
 
         public deferred: JQuery.Deferred<any>;
-        public promise: JQuery.Promise<any>;
+        public promise: JQuery.Thenable<any>;
         public $dialog: JQuery<HTMLElement>;
         public buttons: string[];
 
diff --git a/ts/basicdialog2.ts b/ts/basicdialog2.ts
index 9ce580b..20aa43a 100644
--- a/ts/basicdialog2.ts
+++ b/ts/basicdialog2.ts
@@ -14,7 +14,7 @@ namespace Brightmetrics {
     export class BasicDialog2 extends BVs.DialogViewModel {
         private _deferred: JQuery.Deferred<string>;
 
-        public promise: Promise<string>;
+        public promise: JQuery.Thenable<string>;
         public isLoading: KnockoutObservable<boolean>;
         public isButtonDisabled: KnockoutObservable<boolean>;
         public isSingleAction: boolean;
diff --git a/ts/utils.ts b/ts/utils.ts
index eca0428..0772f3a 100644
--- a/ts/utils.ts
+++ b/ts/utils.ts
@@ -609,9 +609,9 @@ namespace Brightmetrics.Utils {
             dimensionValues: string[],
             onEachSuccess: (response: any) => void,
             isTemplatePartnerMode = false)
-            : Promise<{ dashboardsCreatedCount: number }>
+            : JQuery.Thenable<{ dashboardsCreatedCount: number }>
         {
-            const aggregatedDeferreds: Array<Promise<any>> = [];
+            const aggregatedDeferreds: Array<JQuery.Thenable<any>> = [];
             // tslint:disable-next-line
             let [singles, multiples] = _.partition(templates, (t) => !t.Multiple);
 
@@ -641,7 +641,7 @@ namespace Brightmetrics.Utils {
                 });
             }
 
-            return ($.when.apply($, aggregatedDeferreds) as Promise<unknown>)
+            return ($.when.apply($, aggregatedDeferreds) as JQuery.Thenable<unknown>)
                 .then(() => ({
                     dashboardsCreatedCount: aggregatedDeferreds.length,
                 }));
@@ -1457,6 +1457,7 @@ namespace Brightmetrics.Utils {
                     // daylight saving is in effect. So we go to the server.
 
                     return {
+                        formatToParts() { throw new Error("Not implemented"); },
                         format(date: Date) {
                             if (!fallbackDateTimeOffsetCache.hasOwnProperty(timeZoneId)) {
                                 $.get(`/ClientUtils.ashx/DateTime/GetOffset?tz=${encodeURIComponent(timeZoneId)}`)
@@ -1614,7 +1615,7 @@ namespace Brightmetrics.Utils {
         message: string,
         title: string = "Alert",
         opts?: any
-    ): JQuery.Promise<any> {
+    ): JQuery.Thenable<any> {
         const successDeferred = $.Deferred();
         const buttons = ["Ok"];
 
@@ -1637,7 +1638,7 @@ namespace Brightmetrics.Utils {
         title: string = "Confirm",
         confirmLabel: string | string[] = "Confirm",
         opts?: any
-    ): JQuery.Promise<any> {
+    ): JQuery.Thenable<any> {
         const successDeferred = $.Deferred();
         const buttons = ["Cancel"].concat(confirmLabel);
 
@@ -1772,7 +1773,7 @@ namespace Brightmetrics.Utils {
     }
 
     export function basicConfirm2(props: Brightmetrics.Interfaces.IBasicDialog2Props):
-        Promise<string> {
+        JQuery.Thenable<string> {
 
         const instance = new BasicDialog2(props);
         instance.open();
@@ -1780,7 +1781,7 @@ namespace Brightmetrics.Utils {
     }
 
     export function basicAlert2(props: Brightmetrics.Interfaces.IBasicDialog2Props):
-        Promise<unknown> {
+        JQuery.Thenable<unknown> {
 
         const instance = new BasicDialog2({
             ...props,
@@ -1796,7 +1797,7 @@ namespace Brightmetrics.Utils {
         title?: string,
         buttonLabel?: string,
         isLoading?: KnockoutObservable<boolean>)
-        : Promise<string>
+        : JQuery.Thenable<string>
     {
         const instance = new BasicDialog2({
             buttonLabels: [buttonLabel || "OKAY"],
@@ -4862,7 +4863,7 @@ field index: '${parameter.factIndex}'`);
         IDimensionValueDetailRequestOptions
         { /**/ }
 
-    function loadDimensionValues_summaryData(options: IDimensionValueSummaryRequestOptions): Promise<string[] | null> {
+    function loadDimensionValues_summaryData(options: IDimensionValueSummaryRequestOptions): JQuery.Thenable<string[] | null> {
         const defd = $.Deferred<string[] | null>();
         const fail = () => defd.reject();
 
@@ -4925,7 +4926,7 @@ field index: '${parameter.factIndex}'`);
         return defd.promise();
     }
 
-    const pendingDetailQueryDataCache: _.Dictionary<Promise<string[] | string[][]>> = {};
+    const pendingDetailQueryDataCache: _.Dictionary<JQuery.Thenable<string[] | string[][]>> = {};
 
     export function isDetailFilter(filter: BRIDs.IFilter | BRIDs.IFilterDetail): filter is BRIDs.IFilterDetail {
         return typeof (filter as BRIDs.IFilterDetail).factIndex === "number";
@@ -4943,7 +4944,7 @@ field index: '${parameter.factIndex}'`);
      */
     export function loadDimensionValues_detailData(
         options: IDimensionValueDetailRequestOptions)
-        : Promise<string[] | string[][]>
+        : JQuery.Thenable<string[] | string[][]>
     {
         const defd = $.Deferred<string[] | string[][]>();
         const fail = () => defd.reject();
@@ -5011,7 +5012,7 @@ field index: '${parameter.factIndex}'`);
     }
 
     function loadDimensionValues_realtimeData(options: IDimensionValueRealtimeRequestOptions)
-        : Promise<string[]>
+        : JQuery.Thenable<string[]>
     {
         const realtimeHub = Brightmetrics.Dashboard.Realtime.RealtimeHub.getDefaultInstance();
         const dimension = DSI.getDimensionForIndex(
@@ -5030,7 +5031,7 @@ Dimension from data source instance ${dimension.Name} is not valid for realtime
     }
 
     export function loadDimensionValues2(options: IDimensionValueRequestOptions)
-        : Promise<string[]>
+        : JQuery.Thenable<string[]>
     {
         options.dsiId = typeof options.dsiId === "string" ?
             parseInt(options.dsiId.replace("y", ""), 10) :
@@ -5058,7 +5059,7 @@ Dimension from data source instance ${dimension.Name} is not valid for realtime
         return loadDimensionValues_summaryData(options).then((response) => {
             if (response === null) {
                 if (isDetail) {
-                    return loadDimensionValues_detailData(options) as Promise<string[]>;
+                    return loadDimensionValues_detailData(options) as JQuery.Thenable<string[]>;
                 }
 
                 return Constants.rejectedDeferred;
@@ -6565,7 +6566,7 @@ the fly and as a result, your ${entity} may take longer to load.
     export function loadAvailableGroupsByDataSourceGroup(cb?: () => void):
         Brightmetrics.Insights.Interfaces.IGroupsByDSGID {
         const groupsByDSGID = {} as Brightmetrics.Insights.Interfaces.IGroupsByDSGID;
-        const defQueue = [] as Array<Promise<any>>;
+        const defQueue = [] as Array<JQuery.Thenable<any>>;
         let hasFailed = false;
 
         for (const dsg of getAvailableDataSourceGroups()) {
@@ -6603,7 +6604,7 @@ Warning: There was an error trying to load one or more groups.`),
     export function loadAvailableGroups(dsgs: Interfaces.IDataSourceGroup[], cb?: () => void):
         Brightmetrics.Insights.Interfaces.IGroupsByDSGID {
         const groupsByDSGID = {} as Brightmetrics.Insights.Interfaces.IGroupsByDSGID;
-        const defQueue = [] as Array<Promise<any>>;
+        const defQueue = [] as Array<JQuery.Thenable<any>>;
         let hasFailed = false;
 
         for (const dsg of dsgs) {
@@ -6926,7 +6927,7 @@ Warning: There was an error trying to load one or more groups.`),
                 standardSubDlg.open();
             }
         }
-        return deferred;
+        return deferred.promise();
     }
 
     export function anyChartType(dataConnectionGroupType: number, tabContent: any): boolean {
@@ -7055,7 +7056,7 @@ Warning: There was an error trying to load one or more groups.`),
     }
 
     export function showRealtimeLicenseUsageLimitDialog(curUsage: number, billingAmt: number,
-                                                        dcgName: string, addText = "", preText = ""): Promise<unknown> {
+                                                        dcgName: string, addText = "", preText = ""): JQuery.Thenable<unknown> {
         const isAdmin = Utils.userHasPermission(roleInfo.role.Permissions,
             Brightmetrics.Enums.BrightPermissionKey.CanAdministerCompany);
 
diff --git a/tsconfig.json b/tsconfig.json
index bd32b72..5223c44 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -4,7 +4,7 @@
         "baseUrl": ".",
         "allowJs": true,
         "listFiles": false,
-        "module": "amd",
+        "module": "system",
         "noImplicitAny": true,
         "noImplicitReturns": true,
         "outFile": "build/brightmetrics.js",
@@ -13,7 +13,7 @@
         "sourceMap": true,
         "inlineSources": true,
         "strictNullChecks": true,
-        "target": "es5"
+        "target": "es2017"
     },
     "include": [
         "types/*.d.ts",
