diff --git a/ts/Dashboard/Realtime/ccgs.ts b/ts/Dashboard/Realtime/ccgs.ts
index 883ce4a..7ed32e3 100644
--- a/ts/Dashboard/Realtime/ccgs.ts
+++ b/ts/Dashboard/Realtime/ccgs.ts
@@ -737,7 +737,7 @@ namespace Brightmetrics.Dashboard.Realtime {
                 "_itemId": this.itemId,
                 "_tabId": this.tabId
             })
-                .then((response) => {
+                .then((response: any) => {
                     if (response.success) {
                         this.setInfoMessage("Command successful.", ["visible"]);
 
@@ -807,7 +807,7 @@ namespace Brightmetrics.Dashboard.Realtime {
                 "_itemId": this.itemId,
                 "_tabId": this.tabId
             })
-                .then((response) => {
+                .then((response: any) => {
                     if (response.success) {
                         this.setInfoMessage("Command successful.", ["visible"]);
 
@@ -838,7 +838,7 @@ namespace Brightmetrics.Dashboard.Realtime {
                 "_itemId": this.itemId,
                 "_tabId": this.tabId
             })
-                .then((response) => {
+                .then((response: any) => {
                     if (response.success) {
                         this.setInfoMessage("Command successful.", ["visible"]);
 
@@ -872,7 +872,7 @@ namespace Brightmetrics.Dashboard.Realtime {
                 "_itemId": this.itemId,
                 "_tabId": this.tabId
             })
-                .then((response) => {
+                .then((response: any) => {
                     if (response.success) {
                         this.setInfoMessage("Command successful.", ["visible"]);
 
@@ -1181,7 +1181,7 @@ namespace Brightmetrics.Dashboard.Realtime {
                                 tabId: this.tabId,
                                 itemId: this.itemId,
                             }).defaults(unparam())),
-                        })).then((response) => {
+                        })).then((response: any) => {
                             Utils.logUserActivity("create-ccgs-share-link", this.tabId, {
                                 link: response.shareLink
                             });
@@ -1590,7 +1590,7 @@ namespace Brightmetrics.Dashboard.Realtime {
                     this.groupStatus(_(this.filteredGroups()).findWhere({ groupName }) || null);
 
                     this.realtimeHub.getCurrentAgentInfo(this.dsiId)
-                        .then((agentInfo2) => {
+                        .then((agentInfo2: any) => {
                             this.createGroupViewSubscriptions(agentInfo2, groupName);
                         });
                 }
@@ -1604,7 +1604,7 @@ namespace Brightmetrics.Dashboard.Realtime {
 
                 if (agentName !== null) {
                     this.realtimeHub.getCurrentAgentInfo(this.dsiId)
-                        .then((agentInfo2) => {
+                        .then((agentInfo2: any) => {
                             this.createAgentViewSubscriptions(agentInfo2, agentName);
                         });
                 }
@@ -1976,7 +1976,7 @@ namespace Brightmetrics.Dashboard.Realtime {
                     timeoutMS: 60 * 1000,
                     ctx: "ccgs"
                 })
-                .then((response) => {
+                .then((response: any) => {
                     const groupNames = response.dimensionValues as string[];
 
                     if (_.size(groupNames) > 0) {
diff --git a/ts/Dashboard/Realtime/realtimehub.ts b/ts/Dashboard/Realtime/realtimehub.ts
index 81973e0..792c9d3 100644
--- a/ts/Dashboard/Realtime/realtimehub.ts
+++ b/ts/Dashboard/Realtime/realtimehub.ts
@@ -287,7 +287,7 @@ namespace Brightmetrics.Dashboard.Realtime {
                     subscription.incrementRequestCount();
                     this.log(`Resending subscription request for ${subscriptionId}`);
                     this.getAgentInfo(subscription.agentId)
-                        .then((agentInfo) => {
+                        .then((agentInfo: any) => {
                             if (this.connectionState() === SignalR.ConnectionState.Connected) {
                                 this.subscribeTopic(
                                     agentInfo.agentGuid,
@@ -376,7 +376,7 @@ namespace Brightmetrics.Dashboard.Realtime {
             $.each(this.subscriptions, (subscriptionId, subscription) => {
                 if (!agentId || subscription.agentId === agentId) {
                     this.getAgentInfo(subscription.agentId)
-                        .then((agentInfo) => {
+                        .then((agentInfo: any) => {
                             if (this.connectionState() === SignalR.ConnectionState.Connected) {
                                 this.subscribeTopic(
                                     agentInfo.agentGuid,
@@ -409,7 +409,7 @@ namespace Brightmetrics.Dashboard.Realtime {
             if (subscriptionIds.length > 0) {
                 this.log("Sending keepalive for subscriptions", subscriptionIds);
                 this.getAgentInfo(agentId)
-                    .then((agentInfo) => {
+                    .then((agentInfo: any) => {
                         this.agentHub.invoke(
                             "SubscriptionKeepalive",
                             agentInfo.agentGuid,
@@ -558,7 +558,7 @@ namespace Brightmetrics.Dashboard.Realtime {
         }
 
         public runEccAgentCommandByDsiId(dsiId: string, commandType: string, data: any) {
-            return this.getCurrentAgentInfo(dsiId).then((agentInfo) => {
+            return this.getCurrentAgentInfo(dsiId).then((agentInfo: any) => {
                 return this.runEccAgentCommand(agentInfo, _.uniqueId("eccCmd"), commandType, data);
             });
         }
@@ -687,7 +687,7 @@ namespace Brightmetrics.Dashboard.Realtime {
                 this.log("creating subscription", subscriptionId);
                 subscription = new Subscription(dsi, agentId, topic, subject);
                 this.subscriptions[subscriptionId] = subscription;
-                this.getAgentInfo(agentId).then((agentInfo) => {
+                this.getAgentInfo(agentId).then((agentInfo: any) => {
                     if (!this.started) {
                         this.start();
                     }
@@ -737,7 +737,7 @@ request because connection state is ${this.connectionState()}`);
                     return this.dataQuery(data, queryType);
                 });
             } else {
-                return this.getAgentInfo(agentId).then((data) => {
+                return this.getAgentInfo(agentId).then((data: any) => {
                     return this.dataQuery(data, queryType);
                 });
             }
diff --git a/ts/Dashboard/ViewModels/chart.ts b/ts/Dashboard/ViewModels/chart.ts
index c46ec92..a01ebb4 100644
--- a/ts/Dashboard/ViewModels/chart.ts
+++ b/ts/Dashboard/ViewModels/chart.ts
@@ -1272,7 +1272,7 @@ namespace Brightmetrics.Dashboard.ViewModels {
                 const realtimeHub = Realtime.RealtimeHub.getDefaultInstance();
 
                 realtimeHub.getCurrentAgentInfo(dsiId.toString())
-                    .then((agentInfo) => {
+                    .then((agentInfo: any) => {
                         this._ccgs = new Realtime.CallCenterGroupSupervisor(
                             agentName,
                             void 0,
@@ -1472,7 +1472,7 @@ namespace Brightmetrics.Dashboard.ViewModels {
         private _subscribeToAgentErrors() {
             Realtime.RealtimeHub.getDefaultInstance()
                 .getCurrentAgentInfo(this.getItemID(true).toString())
-                .then((agentInfo) => {
+                .then((agentInfo: any) => {
                     if (!agentInfo) {
                         Utils.logError("agentInfo undefined");
                         return;
diff --git a/ts/Dashboard/ViewModels/chartoptionsdialog.ts b/ts/Dashboard/ViewModels/chartoptionsdialog.ts
index cc93f24..befabbe 100644
--- a/ts/Dashboard/ViewModels/chartoptionsdialog.ts
+++ b/ts/Dashboard/ViewModels/chartoptionsdialog.ts
@@ -254,8 +254,8 @@ Count) can be charted together.`),
         const query = possibleValuesQuery.substring("query:".length);
 
         return realtimeHub.getCurrentAgentInfo(String(dsiId))
-            .then((agentInfo) => realtimeHub.dataQuery(agentInfo, query))
-            .then((data) => {
+            .then((agentInfo: any) => realtimeHub.dataQuery(agentInfo, query))
+            .then((data: any) => {
                 const values = data.dimensionValues ?? [];
 
                 // Release Codes have a special schema, so rather than being
