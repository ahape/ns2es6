diff --git a/ts/Admin/DataCustomization/ViewModels/ccfcalculationview.ts b/ts/Admin/DataCustomization/ViewModels/ccfcalculationview.ts
index f040c8d..2be2c2b 100644
--- a/ts/Admin/DataCustomization/ViewModels/ccfcalculationview.ts
+++ b/ts/Admin/DataCustomization/ViewModels/ccfcalculationview.ts
@@ -40,8 +40,7 @@ namespace Brightmetrics.Admin.DataCustomization.ViewModels {
         parameter?: BRIs.DTOs.IParameterDimension;
     }
 
-    interface ICustomMultipleSelectDialogProps extends
-        MultipleSelect.Interfaces.IMultipleSelectDialogProps<string>
+    interface ICustomMultipleSelectDialogProps extends MultipleSelect.Interfaces.IMultipleSelectDialogProps<string>
     {
         customLabel: KnockoutObservable<string>;
         computedLabel: KnockoutObservable<string>;
diff --git a/ts/AudioAlerts/Classes/alerter.ts b/ts/AudioAlerts/Classes/alerter.ts
index d436d5d..f9d6b6c 100644
--- a/ts/AudioAlerts/Classes/alerter.ts
+++ b/ts/AudioAlerts/Classes/alerter.ts
@@ -51,21 +51,21 @@ namespace Brightmetrics.AudioAlerts.Classes {
             // Add the CSS rule that defines the animation.
             this._addCSSRuleToStyleSheet(
                 `
-@${vendorPrefix}keyframes animation-${alertObject.alertIdForElement}`, `
-{
-    from { ${alertObject.styleProperty}: ${startValue}; }
-    to { ${alertObject.styleProperty}: ${alertObject.styleValue}; }
-}`);
+  @${vendorPrefix}keyframes animation-${alertObject.alertIdForElement}`, `
+  {
+      from { ${alertObject.styleProperty}: ${startValue}; }
+      to { ${alertObject.styleProperty}: ${alertObject.styleValue}; }
+  }`);
 
             // Add the CSS rule that implements the animation.
             this._addCSSRuleToStyleSheet(
                 `
-._audio-alert-${alertObject.alertIdForElement}`, `
-{
-    animation-name: animation-${alertObject.alertIdForElement};
-    animation-duration: 1s;
-    animation-iteration-count: 10;
-}`);
+  ._audio-alert-${alertObject.alertIdForElement}`, `
+  {
+      animation-name: animation-${alertObject.alertIdForElement};
+      animation-duration: 1s;
+      animation-iteration-count: 10;
+  }`);
         }
 
         private _removeAlertFromStylesheet(alertObject: Interfaces.IAlertObject) {
diff --git a/ts/C2G/ViewModels/c2gvoiceanalytics.ts b/ts/C2G/ViewModels/c2gvoiceanalytics.ts
index 8f374c9..1274d15 100644
--- a/ts/C2G/ViewModels/c2gvoiceanalytics.ts
+++ b/ts/C2G/ViewModels/c2gvoiceanalytics.ts
@@ -256,7 +256,7 @@ namespace Brightmetrics.C2G.ViewModels {
     }
 
     // tslint:disable:max-classes-per-file
-    class TagsVM {
+    export class TagsVM {
         public ruleSets: TagsVM.RuleSet[];
 
         constructor(props: TagsVM.IProps) {
@@ -297,7 +297,7 @@ namespace Brightmetrics.C2G.ViewModels {
         }
     }
 
-    namespace TagsVM {
+    export namespace TagsVM {
 
         export interface IProps {
             compiled: IAnalyticsDataGrouping[];
diff --git a/ts/Dashboard/ViewModels/page.ts b/ts/Dashboard/ViewModels/page.ts
index 954ea15..401ad77 100644
--- a/ts/Dashboard/ViewModels/page.ts
+++ b/ts/Dashboard/ViewModels/page.ts
@@ -88,8 +88,8 @@ namespace Brightmetrics.Dashboard.ViewModels {
     }
 
     function initTheme() {
-        Brightmetrics.theme.subscribe((theme) => {
-            if (theme === Brightmetrics.Enums.Theme.Dark) {
+        Brightmetrics.theme.subscribe((_theme) => {
+            if (_theme === Brightmetrics.Enums.Theme.Dark) {
                 configureDarkTheme();
             } else {
                 configureDefaultTheme();
diff --git a/ts/DashboardDetail/ViewModels/exportdialog.ts b/ts/DashboardDetail/ViewModels/exportdialog.ts
index 3acc088..54508f8 100644
--- a/ts/DashboardDetail/ViewModels/exportdialog.ts
+++ b/ts/DashboardDetail/ViewModels/exportdialog.ts
@@ -36,23 +36,23 @@ namespace Brightmetrics.DashboardDetail.ViewModels {
                 const exportedFormat = this.exportReportFormatType();
 
                 if (exportedFormat === Brightmetrics.Enums.ExportFormat.PDF) {
-                    Utils.Preferences.set(Utils.Preferences.EPreferences.pdfStyle, this.exportPDFFormatting());
+                    Utils.Preferences.setPreference(Utils.Preferences.EPreferences.pdfStyle, this.exportPDFFormatting());
                 } else if (exportedFormat === Brightmetrics.Enums.ExportFormat.CSV) {
-                    Utils.Preferences.set(Utils.Preferences.EPreferences.csvStyle, this.exportCSVFormatting());
+                    Utils.Preferences.setPreference(Utils.Preferences.EPreferences.csvStyle, this.exportCSVFormatting());
                 }
 
-                Utils.Preferences.set(Utils.Preferences.EPreferences.exportReportFormat, exportedFormat);
+                Utils.Preferences.setPreference(Utils.Preferences.EPreferences.exportReportFormat, exportedFormat);
             } else if (exportType === "chart") {
                 const exportedFormat = this.exportFormatChartType();
 
                 if (exportedFormat === Brightmetrics.Enums.ExportFormat.PDF) {
-                    Utils.Preferences.set(Utils.Preferences.EPreferences.pdfStyle, this.exportPDFFormatting());
+                    Utils.Preferences.setPreference(Utils.Preferences.EPreferences.pdfStyle, this.exportPDFFormatting());
                 }
 
-                Utils.Preferences.set(Utils.Preferences.EPreferences.exportChartFormat, exportedFormat);
+                Utils.Preferences.setPreference(Utils.Preferences.EPreferences.exportChartFormat, exportedFormat);
             }
 
-            Utils.Preferences.set(Utils.Preferences.EPreferences.exportType, exportType);
+            Utils.Preferences.setPreference(Utils.Preferences.EPreferences.exportType, exportType);
         }
 
         public initialize(props: IExportDialogProp) {
@@ -64,20 +64,20 @@ namespace Brightmetrics.DashboardDetail.ViewModels {
                 this.exportType = ko.observable("report");
             } else {
                 this.exportType = ko.observable(
-                    Utils.Preferences.get(Utils.Preferences.EPreferences.exportType)
+                    Utils.Preferences.getPreference(Utils.Preferences.EPreferences.exportType)
                 );
             }
             this.exportReportFormatType = ko.observable(
-                Utils.Preferences.get(Utils.Preferences.EPreferences.exportReportFormat)
+                Utils.Preferences.getPreference(Utils.Preferences.EPreferences.exportReportFormat)
             );
             this.exportFormatChartType = ko.observable(
-                Utils.Preferences.get(Utils.Preferences.EPreferences.exportChartFormat)
+                Utils.Preferences.getPreference(Utils.Preferences.EPreferences.exportChartFormat)
             );
             this.exportPDFFormatting = ko.observable(
-                Utils.Preferences.get(Utils.Preferences.EPreferences.pdfStyle)
+                Utils.Preferences.getPreference(Utils.Preferences.EPreferences.pdfStyle)
             );
             this.exportCSVFormatting = ko.observable(
-                Utils.Preferences.get(Utils.Preferences.EPreferences.csvStyle)
+                Utils.Preferences.getPreference(Utils.Preferences.EPreferences.csvStyle)
             );
 
             if (props.exportReportFormatType) {
diff --git a/ts/MyAccount/ViewModels/page.ts b/ts/MyAccount/ViewModels/page.ts
index 8408511..7fca7fa 100644
--- a/ts/MyAccount/ViewModels/page.ts
+++ b/ts/MyAccount/ViewModels/page.ts
@@ -6,13 +6,13 @@ namespace Brightmetrics.MyAccount.ViewModels {
     import BIVs = Brightmetrics.Insights.ViewModels;
 
     enum TabName {
-        MyAccount = "My Account",
+        MyAccountTab = "My Account",
     }
 
     interface ITab { name: string; }
 
     const tabs: ITab[] = [
-        { name: TabName.MyAccount }
+        { name: TabName.MyAccountTab }
     ];
 
     export class Page extends BVs.PageBase {
@@ -53,7 +53,7 @@ namespace Brightmetrics.MyAccount.ViewModels {
 
             this.main = ko.computed(() => {
                 switch (this.activeTabName()) {
-                    case TabName.MyAccount:
+                    case TabName.MyAccountTab:
                         return {
                             data: this.myAccount,
                             name: "my-account-view-template",
diff --git a/ts/PrintPreview/ViewModels/page.ts b/ts/PrintPreview/ViewModels/page.ts
index a3ec309..d2c0025 100644
--- a/ts/PrintPreview/ViewModels/page.ts
+++ b/ts/PrintPreview/ViewModels/page.ts
@@ -96,7 +96,7 @@ namespace Brightmetrics.PrintPreview.ViewModels {
                 };
 
                 if ($this.is(".exportformatpdf")) {
-                    const selected = Utils.Preferences.get(Utils.Preferences.EPreferences.pdfStyle);
+                    const selected = Utils.Preferences.getPreference(Utils.Preferences.EPreferences.pdfStyle);
                     const template = _.template(Utils.stringUnraw(`
 <div style="margin-top: 30px;">
     <label for="jehgoq6e" style="margin-right: 25px;">
@@ -125,7 +125,7 @@ ${selected === "Landscape" ? "checked" : ""}>
                             if (button === "Okay") {
                                 const orientation = $("[name='r-formatting']:checked").val();
                                 this.exportForm.find("input[name='formatOrientation']").val(orientation!);
-                                Utils.Preferences.set(
+                                Utils.Preferences.setPreference(
                                     Utils.Preferences.EPreferences.pdfStyle,
                                     orientation! as string
                                 );
@@ -133,7 +133,7 @@ ${selected === "Landscape" ? "checked" : ""}>
                             }
                         });
                 } else if ($this.is(".exportformatcsv")) {
-                    const selected = Utils.Preferences.get(Utils.Preferences.EPreferences.csvStyle);
+                    const selected = Utils.Preferences.getPreference(Utils.Preferences.EPreferences.csvStyle);
                     const template = _.template(Utils.stringUnraw(`
 <div style="margin-top: 30px;">
     <label for="jehgoq6e" style="margin-right: 25px;">
@@ -165,7 +165,7 @@ ${selected === "Unformatted" ? "checked" : ""}>
                                 const dataFormatting = $("[name='r-formatting']:checked").val();
                                 this.exportForm.find("input[name='unformatted']")
                                     .val(dataFormatting === "Unformatted" ? "true" : "false");
-                                Utils.Preferences.set(
+                                Utils.Preferences.setPreference(
                                     Utils.Preferences.EPreferences.csvStyle,
                                     dataFormatting! as string
                                 );
@@ -293,7 +293,7 @@ ${selected === "Unformatted" ? "checked" : ""}>
             this.editor.report.tableColumnSortPath = this.defaultColumnSortPath;
             // this.tableColumnSortIndex(0);
             // this.tableColumnSortPath();
-}
+        }
 
         public initChildViewModels() {
             // If the report has been loaded in the preview page just use the same data to recreate the report.
diff --git a/ts/Reports/ViewModels/report-field-editor.ts b/ts/Reports/ViewModels/report-field-editor.ts
index ecd0f02..76b84dd 100644
--- a/ts/Reports/ViewModels/report-field-editor.ts
+++ b/ts/Reports/ViewModels/report-field-editor.ts
@@ -292,7 +292,7 @@ namespace Brightmetrics.Reports.ViewModels {
         removeThreshold(toRemove: Brightmetrics.Reports.Interfaces.DTOs.IReportThreshold): void;
     }
 
-    namespace Widget {
+    export namespace Widget {
         export const Id = {
             AvailableCommonDimensions: "COMMON DIMENSIONS",
             AvailableDimensions: "AVAILABLE DIMENSIONS",
@@ -411,7 +411,7 @@ namespace Brightmetrics.Reports.ViewModels {
         }
     }
 
-    namespace Widget.Item {
+    export namespace Widget.Item {
         export type Props = Widget.Props & {
             hasFilter: KnockoutComputed<boolean>;
             helper: IFieldHelperExtended;
diff --git a/ts/Reports/ViewModels/report.ts b/ts/Reports/ViewModels/report.ts
index 9e71860..877dbae 100644
--- a/ts/Reports/ViewModels/report.ts
+++ b/ts/Reports/ViewModels/report.ts
@@ -2176,7 +2176,7 @@ tr >
             this._ignoreTriggers = false;
             this._sortIndexesAreOutOfSync = false;
             this.autoRefreshEnabled = ko.observable(
-                Utils.Preferences.get(Utils.Preferences.EPreferences.summaryAutoRunEnabled) === "true"
+                Utils.Preferences.getPreference(Utils.Preferences.EPreferences.summaryAutoRunEnabled) === "true"
             );
 
             this.runReport_rateLimited = rateLimit(() => {
@@ -2568,7 +2568,7 @@ The following filters are invalid:
             this.events.toggleAutoRefresh = () => {
                 const autoRefreshEnabled = !this.autoRefreshEnabled();
                 this.autoRefreshEnabled(autoRefreshEnabled);
-                Utils.Preferences.set(
+                Utils.Preferences.setPreference(
                     Utils.Preferences.EPreferences.summaryAutoRunEnabled,
                     autoRefreshEnabled.toString()
                 );
diff --git a/ts/ViewModels/dialog.ts b/ts/ViewModels/dialog.ts
index dcd41c4..f215fd0 100644
--- a/ts/ViewModels/dialog.ts
+++ b/ts/ViewModels/dialog.ts
@@ -446,6 +446,4 @@ namespace Brightmetrics.ViewModels {
             }
         }
     }
-
-    export const DialogVM = DialogViewModel;
 }
diff --git a/ts/utils.ts b/ts/utils.ts
index 0772f3a..19fa744 100644
--- a/ts/utils.ts
+++ b/ts/utils.ts
@@ -6475,14 +6475,14 @@ the fly and as a result, your ${entity} may take longer to load.
             }
         }
 
-        export function get(preference: EPreferences): string {
+        export function getPreference(preference: EPreferences): string {
             const defaultValue = getDefaultValues(preference);
             const savedValue = localStorage.getItem(getKey(preference));
 
             return savedValue === null ? defaultValue : savedValue;
         }
 
-        export function set(preference: EPreferences, value: string) {
+        export function setPreference(preference: EPreferences, value: string) {
             localStorage.setItem(getKey(preference), value);
         }
     }
@@ -7855,7 +7855,7 @@ days of reporting. To upgrade, please contact`);
         /**
          * Important to call this before `ko.applyBindings`.
          */
-        export function listenToDOMEvents(events: string[], warnAfter?: number) {
+        export function listenToDOMEvents(_events: string[], warnAfter?: number) {
             domEventTool = new DOMEventTracker();
             frameTool = new FrameAnalyzer((exceededDuration) => {
                 logError(
@@ -7870,7 +7870,7 @@ days of reporting. To upgrade, please contact`);
                     bugsnagGroupingHash);
             });
 
-            domEventTool.init(events);
+            domEventTool.init(_events);
             frameTool.init();
         }
 
